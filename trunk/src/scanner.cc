#define YY_CHAR char
#line 1 "/opt/sfw/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
//#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "ppddl.lex"
#define INITIAL 0
#define YY_PDDL_Scanner_FLEX_SCANNER
#include "scanner.h"
#line 40 "ppddl.lex"
#line 196 "/opt/sfw/lib/flexskel.cc"

#define yy___stderr YY_PDDL_Scanner_ERRFILE
#define yy___text YY_PDDL_Scanner_TEXT
#define yy___leng YY_PDDL_Scanner_LENG
#define yy___in YY_PDDL_Scanner_IN
#define yy___out YY_PDDL_Scanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in ); \
		YY_PDDL_Scanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_PDDL_Scanner_DEBUG != 0
#define yy___flex_debug YY_PDDL_Scanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_PDDL_Scanner_ECHO
#define yy___input YY_PDDL_Scanner_INPUT
#define yy___fatal_error YY_PDDL_Scanner_FATAL_ERROR
#define yy___wrap YY_PDDL_Scanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_PDDL_Scanner_IFILE  *yy_input_file;

    YY_PDDL_Scanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_PDDL_Scanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_PDDL_Scanner_DEBUG != 0
int YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_PDDL_Scanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_PDDL_Scanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_PDDL_Scanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_PDDL_Scanner_CHAR *yy___text;
int yy___leng;

YY_PDDL_Scanner_IFILE  *yy___in = (YY_PDDL_Scanner_IFILE  *) 0;
YY_PDDL_Scanner_OFILE *yy___out = (YY_PDDL_Scanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_PDDL_Scanner_CHAR *yy_c_buf_p = (YY_PDDL_Scanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_PDDL_Scanner_ECHO_NOCODE
void YY_PDDL_Scanner_CLASS::yy___echo()
{YY_PDDL_Scanner_ECHO_CODE
}
#endif
#ifndef YY_PDDL_Scanner_INPUT_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_PDDL_Scanner_INPUT_CODE
}
#endif
#ifndef YY_PDDL_Scanner_FATAL_ERROR_NOCODE
void YY_PDDL_Scanner_CLASS::yy___fatal_error(char *msg)
{YY_PDDL_Scanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_PDDL_Scanner_WRAP_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___wrap()
{YY_PDDL_Scanner_WRAP_CODE
}
#endif
void YY_PDDL_Scanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_PDDL_Scanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_PDDL_Scanner_DEBUG != 0
 YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
}

YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CLASS(YY_PDDL_Scanner_CONSTRUCTOR_PARAM) YY_PDDL_Scanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_PDDL_Scanner_CONSTRUCTOR_CODE;
}
YY_PDDL_Scanner_CLASS::~YY_PDDL_Scanner_CLASS() 
{YY_PDDL_Scanner_DESTRUCTOR_CODE;
 if(YY_PDDL_Scanner_CURRENT_BUFFER)
  YY_PDDL_Scanner_DELETE_BUFFER(YY_PDDL_Scanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 48
typedef int yy_state_type;
static const short int yy_accept[224] =
    {   0,
       46,   46,   48,   47,    1,    3,    4,    5,    8,   46,
       47,   47,    9,   47,    6,    7,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,    1,   46,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,    0,    2,   43,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   35,   45,   45,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   43,
       43,   29,   45,   45,   45,   45,   45,   32,   45,   45,
       45,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       45,   45,   45,   45,   45,   45,   45,   33,   44,   44,
       27,   44,   44,   44,   44,   44,   42,   28,   44,   40,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   45,
       45,   45,   45,   45,   36,   45,   44,   20,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   13,   10,   11,   30,   31,   45,   45,
       19,   44,   44,   38,   24,   44,   41,   44,   44,   44,
       44,   44,   44,   26,   21,   17,   45,   37,   44,   44,
       18,   39,   44,   44,   44,   44,   44,   45,   44,   44,

       44,   44,   44,   44,   44,   34,   25,   14,   44,   44,
       44,   44,   44,   16,   22,   44,   15,   44,   44,   44,
       23,   12,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        5,    1,    1,    1,    6,    1,    1,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,    9,    1,
       10,    1,   11,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   14,
       12,    1,   13,    1,   14,    1,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   14,    1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[40] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const short int yy_base[232] =
    {   0,
        0,    0,  133,  740,  129,  740,  740,  740,  118,  114,
       26,  106,  740,    0,  740,  740,   60,   62,   64,   66,
       68,   70,   72,   74,   78,   81,   94,   82,   85,   88,
       93,  101,  105,  107,  109,  111,  113,  117,  122,  135,
      137,  140,  142,   83,  740,  145,    0,  147,  151,  155,
      157,  159,  164,  166,  170,  172,  179,  181,  186,    0,
      183,  188,  191,  193,  200,  202,  206,  209,  212,  217,
      224,  214,  227,  229,  233,  239,  241,  243,  247,    0,
      249,  251,  256,  258,  261,  265,  268,  275,  278,  280,
      282,  285,  291,  293,  295,  297,  299,  308,  310,  315,

      317,  319,  323,  331,  333,  337,  339,  345,  350,  352,
      354,  356,  358,  362,  366,  369,  374,  377,  379,  384,
      387,  389,  395,  397,  399,  403,  407,  411,  415,  417,
      419,  421,  431,  426,  433,  436,  438,  440,  442,  444,
      454,  462,  464,  466,  470,  472,  474,  477,  479,  481,
      486,  491,  493,  498,  500,  502,  504,  509,  511,  513,
      515,  523,  525,  529,  533,  535,  537,  540,  542,  544,
      546,  552,  554,  556,  559,  561,  563,  566,  570,  572,
      574,  580,  577,  582,  584,  591,  594,  596,  598,  601,
      603,  605,  607,  609,  611,  613,  618,  623,  625,  630,

      632,  634,  636,  642,  645,  648,  653,  661,  665,  667,
      669,  671,  673,  675,  679,  681,  683,  687,  689,  691,
      696,  699,  740,  724,   79,  726,  728,  730,  732,  734,
      736
    } ;

static const short int yy_def[232] =
    {   0,
      223,    1,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  224,  223,  225,  223,  223,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  223,  223,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  224,  223,  228,  229,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  230,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  231,
      228,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      226,  226,  226,  226,  226,  226,  226,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  226,
      226,  226,  226,  226,  226,  226,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  226,  226,  226,  226,  226,  226,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  226,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  226,  227,  227,

      227,  227,  227,  227,  227,  226,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,    0,  223,  223,  223,  223,  223,  223,  223,
      223
    } ;

static const short int yy_nxt[780] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   17,   17,   19,   20,   21,
       17,   17,   22,   17,   17,   17,   17,   23,   24,   25,
       17,   17,   17,   17,   17,   17,   26,   17,   17,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   29,
       29,   29,   29,   29,   39,   40,   29,   41,   42,   43,
       29,   29,   29,   29,   29,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   46,   50,   47,   47,   45,   47,   47,   28,   49,
       60,   60,   51,   60,   60,   27,   53,   54,   60,   60,

       55,   56,   59,   52,   62,   57,   60,   60,   45,   58,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       28,   64,   60,   60,   28,   63,   67,   60,   60,   65,
       27,   70,  223,   66,   68,   71,  223,   73,  223,   69,
       60,   60,   60,   60,   72,   60,   60,   60,   60,   74,
       80,   80,   47,   47,  223,   76,   47,   47,   77,  223,
       47,   47,   47,   47,   47,   47,   75,  223,   82,   47,
       47,   47,   47,   78,   83,   47,   47,   47,   47,  223,
       79,   85,  223,   84,   47,   47,   47,   47,   60,   60,
       89,   47,   47,   60,   60,   86,   60,   60,   60,   60,

      223,   87,  223,   88,   91,   60,   60,   60,   60,   90,
       94,   60,   60,   93,   60,   60,  223,   60,   60,   60,
       60,   92,   60,   60,  223,   97,   99,   95,   96,   60,
       60,  100,   60,   60,   60,   60,  102,  223,   60,   60,
      223,  101,  223,   98,   60,   60,   60,   60,   60,   60,
      103,  106,   60,   60,   80,   80,   47,   47,  223,  104,
      105,   47,   47,   47,   47,  109,   47,   47,  108,  107,
       47,   47,  112,   47,   47,  223,  110,  223,  111,  114,
       47,   47,  115,   47,   47,   47,   47,   47,   47,  223,
       60,   60,  223,  113,  223,  117,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,  116,  119,  223,  118,
      223,  124,  122,   60,   60,   60,   60,  125,  223,  120,
       60,   60,   60,   60,   60,   60,  126,  123,   60,   60,
      223,  121,  128,  223,  129,  127,   60,   60,   60,   60,
      223,  131,   60,   60,   60,   60,  223,  133,  223,  132,
       60,   60,  130,  134,  135,   60,   60,   60,   60,   47,
       47,   47,   47,   47,   47,  223,  138,   47,   47,  223,
      139,   47,   47,  136,   47,   47,  223,  137,  141,   47,
       47,  140,   47,   47,   60,   60,  223,  143,  145,   60,
       60,  142,   60,   60,   60,   60,  223,  144,  223,  146,

       60,   60,   60,   60,   60,   60,  223,  147,   60,   60,
      148,  149,   60,   60,  223,  152,   60,   60,  223,  151,
       60,   60,   60,   60,   60,   60,   60,   60,  150,  223,
      153,   60,   60,  154,  223,  155,   60,   60,   60,   60,
      223,   60,   60,   60,   60,   60,   60,   60,   60,   47,
       47,  223,  156,  223,  158,  159,  161,  157,  160,   47,
       47,  223,  165,  223,  163,  223,  162,   47,   47,   47,
       47,   47,   47,  223,  164,   47,   47,   47,   47,   60,
       60,  166,   60,   60,   60,   60,   60,   60,  169,  168,
      170,   60,   60,  223,  167,  173,   60,   60,   60,   60,

      223,  171,  223,   60,   60,   60,   60,   60,   60,   60,
       60,  223,  172,  174,   60,   60,   60,   60,   60,   60,
       60,   60,  180,  223,  175,  177,  176,  182,   60,   60,
       60,   60,  184,  178,   60,   60,  181,  179,   47,   47,
       47,   47,   47,   47,  183,   47,   47,   47,   47,   47,
       47,   60,   60,  223,  185,  223,  187,   60,   60,   60,
       60,   60,   60,  186,   60,   60,   60,   60,   60,   60,
      188,   60,   60,  223,  189,   60,   60,   60,   60,   60,
       60,  190,   60,   60,  193,   60,   60,   60,   60,   60,
       60,  195,  223,  191,  196,  197,   60,   60,  192,   47,

       47,   47,   47,   60,   60,  194,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
      223,  198,  201,   60,   60,  223,  199,  202,   47,   47,
       60,   60,  223,  203,  200,   60,   60,   60,   60,   60,
       60,   60,   60,  223,  205,  223,  204,   60,   60,  223,
       60,   60,  207,   47,   47,  223,  206,  209,   60,   60,
      212,  223,  208,  213,  223,  210,   60,   60,  223,  211,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,  223,  214,   60,   60,   60,   60,   60,   60,
      223,  216,   60,   60,   60,   60,   60,   60,  223,  215,

      218,   60,   60,  217,   60,   60,  223,  223,  223,  219,
      223,  223,  223,  223,  223,  223,  221,  223,  223,  223,
      220,  223,  223,  222,   44,   44,   44,   48,   48,   61,
       61,   81,   81,   47,   47,   60,   60,   80,   80,    3,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223
    } ;

static const short int yy_chk[780] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   17,   17,   18,   18,   19,
       19,   20,   20,   21,   21,   22,   22,   23,   23,   24,
       24,  225,   19,   25,   25,   44,   26,   26,   28,   18,
       29,   29,   19,   30,   30,   27,   21,   22,   31,   31,

       23,   24,   26,   20,   30,   24,   32,   32,   12,   25,
       33,   33,   34,   34,   35,   35,   36,   36,   37,   37,
       10,   31,   38,   38,    9,   30,   34,   39,   39,   32,
        5,   37,    3,   33,   35,   37,    0,   39,    0,   36,
       40,   40,   41,   41,   38,   42,   42,   43,   43,   40,
       46,   46,   48,   48,    0,   41,   49,   49,   42,    0,
       50,   50,   51,   51,   52,   52,   40,    0,   49,   53,
       53,   54,   54,   42,   50,   55,   55,   56,   56,    0,
       43,   52,    0,   51,   57,   57,   58,   58,   61,   61,
       56,   59,   59,   62,   62,   53,   63,   63,   64,   64,

        0,   54,    0,   55,   59,   65,   65,   66,   66,   58,
       64,   67,   67,   63,   68,   68,    0,   69,   69,   72,
       72,   62,   70,   70,    0,   67,   69,   65,   66,   71,
       71,   70,   73,   73,   74,   74,   72,    0,   75,   75,
        0,   71,    0,   68,   76,   76,   77,   77,   78,   78,
       73,   75,   79,   79,   81,   81,   82,   82,    0,   73,
       74,   83,   83,   84,   84,   78,   85,   85,   77,   76,
       86,   86,   84,   87,   87,    0,   79,    0,   83,   86,
       88,   88,   87,   89,   89,   90,   90,   91,   91,    0,
       92,   92,    0,   85,    0,   90,   93,   93,   94,   94,

       95,   95,   96,   96,   97,   97,   89,   92,    0,   91,
        0,   96,   95,   98,   98,   99,   99,   97,    0,   93,
      100,  100,  101,  101,  102,  102,   98,   95,  103,  103,
        0,   94,  100,    0,  101,   99,  104,  104,  105,  105,
        0,  103,  106,  106,  107,  107,    0,  105,    0,  104,
      108,  108,  102,  106,  106,  109,  109,  110,  110,  111,
      111,  112,  112,  113,  113,    0,  109,  114,  114,    0,
      110,  115,  115,  107,  116,  116,    0,  108,  112,  117,
      117,  111,  118,  118,  119,  119,    0,  114,  116,  120,
      120,  113,  121,  121,  122,  122,    0,  115,    0,  117,

      123,  123,  124,  124,  125,  125,    0,  119,  126,  126,
      120,  122,  127,  127,    0,  125,  128,  128,    0,  124,
      129,  129,  130,  130,  131,  131,  132,  132,  123,    0,
      126,  134,  134,  129,    0,  131,  133,  133,  135,  135,
        0,  136,  136,  137,  137,  138,  138,  139,  139,  140,
      140,    0,  132,    0,  134,  135,  137,  133,  136,  141,
      141,    0,  140,    0,  138,    0,  137,  142,  142,  143,
      143,  144,  144,    0,  139,  145,  145,  146,  146,  147,
      147,  141,  148,  148,  149,  149,  150,  150,  144,  143,
      146,  151,  151,    0,  142,  150,  152,  152,  153,  153,

        0,  147,    0,  154,  154,  155,  155,  156,  156,  157,
      157,    0,  149,  151,  158,  158,  159,  159,  160,  160,
      161,  161,  157,    0,  152,  154,  153,  159,  162,  162,
      163,  163,  161,  155,  164,  164,  158,  156,  165,  165,
      166,  166,  167,  167,  160,  168,  168,  169,  169,  170,
      170,  171,  171,    0,  162,    0,  169,  172,  172,  173,
      173,  174,  174,  163,  175,  175,  176,  176,  177,  177,
      170,  178,  178,    0,  172,  179,  179,  180,  180,  181,
      181,  173,  183,  183,  179,  182,  182,  184,  184,  185,
      185,  181,    0,  176,  182,  183,  186,  186,  178,  187,

      187,  188,  188,  189,  189,  180,  190,  190,  191,  191,
      192,  192,  193,  193,  194,  194,  195,  195,  196,  196,
        0,  187,  193,  197,  197,    0,  189,  194,  198,  198,
      199,  199,    0,  195,  190,  200,  200,  201,  201,  202,
      202,  203,  203,    0,  197,    0,  196,  204,  204,    0,
      205,  205,  199,  206,  206,    0,  198,  201,  207,  207,
      204,    0,  200,  205,    0,  202,  208,  208,    0,  203,
      209,  209,  210,  210,  211,  211,  212,  212,  213,  213,
      214,  214,    0,  209,  215,  215,  216,  216,  217,  217,
        0,  211,  218,  218,  219,  219,  220,  220,    0,  210,

      213,  221,  221,  212,  222,  222,    0,    0,    0,  216,
        0,    0,    0,    0,    0,    0,  219,    0,    0,    0,
      218,    0,    0,  220,  224,  224,  224,  226,  226,  227,
      227,  228,  228,  229,  229,  230,  230,  231,  231,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_PDDL_Scanner_DEBUG != 0
static const short int yy_rule_linenum[47] =
    {   0,
       42,   43,   47,   52,   53,   54,   55,   56,   57,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   93,  101,  105,  128
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/opt/sfw/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_PDDL_Scanner_LEX_DEFINED
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM )
YY_PDDL_Scanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "/opt/sfw/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_PDDL_Scanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_PDDL_Scanner_OFILE_DEFAULT;

	if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in );
	else
	    YY_PDDL_Scanner_CURRENT_BUFFER = YY_PDDL_Scanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_PDDL_Scanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/opt/sfw/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 224 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 223 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "/opt/sfw/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "/opt/sfw/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_PDDL_Scanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 42 "ppddl.lex"
;
	YY_BREAK
case 2:
#line 43 "ppddl.lex"
{ _line_no++;
                   if( _trace_line )
                       cerr << endl << "LINE: " << _line_no << endl;
                 }
	YY_BREAK
case 3:
#line 47 "ppddl.lex"
{ _line_no++;
                   if( _trace_line )
                       cerr << endl << "LINE: " << _line_no << endl;
                 }
	YY_BREAK
case 4:
#line 52 "ppddl.lex"
{ return PDDL_Parser::TK_OPEN; }
	YY_BREAK
case 5:
#line 53 "ppddl.lex"
{ return PDDL_Parser::TK_CLOSE; }
	YY_BREAK
case 6:
#line 54 "ppddl.lex"
{ return PDDL_Parser::TK_OPEN_SQ; }
	YY_BREAK
case 7:
#line 55 "ppddl.lex"
{ return PDDL_Parser::TK_CLOSE_SQ; }
	YY_BREAK
case 8:
#line 56 "ppddl.lex"
{ return PDDL_Parser::TK_HYPHEN; }
	YY_BREAK
case 9:
#line 57 "ppddl.lex"
{ return PDDL_Parser::TK_EQ; }
	YY_BREAK
case 10:
#line 59 "ppddl.lex"
{ return PDDL_Parser::KW_DEFINE; }
	YY_BREAK
case 11:
#line 60 "ppddl.lex"
{ return PDDL_Parser::KW_DOMAIN; }
	YY_BREAK
case 12:
#line 61 "ppddl.lex"
{ return PDDL_Parser::KW_REQS; }
	YY_BREAK
case 13:
#line 62 "ppddl.lex"
{ return PDDL_Parser::KW_TYPES; }
	YY_BREAK
case 14:
#line 63 "ppddl.lex"
{ return PDDL_Parser::KW_CONSTANTS; }
	YY_BREAK
case 15:
#line 64 "ppddl.lex"
{ return PDDL_Parser::KW_PREDS; }
	YY_BREAK
case 16:
#line 65 "ppddl.lex"
{ return PDDL_Parser::KW_OBSERVABLE; }
	YY_BREAK
case 17:
#line 66 "ppddl.lex"
{ return PDDL_Parser::KW_STICKY; }
	YY_BREAK
case 18:
#line 67 "ppddl.lex"
{ return PDDL_Parser::KW_FLUENTS; }
	YY_BREAK
case 19:
#line 68 "ppddl.lex"
{ return PDDL_Parser::KW_ACTION; }
	YY_BREAK
case 20:
#line 69 "ppddl.lex"
{ return PDDL_Parser::KW_AXIOM; }
	YY_BREAK
case 21:
#line 70 "ppddl.lex"
{ return PDDL_Parser::KW_SENSOR; }
	YY_BREAK
case 22:
#line 71 "ppddl.lex"
{ return PDDL_Parser::KW_ARGS; }
	YY_BREAK
case 23:
#line 72 "ppddl.lex"
{ return PDDL_Parser::KW_PRE; }
	YY_BREAK
case 24:
#line 73 "ppddl.lex"
{ return PDDL_Parser::KW_EFFECT; }
	YY_BREAK
case 25:
#line 74 "ppddl.lex"
{ return PDDL_Parser::KW_COND; }
	YY_BREAK
case 26:
#line 75 "ppddl.lex"
{ return PDDL_Parser::KW_SENSED; }
	YY_BREAK
case 27:
#line 76 "ppddl.lex"
{ return PDDL_Parser::KW_BODY; }
	YY_BREAK
case 28:
#line 77 "ppddl.lex"
{ return PDDL_Parser::KW_HEAD; }
	YY_BREAK
case 29:
#line 78 "ppddl.lex"
{ return PDDL_Parser::KW_AND; }
	YY_BREAK
case 30:
#line 79 "ppddl.lex"
{ return PDDL_Parser::KW_EXISTS; }
	YY_BREAK
case 31:
#line 80 "ppddl.lex"
{ return PDDL_Parser::KW_FORALL; }
	YY_BREAK
case 32:
#line 81 "ppddl.lex"
{ return PDDL_Parser::KW_NOT; }
	YY_BREAK
case 33:
#line 82 "ppddl.lex"
{ return PDDL_Parser::KW_WHEN; }
	YY_BREAK
case 34:
#line 83 "ppddl.lex"
{ return PDDL_Parser::KW_INVARIANT; }
	YY_BREAK
case 35:
#line 84 "ppddl.lex"
{ return PDDL_Parser::KW_OR; }
	YY_BREAK
case 36:
#line 85 "ppddl.lex"
{ return PDDL_Parser::KW_ONEOF; }
	YY_BREAK
case 37:
#line 86 "ppddl.lex"
{ return PDDL_Parser::KW_PROBLEM; }
	YY_BREAK
case 38:
#line 87 "ppddl.lex"
{ return PDDL_Parser::KW_FORDOMAIN; }
	YY_BREAK
case 39:
#line 88 "ppddl.lex"
{ return PDDL_Parser::KW_OBJECTS; }
	YY_BREAK
case 40:
#line 89 "ppddl.lex"
{ return PDDL_Parser::KW_INIT; }
	YY_BREAK
case 41:
#line 90 "ppddl.lex"
{ return PDDL_Parser::KW_HIDDEN; }
	YY_BREAK
case 42:
#line 91 "ppddl.lex"
{ return PDDL_Parser::KW_GOAL; }
	YY_BREAK
case 43:
#line 93 "ppddl.lex"
{ val.sym = _tab.inserta(yytext);
             if( val.sym->val == 0 )
                 return PDDL_Parser::TK_NEW_VAR_SYMBOL;
             if( ((PDDL_Base::Symbol*)val.sym->val)->sym_class == PDDL_Base::sym_variable )
                 return PDDL_Parser::TK_VAR_SYMBOL;
             return PDDL_Parser::TK_NEW_VAR_SYMBOL;
           }
	YY_BREAK
case 44:
#line 101 "ppddl.lex"
{ val.sym = _tab.inserta(yytext);
             return PDDL_Parser::TK_KEYWORD;
           }
	YY_BREAK
case 45:
#line 105 "ppddl.lex"
{ val.sym = _tab.inserta(yytext);
             if( val.sym->val == 0 ) {
                 return PDDL_Parser::TK_NEW_SYMBOL;
             } else {
                 switch (((PDDL_Base::Symbol*)val.sym->val)->sym_class) {
                   case PDDL_Base::sym_object:
                     return PDDL_Parser::TK_OBJ_SYMBOL;
                   case PDDL_Base::sym_typename:
                     return PDDL_Parser::TK_TYPE_SYMBOL;
                   case PDDL_Base::sym_predicate:
                     return PDDL_Parser::TK_PRED_SYMBOL;
                   case PDDL_Base::sym_action:
                     return PDDL_Parser::TK_ACTION_SYMBOL;
                   case PDDL_Base::sym_sensor:
                     return PDDL_Parser::TK_SENSOR_SYMBOL;
                   case PDDL_Base::sym_axiom:
                     return PDDL_Parser::TK_AXIOM_SYMBOL;
                   default:
                     return PDDL_Parser::TK_MISC_SYMBOL;
                 }
             }
           }
	YY_BREAK
case 46:
#line 128 "ppddl.lex"
{ val.ival = atoi(yytext); return PDDL_Parser::TK_INT; }
	YY_BREAK
case 47:
#line 130 "ppddl.lex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "/opt/sfw/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "/opt/sfw/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_PDDL_Scanner_DEBUG != 0
#ifndef YY_PDDL_Scanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_PDDL_Scanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_PDDL_Scanner_CHAR *dest = YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_PDDL_Scanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_PDDL_Scanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "/opt/sfw/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 224 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "/opt/sfw/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_PDDL_Scanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 224 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 223);
#line 755 "/opt/sfw/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_PDDL_Scanner_CHAR c, register YY_PDDL_Scanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_PDDL_Scanner_CHAR c;
register YY_PDDL_Scanner_CHAR *yy_bp;
#endif
#else
void YY_PDDL_Scanner_CLASS::yyunput( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *yy_bp )
#endif

    {
    register YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_PDDL_Scanner_CHAR *dest =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_PDDL_Scanner_CHAR *source =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_PDDL_Scanner_CLASS::input()
#endif
    {
    int c;
    YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_PDDL_Scanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_RESTART( YY_PDDL_Scanner_IFILE  *input_file )
#else
void YY_PDDL_Scanner_RESTART( input_file )
YY_PDDL_Scanner_IFILE  *input_file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_RESTART ( YY_PDDL_Scanner_IFILE  *input_file )
#endif

    {
    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, input_file );
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_PDDL_Scanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_PDDL_Scanner_CURRENT_BUFFER = new_buffer;
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_LOAD_BUFFER_STATE( void )
#else
void YY_PDDL_Scanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_PDDL_Scanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( file, size )
YY_PDDL_Scanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_PDDL_Scanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    YY_PDDL_Scanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_PDDL_Scanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_PDDL_Scanner_CURRENT_BUFFER )
	YY_PDDL_Scanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file )
#else
void YY_PDDL_Scanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_PDDL_Scanner_IFILE  *file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 130 "ppddl.lex"


/*{FLOAT}    { val.rval = A_TO_NN(yytext); return PDDL_Parser::TK_FLOAT; }*/

int yywrap() {
    return 1;
}

void PDDL_Scanner::open_file(char* name, bool trace) {
    yyin = fopen(name, "r");
    if( !yyin ) {
        cerr << "error: can't open " << name << endl;
        exit(255);
    }
    _filename = name;
    if( _reset ) yy_init_buffer(YY_PDDL_Scanner_CURRENT_BUFFER, yyin);
    _reset = true;
    _line_no = 1;
    _trace_line = trace;
    yy_flex_debug = trace;
}

void PDDL_Scanner::close_file() {
    if( _filename != 0 ) {
        fclose(yyin);
        _filename = 0;
    }
}

