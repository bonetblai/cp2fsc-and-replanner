

Terminals which are not used:

   TK_OPEN_SQ
   TK_CLOSE_SQ
   TK_INT
   KW_EXISTS


State 59 contains 2 reduce/reduce conflicts.
State 71 contains 1 shift/reduce conflict.
State 100 contains 1 shift/reduce conflict.
State 107 contains 3 shift/reduce conflicts.
State 125 contains 1 shift/reduce conflict.
State 154 contains 2 shift/reduce conflicts.
State 215 contains 1 shift/reduce conflict.
State 217 contains 1 shift/reduce conflict.
State 241 contains 1 shift/reduce conflict.
State 246 contains 1 shift/reduce conflict.
State 247 contains 1 shift/reduce conflict.
State 282 contains 1 shift/reduce conflict.

Grammar
rule 1    pddl_declarations -> pddl_domain pddl_declarations
rule 2    pddl_declarations -> pddl_problem pddl_declarations
rule 3    pddl_declarations ->		/* empty */
rule 4    pddl_domain -> TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE
rule 5    pddl_domain -> TK_OPEN KW_DEFINE domain_name error TK_CLOSE
rule 6    domain_elements -> domain_requires domain_elements
rule 7    domain_elements -> domain_types domain_elements
rule 8    domain_elements -> domain_constants domain_elements
rule 9    domain_elements -> domain_predicates domain_elements
rule 10   domain_elements -> domain_variables domain_elements
rule 11   domain_elements -> domain_structure domain_elements
rule 12   domain_elements ->		/* empty */
rule 13   domain_name -> TK_OPEN KW_DOMAIN any_symbol TK_CLOSE
rule 14   any_symbol -> TK_NEW_SYMBOL
rule 15   any_symbol -> TK_OBJ_SYMBOL
rule 16   any_symbol -> TK_TYPE_SYMBOL
rule 17   any_symbol -> TK_PRED_SYMBOL
rule 18   any_symbol -> TK_VAR_SYMBOL
rule 19   any_symbol -> TK_ACTION_SYMBOL
rule 20   any_symbol -> TK_AXIOM_SYMBOL
rule 21   any_symbol -> TK_SENSOR_SYMBOL
rule 22   any_symbol -> TK_MISC_SYMBOL
rule 23   variable_symbol -> TK_NEW_SYMBOL
rule 24   variable_symbol -> TK_VARNAME_SYMBOL
rule 25   action_symbol -> TK_NEW_SYMBOL
rule 26   action_symbol -> TK_ACTION_SYMBOL
rule 27   sensor_symbol -> TK_NEW_SYMBOL
rule 28   sensor_symbol -> TK_SENSOR_SYMBOL
rule 29   axiom_symbol -> TK_NEW_SYMBOL
rule 30   axiom_symbol -> TK_AXIOM_SYMBOL
rule 31   domain_requires -> TK_OPEN KW_REQS require_list TK_CLOSE
rule 32   domain_requires -> TK_OPEN KW_REQS error TK_CLOSE
rule 33   require_list -> require_list KW_TRANSLATION
rule 34   require_list -> require_list TK_KEYWORD
rule 35   require_list ->		/* empty */
rule 36   domain_predicates -> TK_OPEN KW_PREDS predicate_list TK_CLOSE
rule 37   domain_predicates -> TK_OPEN KW_PREDS error TK_CLOSE
rule 38   predicate_list -> predicate_list predicate_decl
rule 39   predicate_list -> predicate_decl
rule 40   predicate_decl -> TK_OPEN TK_NEW_SYMBOL typed_param_list TK_CLOSE
rule 41   predicate_decl -> TK_OPEN error TK_CLOSE
rule 42   typed_param_list -> typed_param_list typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL
rule 43   typed_param_list -> typed_param_list typed_param_sym_list
rule 44   typed_param_list ->		/* empty */
rule 45   typed_param_sym_list -> typed_param_sym_list TK_NEW_VAR_SYMBOL
rule 46   typed_param_sym_list ->		/* empty */
rule 47   domain_types -> TK_OPEN KW_TYPES typed_type_list TK_CLOSE
rule 48   typed_type_list -> typed_type_list primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL
rule 49   typed_type_list -> typed_type_list primitive_type_list TK_HYPHEN TK_NEW_SYMBOL
rule 50   typed_type_list -> typed_type_list primitive_type_list
rule 51   typed_type_list ->		/* empty */
rule 52   primitive_type_list -> primitive_type_list TK_TYPE_SYMBOL
rule 53   primitive_type_list -> primitive_type_list TK_NEW_SYMBOL
rule 54   primitive_type_list ->		/* empty */
rule 55   domain_constants -> TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE
rule 56   domain_constants -> TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE
rule 57   typed_constant_list -> typed_constant_list ne_constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL
rule 58   typed_constant_list -> typed_constant_list ne_constant_sym_list
rule 59   typed_constant_list ->		/* empty */
rule 60   ne_constant_sym_list -> ne_constant_sym_list TK_NEW_SYMBOL
rule 61   ne_constant_sym_list -> TK_NEW_SYMBOL
rule 62   domain_variables -> domain_variables variable
rule 63   domain_variables -> variable
rule 64   variable -> state_variable
rule 65   variable -> observable_variable
rule 66   @1 ->		/* empty */
rule 67   state_variable -> TK_OPEN KW_VARIABLE variable_symbol @1 variable_values rest_state_variable TK_CLOSE
rule 68   rest_state_variable -> KW_OBSERVABLE
rule 69   rest_state_variable ->		/* empty */
rule 70   @2 ->		/* empty */
rule 71   observable_variable -> TK_OPEN KW_OBS_VARIABLE variable_symbol @2 variable_values TK_CLOSE
rule 72   variable_values -> variable_values variable_value_decl
rule 73   variable_values -> variable_value_decl
rule 74   variable_value_decl -> positive_atomic_effect
rule 75   variable_value_decl -> forall_effect
rule 76   domain_structure -> action_declaration
rule 77   domain_structure -> axiom_declaration
rule 78   domain_structure -> sensor_declaration
rule 79   domain_structure -> observable_declaration
rule 80   domain_structure -> sticky_declaration
rule 81   @3 ->		/* empty */
rule 82   action_declaration -> TK_OPEN KW_ACTION action_symbol @3 action_elements TK_CLOSE
rule 83   action_declaration -> TK_OPEN KW_ACTION error TK_CLOSE
rule 84   action_elements -> action_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE
rule 85   action_elements -> action_elements KW_PRE condition
rule 86   action_elements -> action_elements KW_EFFECT action_effect
rule 87   action_elements -> action_elements KW_OBSERVE positive_atomic_effect_list
rule 88   action_elements -> action_elements KW_SENSING_MODEL sensing_model
rule 89   action_elements ->		/* empty */
rule 90   condition -> single_condition
rule 91   condition -> TK_OPEN KW_AND condition_list TK_CLOSE
rule 92   condition_list -> condition_list single_condition
rule 93   condition_list -> single_condition
rule 94   single_condition -> literal
rule 95   literal -> positive_literal
rule 96   literal -> negative_literal
rule 97   positive_literal -> TK_OPEN TK_PRED_SYMBOL atom_argument_list TK_CLOSE
rule 98   positive_literal -> TK_OPEN TK_EQ atom_argument_list TK_CLOSE
rule 99   negative_literal -> TK_OPEN KW_NOT positive_literal TK_CLOSE
rule 100  atom_argument_list -> atom_argument_list TK_VAR_SYMBOL
rule 101  atom_argument_list -> atom_argument_list TK_OBJ_SYMBOL
rule 102  atom_argument_list ->		/* empty */
rule 103  action_effect -> single_action_effect
rule 104  action_effect -> TK_OPEN KW_AND action_effect_list TK_CLOSE
rule 105  action_effect_list -> action_effect_list single_action_effect
rule 106  action_effect_list -> single_action_effect
rule 107  single_action_effect -> atomic_effect
rule 108  single_action_effect -> conditional_effect
rule 109  single_action_effect -> forall_effect
rule 110  conditional_effect -> TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE
rule 111  @4 ->		/* empty */
rule 112  @5 ->		/* empty */
rule 113  forall_effect -> TK_OPEN KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE @5 action_effect TK_CLOSE
rule 114  atomic_effect_kw_list -> TK_OPEN KW_AND atomic_effect_list TK_CLOSE
rule 115  atomic_effect_kw_list -> atomic_effect
rule 116  atomic_effect_list -> atomic_effect_list atomic_effect
rule 117  atomic_effect_list -> atomic_effect
rule 118  positive_atomic_effect_list -> positive_atomic_effect_list positive_atomic_effect
rule 119  positive_atomic_effect_list -> positive_atomic_effect
rule 120  atomic_effect -> literal
rule 121  positive_atomic_effect -> positive_literal
rule 122  sensing_model -> action_effect
rule 123  sensing_model ->		/* empty */
rule 124  @6 ->		/* empty */
rule 125  axiom_declaration -> TK_OPEN KW_AXIOM axiom_symbol @6 axiom_elements TK_CLOSE
rule 126  axiom_declaration -> TK_OPEN KW_AXIOM error TK_CLOSE
rule 127  axiom_elements -> axiom_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE
rule 128  axiom_elements -> axiom_elements KW_BODY condition
rule 129  axiom_elements -> axiom_elements KW_HEAD atomic_effect_kw_list
rule 130  axiom_elements ->		/* empty */
rule 131  @7 ->		/* empty */
rule 132  sensor_declaration -> TK_OPEN KW_SENSOR sensor_symbol @7 sensor_elements TK_CLOSE
rule 133  sensor_declaration -> TK_OPEN KW_SENSOR error TK_CLOSE
rule 134  sensor_elements -> sensor_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE
rule 135  sensor_elements -> sensor_elements KW_COND condition
rule 136  sensor_elements -> sensor_elements KW_SENSE positive_atomic_effect_list
rule 137  sensor_elements ->		/* empty */
rule 138  @8 ->		/* empty */
rule 139  observable_declaration -> TK_OPEN KW_OBSERVABLE @8 observable_elements TK_CLOSE
rule 140  observable_declaration -> TK_OPEN KW_OBSERVABLE error TK_CLOSE
rule 141  observable_elements -> observable_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE
rule 142  observable_elements -> observable_elements KW_FLUENTS positive_atomic_effect_list
rule 143  observable_elements ->		/* empty */
rule 144  @9 ->		/* empty */
rule 145  sticky_declaration -> TK_OPEN KW_STICKY @9 sticky_elements TK_CLOSE
rule 146  sticky_declaration -> TK_OPEN KW_STICKY error TK_CLOSE
rule 147  sticky_elements -> sticky_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE
rule 148  sticky_elements -> sticky_elements KW_FLUENTS positive_atomic_effect_list
rule 149  sticky_elements ->		/* empty */
rule 150  @10 ->		/* empty */
rule 151  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @10 problem_elements TK_CLOSE
rule 152  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE
rule 153  problem_elements -> problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE
rule 154  problem_elements -> problem_elements domain_requires
rule 155  problem_elements -> problem_elements domain_constants
rule 156  problem_elements -> problem_elements initial_state
rule 157  problem_elements -> problem_elements hidden_state
rule 158  problem_elements -> problem_elements goal_spec
rule 159  problem_elements ->		/* empty */
rule 160  initial_state -> TK_OPEN KW_INIT TK_CLOSE
rule 161  initial_state -> TK_OPEN KW_INIT init_elements TK_CLOSE
rule 162  initial_state -> TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE
rule 163  init_elements -> init_elements single_init_element
rule 164  init_elements -> single_init_element
rule 165  single_init_element -> literal
rule 166  single_init_element -> invariant
rule 167  single_init_element -> clause
rule 168  single_init_element -> oneof
rule 169  at_least_one_invariant -> TK_OPEN KW_INVARIANT condition_list TK_CLOSE
rule 170  at_least_one_invariant -> TK_OPEN KW_AT_LEAST_ONE condition_list TK_CLOSE
rule 171  at_most_one_invariant -> TK_OPEN KW_AT_MOST_ONE condition_list TK_CLOSE
rule 172  exactly_one_invariant -> TK_OPEN KW_EXACTLY_ONE condition_list TK_CLOSE
rule 173  invariant -> at_least_one_invariant
rule 174  invariant -> at_most_one_invariant
rule 175  invariant -> exactly_one_invariant
rule 176  clause -> TK_OPEN KW_OR condition_list TK_CLOSE
rule 177  oneof -> TK_OPEN KW_ONEOF condition_list TK_CLOSE
rule 178  hidden_state -> TK_OPEN KW_HIDDEN init_elements TK_CLOSE
rule 179  goal_spec -> TK_OPEN KW_GOAL single_goal TK_CLOSE
rule 180  goal_spec -> TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE
rule 181  goal_list -> goal_list single_goal
rule 182  goal_list -> single_goal
rule 183  single_goal -> positive_literal
rule 184  single_goal -> negative_literal

Terminals, with rules where they appear

$ (-1)
error (256) 5 32 37 41 83 126 133 140 146 152
TK_OPEN (258) 4 5 13 31 32 36 37 40 41 47 55 56 67 71 82 83 84 91 97
    98 99 104 110 113 114 125 126 127 132 133 134 139 140 141 145 146
    147 151 152 153 160 161 162 169 170 171 172 176 177 178 179 180
TK_CLOSE (259) 4 5 13 31 32 36 37 40 41 47 55 56 67 71 82 83 84 91
    97 98 99 104 110 113 114 125 126 127 132 133 134 139 140 141 145
    146 147 151 152 153 160 161 162 169 170 171 172 176 177 178 179
    180
TK_OPEN_SQ (260)
TK_CLOSE_SQ (261)
TK_EQ (262) 98
TK_HYPHEN (263) 42 48 49 57
TK_NEW_SYMBOL (264) 14 23 25 27 29 40 49 53 60 61
TK_OBJ_SYMBOL (265) 15 101
TK_TYPE_SYMBOL (266) 16 42 48 52 57
TK_PRED_SYMBOL (267) 17 97
TK_VAR_SYMBOL (268) 18 100
TK_ACTION_SYMBOL (269) 19 26
TK_AXIOM_SYMBOL (270) 20 30
TK_SENSOR_SYMBOL (271) 21 28
TK_MISC_SYMBOL (272) 22
TK_KEYWORD (273) 34
TK_NEW_VAR_SYMBOL (274) 45
TK_VARNAME_SYMBOL (275) 24
TK_INT (276)
KW_REQS (277) 31 32
KW_TRANSLATION (278) 33
KW_CONSTANTS (279) 55
KW_PREDS (280) 36 37
KW_TYPES (281) 47
KW_DEFINE (282) 4 5 151 152
KW_DOMAIN (283) 13
KW_ACTION (284) 82 83
KW_ARGS (285) 84 127 134 141 147
KW_PRE (286) 85
KW_EFFECT (287) 86
KW_AND (288) 91 104 114 162 180
KW_OR (289) 176
KW_EXISTS (290)
KW_FORALL (291) 113
KW_NOT (292) 99
KW_WHEN (293) 110
KW_ONEOF (294) 177
KW_PROBLEM (295) 151 152
KW_FORDOMAIN (296) 153
KW_OBJECTS (297) 56
KW_INIT (298) 160 161 162
KW_GOAL (299) 179 180
KW_SENSOR (300) 132 133
KW_SENSE (301) 136
KW_OBSERVE (302) 87
KW_AXIOM (303) 125 126
KW_COND (304) 135
KW_OBSERVABLE (305) 68 139 140
KW_BODY (306) 128
KW_HEAD (307) 129
KW_STICKY (308) 145 146
KW_FLUENTS (309) 142 148
KW_HIDDEN (310) 178
KW_INVARIANT (311) 169
KW_AT_LEAST_ONE (312) 170
KW_AT_MOST_ONE (313) 171
KW_EXACTLY_ONE (314) 172
KW_VARIABLE (315) 67
KW_OBS_VARIABLE (316) 71
KW_SENSING_MODEL (317) 88

Nonterminals, with rules where they appear

pddl_declarations (63)
    on left: 1 2 3, on right: 1 2
pddl_domain (64)
    on left: 4 5, on right: 1
domain_elements (65)
    on left: 6 7 8 9 10 11 12, on right: 4 6 7 8 9 10 11
domain_name (66)
    on left: 13, on right: 4 5
any_symbol (67)
    on left: 14 15 16 17 18 19 20 21 22, on right: 13 151 153
variable_symbol (68)
    on left: 23 24, on right: 67 71
action_symbol (69)
    on left: 25 26, on right: 82
sensor_symbol (70)
    on left: 27 28, on right: 132
axiom_symbol (71)
    on left: 29 30, on right: 125
domain_requires (72)
    on left: 31 32, on right: 6 154
require_list (73)
    on left: 33 34 35, on right: 31 33 34
domain_predicates (74)
    on left: 36 37, on right: 9
predicate_list (75)
    on left: 38 39, on right: 36 38
predicate_decl (76)
    on left: 40 41, on right: 38 39
typed_param_list (77)
    on left: 42 43 44, on right: 40 42 43 84 113 127 134 141 147
typed_param_sym_list (78)
    on left: 45 46, on right: 42 43 45
domain_types (79)
    on left: 47, on right: 7
typed_type_list (80)
    on left: 48 49 50 51, on right: 47 48 49 50
primitive_type_list (81)
    on left: 52 53 54, on right: 48 49 50 52 53
domain_constants (82)
    on left: 55 56, on right: 8 155
typed_constant_list (83)
    on left: 57 58 59, on right: 55 56 57 58
ne_constant_sym_list (84)
    on left: 60 61, on right: 57 58 60
domain_variables (85)
    on left: 62 63, on right: 10 62
variable (86)
    on left: 64 65, on right: 62 63
state_variable (87)
    on left: 67, on right: 64
@1 (88)
    on left: 66, on right: 67
rest_state_variable (89)
    on left: 68 69, on right: 67
observable_variable (90)
    on left: 71, on right: 65
@2 (91)
    on left: 70, on right: 71
variable_values (92)
    on left: 72 73, on right: 67 71 72
variable_value_decl (93)
    on left: 74 75, on right: 72 73
domain_structure (94)
    on left: 76 77 78 79 80, on right: 11
action_declaration (95)
    on left: 82 83, on right: 76
@3 (96)
    on left: 81, on right: 82
action_elements (97)
    on left: 84 85 86 87 88 89, on right: 82 84 85 86 87 88
condition (98)
    on left: 90 91, on right: 85 110 128 135
condition_list (99)
    on left: 92 93, on right: 91 92 169 170 171 172 176 177
single_condition (100)
    on left: 94, on right: 90 92 93
literal (101)
    on left: 95 96, on right: 94 120 165
positive_literal (102)
    on left: 97 98, on right: 95 99 121 183
negative_literal (103)
    on left: 99, on right: 96 184
atom_argument_list (104)
    on left: 100 101 102, on right: 97 98 100 101
action_effect (105)
    on left: 103 104, on right: 86 113 122
action_effect_list (106)
    on left: 105 106, on right: 104 105
single_action_effect (107)
    on left: 107 108 109, on right: 103 105 106
conditional_effect (108)
    on left: 110, on right: 108
forall_effect (109)
    on left: 113, on right: 75 109
@4 (110)
    on left: 111, on right: 113
@5 (111)
    on left: 112, on right: 113
atomic_effect_kw_list (112)
    on left: 114 115, on right: 110 129
atomic_effect_list (113)
    on left: 116 117, on right: 114 116
positive_atomic_effect_list (114)
    on left: 118 119, on right: 87 118 136 142 148
atomic_effect (115)
    on left: 120, on right: 107 115 116 117
positive_atomic_effect (116)
    on left: 121, on right: 74 118 119
sensing_model (117)
    on left: 122 123, on right: 88
axiom_declaration (118)
    on left: 125 126, on right: 77
@6 (119)
    on left: 124, on right: 125
axiom_elements (120)
    on left: 127 128 129 130, on right: 125 127 128 129
sensor_declaration (121)
    on left: 132 133, on right: 78
@7 (122)
    on left: 131, on right: 132
sensor_elements (123)
    on left: 134 135 136 137, on right: 132 134 135 136
observable_declaration (124)
    on left: 139 140, on right: 79
@8 (125)
    on left: 138, on right: 139
observable_elements (126)
    on left: 141 142 143, on right: 139 141 142
sticky_declaration (127)
    on left: 145 146, on right: 80
@9 (128)
    on left: 144, on right: 145
sticky_elements (129)
    on left: 147 148 149, on right: 145 147 148
pddl_problem (130)
    on left: 151 152, on right: 2
@10 (131)
    on left: 150, on right: 151
problem_elements (132)
    on left: 153 154 155 156 157 158 159, on right: 151 153 154 155
    156 157 158
initial_state (133)
    on left: 160 161 162, on right: 156
init_elements (134)
    on left: 163 164, on right: 161 162 163 178
single_init_element (135)
    on left: 165 166 167 168, on right: 163 164
at_least_one_invariant (136)
    on left: 169 170, on right: 173
at_most_one_invariant (137)
    on left: 171, on right: 174
exactly_one_invariant (138)
    on left: 172, on right: 175
invariant (139)
    on left: 173 174 175, on right: 166
clause (140)
    on left: 176, on right: 167
oneof (141)
    on left: 177, on right: 168
hidden_state (142)
    on left: 178, on right: 157
goal_spec (143)
    on left: 179 180, on right: 158
goal_list (144)
    on left: 181 182, on right: 180 181
single_goal (145)
    on left: 183 184, on right: 179 181 182


state 0

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_declarations)

    pddl_declarations	go to state 316
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 1

    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @10 problem_elements TK_CLOSE   (rule 151)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 152)

    KW_DEFINE	shift, and go to state 4



state 2

    pddl_declarations  ->  pddl_domain . pddl_declarations   (rule 1)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_declarations)

    pddl_declarations	go to state 5
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 3

    pddl_declarations  ->  pddl_problem . pddl_declarations   (rule 2)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_declarations)

    pddl_declarations	go to state 6
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 4

    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @10 problem_elements TK_CLOSE   (rule 151)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 152)

    TK_OPEN	shift, and go to state 7

    domain_name	go to state 8



state 5

    pddl_declarations  ->  pddl_domain pddl_declarations .   (rule 1)

    $default	reduce using rule 1 (pddl_declarations)



state 6

    pddl_declarations  ->  pddl_problem pddl_declarations .   (rule 2)

    $default	reduce using rule 2 (pddl_declarations)



state 7

    domain_name  ->  TK_OPEN . KW_DOMAIN any_symbol TK_CLOSE   (rule 13)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM any_symbol TK_CLOSE @10 problem_elements TK_CLOSE   (rule 151)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM error TK_CLOSE   (rule 152)

    KW_DOMAIN	shift, and go to state 9
    KW_PROBLEM	shift, and go to state 10



state 8

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . error TK_CLOSE   (rule 5)

    error	shift, and go to state 11
    TK_OPEN	shift, and go to state 12

    TK_CLOSE	reduce using rule 12 (domain_elements)
    KW_FORALL	reduce using rule 12 (domain_elements)

    domain_elements	go to state 13
    domain_requires	go to state 14
    domain_predicates	go to state 15
    domain_types	go to state 16
    domain_constants	go to state 17
    domain_variables	go to state 18
    variable	go to state 19
    state_variable	go to state 20
    observable_variable	go to state 21
    domain_structure	go to state 22
    action_declaration	go to state 23
    axiom_declaration	go to state 24
    sensor_declaration	go to state 25
    observable_declaration	go to state 26
    sticky_declaration	go to state 27



state 9

    domain_name  ->  TK_OPEN KW_DOMAIN . any_symbol TK_CLOSE   (rule 13)

    TK_NEW_SYMBOL	shift, and go to state 28
    TK_OBJ_SYMBOL	shift, and go to state 29
    TK_TYPE_SYMBOL	shift, and go to state 30
    TK_PRED_SYMBOL	shift, and go to state 31
    TK_VAR_SYMBOL	shift, and go to state 32
    TK_ACTION_SYMBOL	shift, and go to state 33
    TK_AXIOM_SYMBOL	shift, and go to state 34
    TK_SENSOR_SYMBOL	shift, and go to state 35
    TK_MISC_SYMBOL	shift, and go to state 36

    any_symbol	go to state 37



state 10

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . any_symbol TK_CLOSE @10 problem_elements TK_CLOSE   (rule 151)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . error TK_CLOSE   (rule 152)

    error	shift, and go to state 38
    TK_NEW_SYMBOL	shift, and go to state 28
    TK_OBJ_SYMBOL	shift, and go to state 29
    TK_TYPE_SYMBOL	shift, and go to state 30
    TK_PRED_SYMBOL	shift, and go to state 31
    TK_VAR_SYMBOL	shift, and go to state 32
    TK_ACTION_SYMBOL	shift, and go to state 33
    TK_AXIOM_SYMBOL	shift, and go to state 34
    TK_SENSOR_SYMBOL	shift, and go to state 35
    TK_MISC_SYMBOL	shift, and go to state 36

    any_symbol	go to state 39



state 11

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error . TK_CLOSE   (rule 5)

    TK_CLOSE	shift, and go to state 40



state 12

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 31)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 32)
    domain_predicates  ->  TK_OPEN . KW_PREDS predicate_list TK_CLOSE   (rule 36)
    domain_predicates  ->  TK_OPEN . KW_PREDS error TK_CLOSE   (rule 37)
    domain_types  ->  TK_OPEN . KW_TYPES typed_type_list TK_CLOSE   (rule 47)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 55)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 56)
    state_variable  ->  TK_OPEN . KW_VARIABLE variable_symbol @1 variable_values rest_state_variable TK_CLOSE   (rule 67)
    observable_variable  ->  TK_OPEN . KW_OBS_VARIABLE variable_symbol @2 variable_values TK_CLOSE   (rule 71)
    action_declaration  ->  TK_OPEN . KW_ACTION action_symbol @3 action_elements TK_CLOSE   (rule 82)
    action_declaration  ->  TK_OPEN . KW_ACTION error TK_CLOSE   (rule 83)
    axiom_declaration  ->  TK_OPEN . KW_AXIOM axiom_symbol @6 axiom_elements TK_CLOSE   (rule 125)
    axiom_declaration  ->  TK_OPEN . KW_AXIOM error TK_CLOSE   (rule 126)
    sensor_declaration  ->  TK_OPEN . KW_SENSOR sensor_symbol @7 sensor_elements TK_CLOSE   (rule 132)
    sensor_declaration  ->  TK_OPEN . KW_SENSOR error TK_CLOSE   (rule 133)
    observable_declaration  ->  TK_OPEN . KW_OBSERVABLE @8 observable_elements TK_CLOSE   (rule 139)
    observable_declaration  ->  TK_OPEN . KW_OBSERVABLE error TK_CLOSE   (rule 140)
    sticky_declaration  ->  TK_OPEN . KW_STICKY @9 sticky_elements TK_CLOSE   (rule 145)
    sticky_declaration  ->  TK_OPEN . KW_STICKY error TK_CLOSE   (rule 146)

    KW_REQS	shift, and go to state 41
    KW_CONSTANTS	shift, and go to state 42
    KW_PREDS	shift, and go to state 43
    KW_TYPES	shift, and go to state 44
    KW_ACTION	shift, and go to state 45
    KW_OBJECTS	shift, and go to state 46
    KW_SENSOR	shift, and go to state 47
    KW_AXIOM	shift, and go to state 48
    KW_OBSERVABLE	shift, and go to state 49
    KW_STICKY	shift, and go to state 50
    KW_VARIABLE	shift, and go to state 51
    KW_OBS_VARIABLE	shift, and go to state 52



state 13

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements . TK_CLOSE   (rule 4)

    TK_CLOSE	shift, and go to state 53



state 14

    domain_elements  ->  domain_requires . domain_elements   (rule 6)

    TK_OPEN	shift, and go to state 12

    $default	reduce using rule 12 (domain_elements)

    domain_elements	go to state 54
    domain_requires	go to state 14
    domain_predicates	go to state 15
    domain_types	go to state 16
    domain_constants	go to state 17
    domain_variables	go to state 18
    variable	go to state 19
    state_variable	go to state 20
    observable_variable	go to state 21
    domain_structure	go to state 22
    action_declaration	go to state 23
    axiom_declaration	go to state 24
    sensor_declaration	go to state 25
    observable_declaration	go to state 26
    sticky_declaration	go to state 27



state 15

    domain_elements  ->  domain_predicates . domain_elements   (rule 9)

    TK_OPEN	shift, and go to state 12

    $default	reduce using rule 12 (domain_elements)

    domain_elements	go to state 55
    domain_requires	go to state 14
    domain_predicates	go to state 15
    domain_types	go to state 16
    domain_constants	go to state 17
    domain_variables	go to state 18
    variable	go to state 19
    state_variable	go to state 20
    observable_variable	go to state 21
    domain_structure	go to state 22
    action_declaration	go to state 23
    axiom_declaration	go to state 24
    sensor_declaration	go to state 25
    observable_declaration	go to state 26
    sticky_declaration	go to state 27



state 16

    domain_elements  ->  domain_types . domain_elements   (rule 7)

    TK_OPEN	shift, and go to state 12

    $default	reduce using rule 12 (domain_elements)

    domain_elements	go to state 56
    domain_requires	go to state 14
    domain_predicates	go to state 15
    domain_types	go to state 16
    domain_constants	go to state 17
    domain_variables	go to state 18
    variable	go to state 19
    state_variable	go to state 20
    observable_variable	go to state 21
    domain_structure	go to state 22
    action_declaration	go to state 23
    axiom_declaration	go to state 24
    sensor_declaration	go to state 25
    observable_declaration	go to state 26
    sticky_declaration	go to state 27



state 17

    domain_elements  ->  domain_constants . domain_elements   (rule 8)

    TK_OPEN	shift, and go to state 12

    $default	reduce using rule 12 (domain_elements)

    domain_elements	go to state 57
    domain_requires	go to state 14
    domain_predicates	go to state 15
    domain_types	go to state 16
    domain_constants	go to state 17
    domain_variables	go to state 18
    variable	go to state 19
    state_variable	go to state 20
    observable_variable	go to state 21
    domain_structure	go to state 22
    action_declaration	go to state 23
    axiom_declaration	go to state 24
    sensor_declaration	go to state 25
    observable_declaration	go to state 26
    sticky_declaration	go to state 27



state 18

    domain_elements  ->  domain_variables . domain_elements   (rule 10)
    domain_variables  ->  domain_variables . variable   (rule 62)

    TK_OPEN	shift, and go to state 12

    $default	reduce using rule 12 (domain_elements)

    domain_elements	go to state 58
    domain_requires	go to state 14
    domain_predicates	go to state 15
    domain_types	go to state 16
    domain_constants	go to state 17
    domain_variables	go to state 18
    variable	go to state 59
    state_variable	go to state 20
    observable_variable	go to state 21
    domain_structure	go to state 22
    action_declaration	go to state 23
    axiom_declaration	go to state 24
    sensor_declaration	go to state 25
    observable_declaration	go to state 26
    sticky_declaration	go to state 27



state 19

    domain_variables  ->  variable .   (rule 63)

    $default	reduce using rule 63 (domain_variables)



state 20

    variable  ->  state_variable .   (rule 64)

    $default	reduce using rule 64 (variable)



state 21

    variable  ->  observable_variable .   (rule 65)

    $default	reduce using rule 65 (variable)



state 22

    domain_elements  ->  domain_structure . domain_elements   (rule 11)

    TK_OPEN	shift, and go to state 12

    $default	reduce using rule 12 (domain_elements)

    domain_elements	go to state 60
    domain_requires	go to state 14
    domain_predicates	go to state 15
    domain_types	go to state 16
    domain_constants	go to state 17
    domain_variables	go to state 18
    variable	go to state 19
    state_variable	go to state 20
    observable_variable	go to state 21
    domain_structure	go to state 22
    action_declaration	go to state 23
    axiom_declaration	go to state 24
    sensor_declaration	go to state 25
    observable_declaration	go to state 26
    sticky_declaration	go to state 27



state 23

    domain_structure  ->  action_declaration .   (rule 76)

    $default	reduce using rule 76 (domain_structure)



state 24

    domain_structure  ->  axiom_declaration .   (rule 77)

    $default	reduce using rule 77 (domain_structure)



state 25

    domain_structure  ->  sensor_declaration .   (rule 78)

    $default	reduce using rule 78 (domain_structure)



state 26

    domain_structure  ->  observable_declaration .   (rule 79)

    $default	reduce using rule 79 (domain_structure)



state 27

    domain_structure  ->  sticky_declaration .   (rule 80)

    $default	reduce using rule 80 (domain_structure)



state 28

    any_symbol  ->  TK_NEW_SYMBOL .   (rule 14)

    $default	reduce using rule 14 (any_symbol)



state 29

    any_symbol  ->  TK_OBJ_SYMBOL .   (rule 15)

    $default	reduce using rule 15 (any_symbol)



state 30

    any_symbol  ->  TK_TYPE_SYMBOL .   (rule 16)

    $default	reduce using rule 16 (any_symbol)



state 31

    any_symbol  ->  TK_PRED_SYMBOL .   (rule 17)

    $default	reduce using rule 17 (any_symbol)



state 32

    any_symbol  ->  TK_VAR_SYMBOL .   (rule 18)

    $default	reduce using rule 18 (any_symbol)



state 33

    any_symbol  ->  TK_ACTION_SYMBOL .   (rule 19)

    $default	reduce using rule 19 (any_symbol)



state 34

    any_symbol  ->  TK_AXIOM_SYMBOL .   (rule 20)

    $default	reduce using rule 20 (any_symbol)



state 35

    any_symbol  ->  TK_SENSOR_SYMBOL .   (rule 21)

    $default	reduce using rule 21 (any_symbol)



state 36

    any_symbol  ->  TK_MISC_SYMBOL .   (rule 22)

    $default	reduce using rule 22 (any_symbol)



state 37

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol . TK_CLOSE   (rule 13)

    TK_CLOSE	shift, and go to state 61



state 38

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error . TK_CLOSE   (rule 152)

    TK_CLOSE	shift, and go to state 62



state 39

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol . TK_CLOSE @10 problem_elements TK_CLOSE   (rule 151)

    TK_CLOSE	shift, and go to state 63



state 40

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error TK_CLOSE .   (rule 5)

    $default	reduce using rule 5 (pddl_domain)



state 41

    domain_requires  ->  TK_OPEN KW_REQS . require_list TK_CLOSE   (rule 31)
    domain_requires  ->  TK_OPEN KW_REQS . error TK_CLOSE   (rule 32)

    error	shift, and go to state 64

    TK_CLOSE	reduce using rule 35 (require_list)
    TK_KEYWORD	reduce using rule 35 (require_list)
    KW_TRANSLATION	reduce using rule 35 (require_list)
    KW_FORALL	reduce using rule 35 (require_list)
    KW_OBSERVABLE	reduce using rule 35 (require_list)
    KW_HIDDEN	reduce using rule 35 (require_list)

    require_list	go to state 65



state 42

    domain_constants  ->  TK_OPEN KW_CONSTANTS . typed_constant_list TK_CLOSE   (rule 55)

    $default	reduce using rule 59 (typed_constant_list)

    typed_constant_list	go to state 66



state 43

    domain_predicates  ->  TK_OPEN KW_PREDS . predicate_list TK_CLOSE   (rule 36)
    domain_predicates  ->  TK_OPEN KW_PREDS . error TK_CLOSE   (rule 37)

    error	shift, and go to state 67
    TK_OPEN	shift, and go to state 68

    predicate_list	go to state 69
    predicate_decl	go to state 70



state 44

    domain_types  ->  TK_OPEN KW_TYPES . typed_type_list TK_CLOSE   (rule 47)

    $default	reduce using rule 51 (typed_type_list)

    typed_type_list	go to state 71



state 45

    action_declaration  ->  TK_OPEN KW_ACTION . action_symbol @3 action_elements TK_CLOSE   (rule 82)
    action_declaration  ->  TK_OPEN KW_ACTION . error TK_CLOSE   (rule 83)

    error	shift, and go to state 72
    TK_NEW_SYMBOL	shift, and go to state 73
    TK_ACTION_SYMBOL	shift, and go to state 74

    action_symbol	go to state 75



state 46

    domain_constants  ->  TK_OPEN KW_OBJECTS . typed_constant_list TK_CLOSE   (rule 56)

    $default	reduce using rule 59 (typed_constant_list)

    typed_constant_list	go to state 76



state 47

    sensor_declaration  ->  TK_OPEN KW_SENSOR . sensor_symbol @7 sensor_elements TK_CLOSE   (rule 132)
    sensor_declaration  ->  TK_OPEN KW_SENSOR . error TK_CLOSE   (rule 133)

    error	shift, and go to state 77
    TK_NEW_SYMBOL	shift, and go to state 78
    TK_SENSOR_SYMBOL	shift, and go to state 79

    sensor_symbol	go to state 80



state 48

    axiom_declaration  ->  TK_OPEN KW_AXIOM . axiom_symbol @6 axiom_elements TK_CLOSE   (rule 125)
    axiom_declaration  ->  TK_OPEN KW_AXIOM . error TK_CLOSE   (rule 126)

    error	shift, and go to state 81
    TK_NEW_SYMBOL	shift, and go to state 82
    TK_AXIOM_SYMBOL	shift, and go to state 83

    axiom_symbol	go to state 84



state 49

    observable_declaration  ->  TK_OPEN KW_OBSERVABLE . @8 observable_elements TK_CLOSE   (rule 139)
    observable_declaration  ->  TK_OPEN KW_OBSERVABLE . error TK_CLOSE   (rule 140)

    error	shift, and go to state 85

    TK_CLOSE	reduce using rule 138 (@8)
    KW_ARGS	reduce using rule 138 (@8)
    KW_FORALL	reduce using rule 138 (@8)
    KW_SENSING_MODEL	reduce using rule 138 (@8)

    @8  	go to state 86



state 50

    sticky_declaration  ->  TK_OPEN KW_STICKY . @9 sticky_elements TK_CLOSE   (rule 145)
    sticky_declaration  ->  TK_OPEN KW_STICKY . error TK_CLOSE   (rule 146)

    error	shift, and go to state 87

    TK_CLOSE	reduce using rule 144 (@9)
    KW_ARGS	reduce using rule 144 (@9)
    KW_FORALL	reduce using rule 144 (@9)
    KW_SENSING_MODEL	reduce using rule 144 (@9)

    @9  	go to state 88



state 51

    state_variable  ->  TK_OPEN KW_VARIABLE . variable_symbol @1 variable_values rest_state_variable TK_CLOSE   (rule 67)

    TK_NEW_SYMBOL	shift, and go to state 89
    TK_VARNAME_SYMBOL	shift, and go to state 90

    variable_symbol	go to state 91



state 52

    observable_variable  ->  TK_OPEN KW_OBS_VARIABLE . variable_symbol @2 variable_values TK_CLOSE   (rule 71)

    TK_NEW_SYMBOL	shift, and go to state 89
    TK_VARNAME_SYMBOL	shift, and go to state 90

    variable_symbol	go to state 92



state 53

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE .   (rule 4)

    $default	reduce using rule 4 (pddl_domain)



state 54

    domain_elements  ->  domain_requires domain_elements .   (rule 6)

    $default	reduce using rule 6 (domain_elements)



state 55

    domain_elements  ->  domain_predicates domain_elements .   (rule 9)

    $default	reduce using rule 9 (domain_elements)



state 56

    domain_elements  ->  domain_types domain_elements .   (rule 7)

    $default	reduce using rule 7 (domain_elements)



state 57

    domain_elements  ->  domain_constants domain_elements .   (rule 8)

    $default	reduce using rule 8 (domain_elements)



state 58

    domain_elements  ->  domain_variables domain_elements .   (rule 10)

    $default	reduce using rule 10 (domain_elements)



state 59

    domain_variables  ->  domain_variables variable .   (rule 62)
    domain_variables  ->  variable .   (rule 63)

    TK_OPEN	reduce using rule 62 (domain_variables)
    TK_OPEN	[reduce using rule 63 (domain_variables)]
    TK_CLOSE	reduce using rule 62 (domain_variables)
    TK_CLOSE	[reduce using rule 63 (domain_variables)]
    KW_EXISTS	reduce using rule 62 (domain_variables)
    KW_EXISTS	[reduce using rule 63 (domain_variables)]
    KW_FORALL	reduce using rule 62 (domain_variables)
    KW_FORALL	[reduce using rule 63 (domain_variables)]
    $default	reduce using rule 62 (domain_variables)



state 60

    domain_elements  ->  domain_structure domain_elements .   (rule 11)

    $default	reduce using rule 11 (domain_elements)



state 61

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol TK_CLOSE .   (rule 13)

    $default	reduce using rule 13 (domain_name)



state 62

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE .   (rule 152)

    $default	reduce using rule 152 (pddl_problem)



state 63

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE . @10 problem_elements TK_CLOSE   (rule 151)

    $default	reduce using rule 150 (@10)

    @10 	go to state 93



state 64

    domain_requires  ->  TK_OPEN KW_REQS error . TK_CLOSE   (rule 32)

    TK_CLOSE	shift, and go to state 94



state 65

    domain_requires  ->  TK_OPEN KW_REQS require_list . TK_CLOSE   (rule 31)
    require_list  ->  require_list . KW_TRANSLATION   (rule 33)
    require_list  ->  require_list . TK_KEYWORD   (rule 34)

    TK_CLOSE	shift, and go to state 95
    TK_KEYWORD	shift, and go to state 96
    KW_TRANSLATION	shift, and go to state 97



state 66

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list . TK_CLOSE   (rule 55)
    typed_constant_list  ->  typed_constant_list . ne_constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 57)
    typed_constant_list  ->  typed_constant_list . ne_constant_sym_list   (rule 58)

    TK_CLOSE	shift, and go to state 98
    TK_NEW_SYMBOL	shift, and go to state 99

    ne_constant_sym_list	go to state 100



state 67

    domain_predicates  ->  TK_OPEN KW_PREDS error . TK_CLOSE   (rule 37)

    TK_CLOSE	shift, and go to state 101



state 68

    predicate_decl  ->  TK_OPEN . TK_NEW_SYMBOL typed_param_list TK_CLOSE   (rule 40)
    predicate_decl  ->  TK_OPEN . error TK_CLOSE   (rule 41)

    error	shift, and go to state 102
    TK_NEW_SYMBOL	shift, and go to state 103



state 69

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list . TK_CLOSE   (rule 36)
    predicate_list  ->  predicate_list . predicate_decl   (rule 38)

    TK_OPEN	shift, and go to state 68
    TK_CLOSE	shift, and go to state 104

    predicate_decl	go to state 105



state 70

    predicate_list  ->  predicate_decl .   (rule 39)

    $default	reduce using rule 39 (predicate_list)



state 71

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list . TK_CLOSE   (rule 47)
    typed_type_list  ->  typed_type_list . primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 48)
    typed_type_list  ->  typed_type_list . primitive_type_list TK_HYPHEN TK_NEW_SYMBOL   (rule 49)
    typed_type_list  ->  typed_type_list . primitive_type_list   (rule 50)

    TK_CLOSE	shift, and go to state 106

    TK_CLOSE	[reduce using rule 54 (primitive_type_list)]
    $default	reduce using rule 54 (primitive_type_list)

    primitive_type_list	go to state 107



state 72

    action_declaration  ->  TK_OPEN KW_ACTION error . TK_CLOSE   (rule 83)

    TK_CLOSE	shift, and go to state 108



state 73

    action_symbol  ->  TK_NEW_SYMBOL .   (rule 25)

    $default	reduce using rule 25 (action_symbol)



state 74

    action_symbol  ->  TK_ACTION_SYMBOL .   (rule 26)

    $default	reduce using rule 26 (action_symbol)



state 75

    action_declaration  ->  TK_OPEN KW_ACTION action_symbol . @3 action_elements TK_CLOSE   (rule 82)

    $default	reduce using rule 81 (@3)

    @3  	go to state 109



state 76

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list . TK_CLOSE   (rule 56)
    typed_constant_list  ->  typed_constant_list . ne_constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 57)
    typed_constant_list  ->  typed_constant_list . ne_constant_sym_list   (rule 58)

    TK_CLOSE	shift, and go to state 110
    TK_NEW_SYMBOL	shift, and go to state 99

    ne_constant_sym_list	go to state 100



state 77

    sensor_declaration  ->  TK_OPEN KW_SENSOR error . TK_CLOSE   (rule 133)

    TK_CLOSE	shift, and go to state 111



state 78

    sensor_symbol  ->  TK_NEW_SYMBOL .   (rule 27)

    $default	reduce using rule 27 (sensor_symbol)



state 79

    sensor_symbol  ->  TK_SENSOR_SYMBOL .   (rule 28)

    $default	reduce using rule 28 (sensor_symbol)



state 80

    sensor_declaration  ->  TK_OPEN KW_SENSOR sensor_symbol . @7 sensor_elements TK_CLOSE   (rule 132)

    $default	reduce using rule 131 (@7)

    @7  	go to state 112



state 81

    axiom_declaration  ->  TK_OPEN KW_AXIOM error . TK_CLOSE   (rule 126)

    TK_CLOSE	shift, and go to state 113



state 82

    axiom_symbol  ->  TK_NEW_SYMBOL .   (rule 29)

    $default	reduce using rule 29 (axiom_symbol)



state 83

    axiom_symbol  ->  TK_AXIOM_SYMBOL .   (rule 30)

    $default	reduce using rule 30 (axiom_symbol)



state 84

    axiom_declaration  ->  TK_OPEN KW_AXIOM axiom_symbol . @6 axiom_elements TK_CLOSE   (rule 125)

    $default	reduce using rule 124 (@6)

    @6  	go to state 114



state 85

    observable_declaration  ->  TK_OPEN KW_OBSERVABLE error . TK_CLOSE   (rule 140)

    TK_CLOSE	shift, and go to state 115



state 86

    observable_declaration  ->  TK_OPEN KW_OBSERVABLE @8 . observable_elements TK_CLOSE   (rule 139)

    $default	reduce using rule 143 (observable_elements)

    observable_elements	go to state 116



state 87

    sticky_declaration  ->  TK_OPEN KW_STICKY error . TK_CLOSE   (rule 146)

    TK_CLOSE	shift, and go to state 117



state 88

    sticky_declaration  ->  TK_OPEN KW_STICKY @9 . sticky_elements TK_CLOSE   (rule 145)

    $default	reduce using rule 149 (sticky_elements)

    sticky_elements	go to state 118



state 89

    variable_symbol  ->  TK_NEW_SYMBOL .   (rule 23)

    $default	reduce using rule 23 (variable_symbol)



state 90

    variable_symbol  ->  TK_VARNAME_SYMBOL .   (rule 24)

    $default	reduce using rule 24 (variable_symbol)



state 91

    state_variable  ->  TK_OPEN KW_VARIABLE variable_symbol . @1 variable_values rest_state_variable TK_CLOSE   (rule 67)

    $default	reduce using rule 66 (@1)

    @1  	go to state 119



state 92

    observable_variable  ->  TK_OPEN KW_OBS_VARIABLE variable_symbol . @2 variable_values TK_CLOSE   (rule 71)

    $default	reduce using rule 70 (@2)

    @2  	go to state 120



state 93

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @10 . problem_elements TK_CLOSE   (rule 151)

    $default	reduce using rule 159 (problem_elements)

    problem_elements	go to state 121



state 94

    domain_requires  ->  TK_OPEN KW_REQS error TK_CLOSE .   (rule 32)

    $default	reduce using rule 32 (domain_requires)



state 95

    domain_requires  ->  TK_OPEN KW_REQS require_list TK_CLOSE .   (rule 31)

    $default	reduce using rule 31 (domain_requires)



state 96

    require_list  ->  require_list TK_KEYWORD .   (rule 34)

    $default	reduce using rule 34 (require_list)



state 97

    require_list  ->  require_list KW_TRANSLATION .   (rule 33)

    $default	reduce using rule 33 (require_list)



state 98

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE .   (rule 55)

    $default	reduce using rule 55 (domain_constants)



state 99

    ne_constant_sym_list  ->  TK_NEW_SYMBOL .   (rule 61)

    $default	reduce using rule 61 (ne_constant_sym_list)



state 100

    typed_constant_list  ->  typed_constant_list ne_constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 57)
    typed_constant_list  ->  typed_constant_list ne_constant_sym_list .   (rule 58)
    ne_constant_sym_list  ->  ne_constant_sym_list . TK_NEW_SYMBOL   (rule 60)

    TK_HYPHEN	shift, and go to state 122
    TK_NEW_SYMBOL	shift, and go to state 123

    TK_NEW_SYMBOL	[reduce using rule 58 (typed_constant_list)]
    $default	reduce using rule 58 (typed_constant_list)



state 101

    domain_predicates  ->  TK_OPEN KW_PREDS error TK_CLOSE .   (rule 37)

    $default	reduce using rule 37 (domain_predicates)



state 102

    predicate_decl  ->  TK_OPEN error . TK_CLOSE   (rule 41)

    TK_CLOSE	shift, and go to state 124



state 103

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL . typed_param_list TK_CLOSE   (rule 40)

    $default	reduce using rule 44 (typed_param_list)

    typed_param_list	go to state 125



state 104

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list TK_CLOSE .   (rule 36)

    $default	reduce using rule 36 (domain_predicates)



state 105

    predicate_list  ->  predicate_list predicate_decl .   (rule 38)

    $default	reduce using rule 38 (predicate_list)



state 106

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list TK_CLOSE .   (rule 47)

    $default	reduce using rule 47 (domain_types)



state 107

    typed_type_list  ->  typed_type_list primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 48)
    typed_type_list  ->  typed_type_list primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL   (rule 49)
    typed_type_list  ->  typed_type_list primitive_type_list .   (rule 50)
    primitive_type_list  ->  primitive_type_list . TK_TYPE_SYMBOL   (rule 52)
    primitive_type_list  ->  primitive_type_list . TK_NEW_SYMBOL   (rule 53)

    TK_HYPHEN	shift, and go to state 126
    TK_NEW_SYMBOL	shift, and go to state 127
    TK_TYPE_SYMBOL	shift, and go to state 128

    TK_HYPHEN	[reduce using rule 50 (typed_type_list)]
    TK_NEW_SYMBOL	[reduce using rule 50 (typed_type_list)]
    TK_TYPE_SYMBOL	[reduce using rule 50 (typed_type_list)]
    $default	reduce using rule 50 (typed_type_list)



state 108

    action_declaration  ->  TK_OPEN KW_ACTION error TK_CLOSE .   (rule 83)

    $default	reduce using rule 83 (action_declaration)



state 109

    action_declaration  ->  TK_OPEN KW_ACTION action_symbol @3 . action_elements TK_CLOSE   (rule 82)

    $default	reduce using rule 89 (action_elements)

    action_elements	go to state 129



state 110

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE .   (rule 56)

    $default	reduce using rule 56 (domain_constants)



state 111

    sensor_declaration  ->  TK_OPEN KW_SENSOR error TK_CLOSE .   (rule 133)

    $default	reduce using rule 133 (sensor_declaration)



state 112

    sensor_declaration  ->  TK_OPEN KW_SENSOR sensor_symbol @7 . sensor_elements TK_CLOSE   (rule 132)

    $default	reduce using rule 137 (sensor_elements)

    sensor_elements	go to state 130



state 113

    axiom_declaration  ->  TK_OPEN KW_AXIOM error TK_CLOSE .   (rule 126)

    $default	reduce using rule 126 (axiom_declaration)



state 114

    axiom_declaration  ->  TK_OPEN KW_AXIOM axiom_symbol @6 . axiom_elements TK_CLOSE   (rule 125)

    $default	reduce using rule 130 (axiom_elements)

    axiom_elements	go to state 131



state 115

    observable_declaration  ->  TK_OPEN KW_OBSERVABLE error TK_CLOSE .   (rule 140)

    $default	reduce using rule 140 (observable_declaration)



state 116

    observable_declaration  ->  TK_OPEN KW_OBSERVABLE @8 observable_elements . TK_CLOSE   (rule 139)
    observable_elements  ->  observable_elements . KW_ARGS TK_OPEN typed_param_list TK_CLOSE   (rule 141)
    observable_elements  ->  observable_elements . KW_FLUENTS positive_atomic_effect_list   (rule 142)

    TK_CLOSE	shift, and go to state 132
    KW_ARGS	shift, and go to state 133
    KW_FLUENTS	shift, and go to state 134



state 117

    sticky_declaration  ->  TK_OPEN KW_STICKY error TK_CLOSE .   (rule 146)

    $default	reduce using rule 146 (sticky_declaration)



state 118

    sticky_declaration  ->  TK_OPEN KW_STICKY @9 sticky_elements . TK_CLOSE   (rule 145)
    sticky_elements  ->  sticky_elements . KW_ARGS TK_OPEN typed_param_list TK_CLOSE   (rule 147)
    sticky_elements  ->  sticky_elements . KW_FLUENTS positive_atomic_effect_list   (rule 148)

    TK_CLOSE	shift, and go to state 135
    KW_ARGS	shift, and go to state 136
    KW_FLUENTS	shift, and go to state 137



state 119

    state_variable  ->  TK_OPEN KW_VARIABLE variable_symbol @1 . variable_values rest_state_variable TK_CLOSE   (rule 67)

    TK_OPEN	shift, and go to state 138

    variable_values	go to state 139
    variable_value_decl	go to state 140
    positive_literal	go to state 141
    forall_effect	go to state 142
    positive_atomic_effect	go to state 143



state 120

    observable_variable  ->  TK_OPEN KW_OBS_VARIABLE variable_symbol @2 . variable_values TK_CLOSE   (rule 71)

    TK_OPEN	shift, and go to state 138

    variable_values	go to state 144
    variable_value_decl	go to state 140
    positive_literal	go to state 141
    forall_effect	go to state 142
    positive_atomic_effect	go to state 143



state 121

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @10 problem_elements . TK_CLOSE   (rule 151)
    problem_elements  ->  problem_elements . TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE   (rule 153)
    problem_elements  ->  problem_elements . domain_requires   (rule 154)
    problem_elements  ->  problem_elements . domain_constants   (rule 155)
    problem_elements  ->  problem_elements . initial_state   (rule 156)
    problem_elements  ->  problem_elements . hidden_state   (rule 157)
    problem_elements  ->  problem_elements . goal_spec   (rule 158)

    TK_OPEN	shift, and go to state 145
    TK_CLOSE	shift, and go to state 146

    domain_requires	go to state 147
    domain_constants	go to state 148
    initial_state	go to state 149
    hidden_state	go to state 150
    goal_spec	go to state 151



state 122

    typed_constant_list  ->  typed_constant_list ne_constant_sym_list TK_HYPHEN . TK_TYPE_SYMBOL   (rule 57)

    TK_TYPE_SYMBOL	shift, and go to state 152



state 123

    ne_constant_sym_list  ->  ne_constant_sym_list TK_NEW_SYMBOL .   (rule 60)

    $default	reduce using rule 60 (ne_constant_sym_list)



state 124

    predicate_decl  ->  TK_OPEN error TK_CLOSE .   (rule 41)

    $default	reduce using rule 41 (predicate_decl)



state 125

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL typed_param_list . TK_CLOSE   (rule 40)
    typed_param_list  ->  typed_param_list . typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list . typed_param_sym_list   (rule 43)

    TK_CLOSE	shift, and go to state 153

    TK_CLOSE	[reduce using rule 46 (typed_param_sym_list)]
    $default	reduce using rule 46 (typed_param_sym_list)

    typed_param_sym_list	go to state 154



state 126

    typed_type_list  ->  typed_type_list primitive_type_list TK_HYPHEN . TK_TYPE_SYMBOL   (rule 48)
    typed_type_list  ->  typed_type_list primitive_type_list TK_HYPHEN . TK_NEW_SYMBOL   (rule 49)

    TK_NEW_SYMBOL	shift, and go to state 155
    TK_TYPE_SYMBOL	shift, and go to state 156



state 127

    primitive_type_list  ->  primitive_type_list TK_NEW_SYMBOL .   (rule 53)

    $default	reduce using rule 53 (primitive_type_list)



state 128

    primitive_type_list  ->  primitive_type_list TK_TYPE_SYMBOL .   (rule 52)

    $default	reduce using rule 52 (primitive_type_list)



state 129

    action_declaration  ->  TK_OPEN KW_ACTION action_symbol @3 action_elements . TK_CLOSE   (rule 82)
    action_elements  ->  action_elements . KW_ARGS TK_OPEN typed_param_list TK_CLOSE   (rule 84)
    action_elements  ->  action_elements . KW_PRE condition   (rule 85)
    action_elements  ->  action_elements . KW_EFFECT action_effect   (rule 86)
    action_elements  ->  action_elements . KW_OBSERVE positive_atomic_effect_list   (rule 87)
    action_elements  ->  action_elements . KW_SENSING_MODEL sensing_model   (rule 88)

    TK_CLOSE	shift, and go to state 157
    KW_ARGS	shift, and go to state 158
    KW_PRE	shift, and go to state 159
    KW_EFFECT	shift, and go to state 160
    KW_OBSERVE	shift, and go to state 161
    KW_SENSING_MODEL	shift, and go to state 162



state 130

    sensor_declaration  ->  TK_OPEN KW_SENSOR sensor_symbol @7 sensor_elements . TK_CLOSE   (rule 132)
    sensor_elements  ->  sensor_elements . KW_ARGS TK_OPEN typed_param_list TK_CLOSE   (rule 134)
    sensor_elements  ->  sensor_elements . KW_COND condition   (rule 135)
    sensor_elements  ->  sensor_elements . KW_SENSE positive_atomic_effect_list   (rule 136)

    TK_CLOSE	shift, and go to state 163
    KW_ARGS	shift, and go to state 164
    KW_SENSE	shift, and go to state 165
    KW_COND	shift, and go to state 166



state 131

    axiom_declaration  ->  TK_OPEN KW_AXIOM axiom_symbol @6 axiom_elements . TK_CLOSE   (rule 125)
    axiom_elements  ->  axiom_elements . KW_ARGS TK_OPEN typed_param_list TK_CLOSE   (rule 127)
    axiom_elements  ->  axiom_elements . KW_BODY condition   (rule 128)
    axiom_elements  ->  axiom_elements . KW_HEAD atomic_effect_kw_list   (rule 129)

    TK_CLOSE	shift, and go to state 167
    KW_ARGS	shift, and go to state 168
    KW_BODY	shift, and go to state 169
    KW_HEAD	shift, and go to state 170



state 132

    observable_declaration  ->  TK_OPEN KW_OBSERVABLE @8 observable_elements TK_CLOSE .   (rule 139)

    $default	reduce using rule 139 (observable_declaration)



state 133

    observable_elements  ->  observable_elements KW_ARGS . TK_OPEN typed_param_list TK_CLOSE   (rule 141)

    TK_OPEN	shift, and go to state 171



state 134

    observable_elements  ->  observable_elements KW_FLUENTS . positive_atomic_effect_list   (rule 142)

    TK_OPEN	shift, and go to state 172

    positive_literal	go to state 141
    positive_atomic_effect_list	go to state 173
    positive_atomic_effect	go to state 174



state 135

    sticky_declaration  ->  TK_OPEN KW_STICKY @9 sticky_elements TK_CLOSE .   (rule 145)

    $default	reduce using rule 145 (sticky_declaration)



state 136

    sticky_elements  ->  sticky_elements KW_ARGS . TK_OPEN typed_param_list TK_CLOSE   (rule 147)

    TK_OPEN	shift, and go to state 175



state 137

    sticky_elements  ->  sticky_elements KW_FLUENTS . positive_atomic_effect_list   (rule 148)

    TK_OPEN	shift, and go to state 172

    positive_literal	go to state 141
    positive_atomic_effect_list	go to state 176
    positive_atomic_effect	go to state 174



state 138

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE @5 action_effect TK_CLOSE   (rule 113)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_FORALL	shift, and go to state 179



state 139

    state_variable  ->  TK_OPEN KW_VARIABLE variable_symbol @1 variable_values . rest_state_variable TK_CLOSE   (rule 67)
    variable_values  ->  variable_values . variable_value_decl   (rule 72)

    TK_OPEN	shift, and go to state 138
    KW_OBSERVABLE	shift, and go to state 180

    $default	reduce using rule 69 (rest_state_variable)

    rest_state_variable	go to state 181
    variable_value_decl	go to state 182
    positive_literal	go to state 141
    forall_effect	go to state 142
    positive_atomic_effect	go to state 143



state 140

    variable_values  ->  variable_value_decl .   (rule 73)

    $default	reduce using rule 73 (variable_values)



state 141

    positive_atomic_effect  ->  positive_literal .   (rule 121)

    $default	reduce using rule 121 (positive_atomic_effect)



state 142

    variable_value_decl  ->  forall_effect .   (rule 75)

    $default	reduce using rule 75 (variable_value_decl)



state 143

    variable_value_decl  ->  positive_atomic_effect .   (rule 74)

    $default	reduce using rule 74 (variable_value_decl)



state 144

    observable_variable  ->  TK_OPEN KW_OBS_VARIABLE variable_symbol @2 variable_values . TK_CLOSE   (rule 71)
    variable_values  ->  variable_values . variable_value_decl   (rule 72)

    TK_OPEN	shift, and go to state 138
    TK_CLOSE	shift, and go to state 183

    variable_value_decl	go to state 182
    positive_literal	go to state 141
    forall_effect	go to state 142
    positive_atomic_effect	go to state 143



state 145

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 31)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 32)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 55)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 56)
    problem_elements  ->  problem_elements TK_OPEN . KW_FORDOMAIN any_symbol TK_CLOSE   (rule 153)
    initial_state  ->  TK_OPEN . KW_INIT TK_CLOSE   (rule 160)
    initial_state  ->  TK_OPEN . KW_INIT init_elements TK_CLOSE   (rule 161)
    initial_state  ->  TK_OPEN . KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 162)
    hidden_state  ->  TK_OPEN . KW_HIDDEN init_elements TK_CLOSE   (rule 178)
    goal_spec  ->  TK_OPEN . KW_GOAL single_goal TK_CLOSE   (rule 179)
    goal_spec  ->  TK_OPEN . KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE   (rule 180)

    KW_REQS	shift, and go to state 41
    KW_CONSTANTS	shift, and go to state 42
    KW_FORDOMAIN	shift, and go to state 184
    KW_OBJECTS	shift, and go to state 46
    KW_INIT	shift, and go to state 185
    KW_GOAL	shift, and go to state 186
    KW_HIDDEN	shift, and go to state 187



state 146

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @10 problem_elements TK_CLOSE .   (rule 151)

    $default	reduce using rule 151 (pddl_problem)



state 147

    problem_elements  ->  problem_elements domain_requires .   (rule 154)

    $default	reduce using rule 154 (problem_elements)



state 148

    problem_elements  ->  problem_elements domain_constants .   (rule 155)

    $default	reduce using rule 155 (problem_elements)



state 149

    problem_elements  ->  problem_elements initial_state .   (rule 156)

    $default	reduce using rule 156 (problem_elements)



state 150

    problem_elements  ->  problem_elements hidden_state .   (rule 157)

    $default	reduce using rule 157 (problem_elements)



state 151

    problem_elements  ->  problem_elements goal_spec .   (rule 158)

    $default	reduce using rule 158 (problem_elements)



state 152

    typed_constant_list  ->  typed_constant_list ne_constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL .   (rule 57)

    $default	reduce using rule 57 (typed_constant_list)



state 153

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL typed_param_list TK_CLOSE .   (rule 40)

    $default	reduce using rule 40 (predicate_decl)



state 154

    typed_param_list  ->  typed_param_list typed_param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list typed_param_sym_list .   (rule 43)
    typed_param_sym_list  ->  typed_param_sym_list . TK_NEW_VAR_SYMBOL   (rule 45)

    TK_HYPHEN	shift, and go to state 188
    TK_NEW_VAR_SYMBOL	shift, and go to state 189

    TK_HYPHEN	[reduce using rule 43 (typed_param_list)]
    TK_NEW_VAR_SYMBOL	[reduce using rule 43 (typed_param_list)]
    $default	reduce using rule 43 (typed_param_list)



state 155

    typed_type_list  ->  typed_type_list primitive_type_list TK_HYPHEN TK_NEW_SYMBOL .   (rule 49)

    $default	reduce using rule 49 (typed_type_list)



state 156

    typed_type_list  ->  typed_type_list primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL .   (rule 48)

    $default	reduce using rule 48 (typed_type_list)



state 157

    action_declaration  ->  TK_OPEN KW_ACTION action_symbol @3 action_elements TK_CLOSE .   (rule 82)

    $default	reduce using rule 82 (action_declaration)



state 158

    action_elements  ->  action_elements KW_ARGS . TK_OPEN typed_param_list TK_CLOSE   (rule 84)

    TK_OPEN	shift, and go to state 190



state 159

    action_elements  ->  action_elements KW_PRE . condition   (rule 85)

    TK_OPEN	shift, and go to state 191

    condition	go to state 192
    single_condition	go to state 193
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 160

    action_elements  ->  action_elements KW_EFFECT . action_effect   (rule 86)

    TK_OPEN	shift, and go to state 197

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    action_effect	go to state 199
    single_action_effect	go to state 200
    conditional_effect	go to state 201
    forall_effect	go to state 202
    atomic_effect	go to state 203



state 161

    action_elements  ->  action_elements KW_OBSERVE . positive_atomic_effect_list   (rule 87)

    TK_OPEN	shift, and go to state 172

    positive_literal	go to state 141
    positive_atomic_effect_list	go to state 204
    positive_atomic_effect	go to state 174



state 162

    action_elements  ->  action_elements KW_SENSING_MODEL . sensing_model   (rule 88)

    TK_OPEN	shift, and go to state 197

    $default	reduce using rule 123 (sensing_model)

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    action_effect	go to state 205
    single_action_effect	go to state 200
    conditional_effect	go to state 201
    forall_effect	go to state 202
    atomic_effect	go to state 203
    sensing_model	go to state 206



state 163

    sensor_declaration  ->  TK_OPEN KW_SENSOR sensor_symbol @7 sensor_elements TK_CLOSE .   (rule 132)

    $default	reduce using rule 132 (sensor_declaration)



state 164

    sensor_elements  ->  sensor_elements KW_ARGS . TK_OPEN typed_param_list TK_CLOSE   (rule 134)

    TK_OPEN	shift, and go to state 207



state 165

    sensor_elements  ->  sensor_elements KW_SENSE . positive_atomic_effect_list   (rule 136)

    TK_OPEN	shift, and go to state 172

    positive_literal	go to state 141
    positive_atomic_effect_list	go to state 208
    positive_atomic_effect	go to state 174



state 166

    sensor_elements  ->  sensor_elements KW_COND . condition   (rule 135)

    TK_OPEN	shift, and go to state 191

    condition	go to state 209
    single_condition	go to state 193
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 167

    axiom_declaration  ->  TK_OPEN KW_AXIOM axiom_symbol @6 axiom_elements TK_CLOSE .   (rule 125)

    $default	reduce using rule 125 (axiom_declaration)



state 168

    axiom_elements  ->  axiom_elements KW_ARGS . TK_OPEN typed_param_list TK_CLOSE   (rule 127)

    TK_OPEN	shift, and go to state 210



state 169

    axiom_elements  ->  axiom_elements KW_BODY . condition   (rule 128)

    TK_OPEN	shift, and go to state 191

    condition	go to state 211
    single_condition	go to state 193
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 170

    axiom_elements  ->  axiom_elements KW_HEAD . atomic_effect_kw_list   (rule 129)

    TK_OPEN	shift, and go to state 212

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    atomic_effect_kw_list	go to state 213
    atomic_effect	go to state 214



state 171

    observable_elements  ->  observable_elements KW_ARGS TK_OPEN . typed_param_list TK_CLOSE   (rule 141)

    $default	reduce using rule 44 (typed_param_list)

    typed_param_list	go to state 215



state 172

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178



state 173

    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 118)
    observable_elements  ->  observable_elements KW_FLUENTS positive_atomic_effect_list .   (rule 142)

    TK_OPEN	shift, and go to state 172

    $default	reduce using rule 142 (observable_elements)

    positive_literal	go to state 141
    positive_atomic_effect	go to state 216



state 174

    positive_atomic_effect_list  ->  positive_atomic_effect .   (rule 119)

    $default	reduce using rule 119 (positive_atomic_effect_list)



state 175

    sticky_elements  ->  sticky_elements KW_ARGS TK_OPEN . typed_param_list TK_CLOSE   (rule 147)

    $default	reduce using rule 44 (typed_param_list)

    typed_param_list	go to state 217



state 176

    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 118)
    sticky_elements  ->  sticky_elements KW_FLUENTS positive_atomic_effect_list .   (rule 148)

    TK_OPEN	shift, and go to state 172

    $default	reduce using rule 148 (sticky_elements)

    positive_literal	go to state 141
    positive_atomic_effect	go to state 216



state 177

    positive_literal  ->  TK_OPEN TK_EQ . atom_argument_list TK_CLOSE   (rule 98)

    $default	reduce using rule 102 (atom_argument_list)

    atom_argument_list	go to state 218



state 178

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL . atom_argument_list TK_CLOSE   (rule 97)

    $default	reduce using rule 102 (atom_argument_list)

    atom_argument_list	go to state 219



state 179

    forall_effect  ->  TK_OPEN KW_FORALL . TK_OPEN @4 typed_param_list TK_CLOSE @5 action_effect TK_CLOSE   (rule 113)

    TK_OPEN	shift, and go to state 220



state 180

    rest_state_variable  ->  KW_OBSERVABLE .   (rule 68)

    $default	reduce using rule 68 (rest_state_variable)



state 181

    state_variable  ->  TK_OPEN KW_VARIABLE variable_symbol @1 variable_values rest_state_variable . TK_CLOSE   (rule 67)

    TK_CLOSE	shift, and go to state 221



state 182

    variable_values  ->  variable_values variable_value_decl .   (rule 72)

    $default	reduce using rule 72 (variable_values)



state 183

    observable_variable  ->  TK_OPEN KW_OBS_VARIABLE variable_symbol @2 variable_values TK_CLOSE .   (rule 71)

    $default	reduce using rule 71 (observable_variable)



state 184

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN . any_symbol TK_CLOSE   (rule 153)

    TK_NEW_SYMBOL	shift, and go to state 28
    TK_OBJ_SYMBOL	shift, and go to state 29
    TK_TYPE_SYMBOL	shift, and go to state 30
    TK_PRED_SYMBOL	shift, and go to state 31
    TK_VAR_SYMBOL	shift, and go to state 32
    TK_ACTION_SYMBOL	shift, and go to state 33
    TK_AXIOM_SYMBOL	shift, and go to state 34
    TK_SENSOR_SYMBOL	shift, and go to state 35
    TK_MISC_SYMBOL	shift, and go to state 36

    any_symbol	go to state 222



state 185

    initial_state  ->  TK_OPEN KW_INIT . TK_CLOSE   (rule 160)
    initial_state  ->  TK_OPEN KW_INIT . init_elements TK_CLOSE   (rule 161)
    initial_state  ->  TK_OPEN KW_INIT . TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 162)

    TK_OPEN	shift, and go to state 223
    TK_CLOSE	shift, and go to state 224

    literal	go to state 225
    positive_literal	go to state 195
    negative_literal	go to state 196
    init_elements	go to state 226
    single_init_element	go to state 227
    at_least_one_invariant	go to state 228
    at_most_one_invariant	go to state 229
    exactly_one_invariant	go to state 230
    invariant	go to state 231
    clause	go to state 232
    oneof	go to state 233



state 186

    goal_spec  ->  TK_OPEN KW_GOAL . single_goal TK_CLOSE   (rule 179)
    goal_spec  ->  TK_OPEN KW_GOAL . TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE   (rule 180)

    TK_OPEN	shift, and go to state 234

    positive_literal	go to state 235
    negative_literal	go to state 236
    single_goal	go to state 237



state 187

    hidden_state  ->  TK_OPEN KW_HIDDEN . init_elements TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 238

    literal	go to state 225
    positive_literal	go to state 195
    negative_literal	go to state 196
    init_elements	go to state 239
    single_init_element	go to state 227
    at_least_one_invariant	go to state 228
    at_most_one_invariant	go to state 229
    exactly_one_invariant	go to state 230
    invariant	go to state 231
    clause	go to state 232
    oneof	go to state 233



state 188

    typed_param_list  ->  typed_param_list typed_param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL   (rule 42)

    TK_TYPE_SYMBOL	shift, and go to state 240



state 189

    typed_param_sym_list  ->  typed_param_sym_list TK_NEW_VAR_SYMBOL .   (rule 45)

    $default	reduce using rule 45 (typed_param_sym_list)



state 190

    action_elements  ->  action_elements KW_ARGS TK_OPEN . typed_param_list TK_CLOSE   (rule 84)

    $default	reduce using rule 44 (typed_param_list)

    typed_param_list	go to state 241



state 191

    condition  ->  TK_OPEN . KW_AND condition_list TK_CLOSE   (rule 91)
    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_AND	shift, and go to state 242
    KW_NOT	shift, and go to state 243



state 192

    action_elements  ->  action_elements KW_PRE condition .   (rule 85)

    $default	reduce using rule 85 (action_elements)



state 193

    condition  ->  single_condition .   (rule 90)

    $default	reduce using rule 90 (condition)



state 194

    single_condition  ->  literal .   (rule 94)

    $default	reduce using rule 94 (single_condition)



state 195

    literal  ->  positive_literal .   (rule 95)

    $default	reduce using rule 95 (literal)



state 196

    literal  ->  negative_literal .   (rule 96)

    $default	reduce using rule 96 (literal)



state 197

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)
    action_effect  ->  TK_OPEN . KW_AND action_effect_list TK_CLOSE   (rule 104)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 110)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE @5 action_effect TK_CLOSE   (rule 113)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_AND	shift, and go to state 244
    KW_FORALL	shift, and go to state 179
    KW_NOT	shift, and go to state 243
    KW_WHEN	shift, and go to state 245



state 198

    atomic_effect  ->  literal .   (rule 120)

    $default	reduce using rule 120 (atomic_effect)



state 199

    action_elements  ->  action_elements KW_EFFECT action_effect .   (rule 86)

    $default	reduce using rule 86 (action_elements)



state 200

    action_effect  ->  single_action_effect .   (rule 103)

    $default	reduce using rule 103 (action_effect)



state 201

    single_action_effect  ->  conditional_effect .   (rule 108)

    $default	reduce using rule 108 (single_action_effect)



state 202

    single_action_effect  ->  forall_effect .   (rule 109)

    $default	reduce using rule 109 (single_action_effect)



state 203

    single_action_effect  ->  atomic_effect .   (rule 107)

    $default	reduce using rule 107 (single_action_effect)



state 204

    action_elements  ->  action_elements KW_OBSERVE positive_atomic_effect_list .   (rule 87)
    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 118)

    TK_OPEN	shift, and go to state 172

    $default	reduce using rule 87 (action_elements)

    positive_literal	go to state 141
    positive_atomic_effect	go to state 216



state 205

    sensing_model  ->  action_effect .   (rule 122)

    $default	reduce using rule 122 (sensing_model)



state 206

    action_elements  ->  action_elements KW_SENSING_MODEL sensing_model .   (rule 88)

    $default	reduce using rule 88 (action_elements)



state 207

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN . typed_param_list TK_CLOSE   (rule 134)

    $default	reduce using rule 44 (typed_param_list)

    typed_param_list	go to state 246



state 208

    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 118)
    sensor_elements  ->  sensor_elements KW_SENSE positive_atomic_effect_list .   (rule 136)

    TK_OPEN	shift, and go to state 172

    $default	reduce using rule 136 (sensor_elements)

    positive_literal	go to state 141
    positive_atomic_effect	go to state 216



state 209

    sensor_elements  ->  sensor_elements KW_COND condition .   (rule 135)

    $default	reduce using rule 135 (sensor_elements)



state 210

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN . typed_param_list TK_CLOSE   (rule 127)

    $default	reduce using rule 44 (typed_param_list)

    typed_param_list	go to state 247



state 211

    axiom_elements  ->  axiom_elements KW_BODY condition .   (rule 128)

    $default	reduce using rule 128 (axiom_elements)



state 212

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)
    atomic_effect_kw_list  ->  TK_OPEN . KW_AND atomic_effect_list TK_CLOSE   (rule 114)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_AND	shift, and go to state 248
    KW_NOT	shift, and go to state 243



state 213

    axiom_elements  ->  axiom_elements KW_HEAD atomic_effect_kw_list .   (rule 129)

    $default	reduce using rule 129 (axiom_elements)



state 214

    atomic_effect_kw_list  ->  atomic_effect .   (rule 115)

    $default	reduce using rule 115 (atomic_effect_kw_list)



state 215

    typed_param_list  ->  typed_param_list . typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list . typed_param_sym_list   (rule 43)
    observable_elements  ->  observable_elements KW_ARGS TK_OPEN typed_param_list . TK_CLOSE   (rule 141)

    TK_CLOSE	shift, and go to state 249

    TK_CLOSE	[reduce using rule 46 (typed_param_sym_list)]
    $default	reduce using rule 46 (typed_param_sym_list)

    typed_param_sym_list	go to state 154



state 216

    positive_atomic_effect_list  ->  positive_atomic_effect_list positive_atomic_effect .   (rule 118)

    $default	reduce using rule 118 (positive_atomic_effect_list)



state 217

    typed_param_list  ->  typed_param_list . typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list . typed_param_sym_list   (rule 43)
    sticky_elements  ->  sticky_elements KW_ARGS TK_OPEN typed_param_list . TK_CLOSE   (rule 147)

    TK_CLOSE	shift, and go to state 250

    TK_CLOSE	[reduce using rule 46 (typed_param_sym_list)]
    $default	reduce using rule 46 (typed_param_sym_list)

    typed_param_sym_list	go to state 154



state 218

    positive_literal  ->  TK_OPEN TK_EQ atom_argument_list . TK_CLOSE   (rule 98)
    atom_argument_list  ->  atom_argument_list . TK_VAR_SYMBOL   (rule 100)
    atom_argument_list  ->  atom_argument_list . TK_OBJ_SYMBOL   (rule 101)

    TK_CLOSE	shift, and go to state 251
    TK_OBJ_SYMBOL	shift, and go to state 252
    TK_VAR_SYMBOL	shift, and go to state 253



state 219

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL atom_argument_list . TK_CLOSE   (rule 97)
    atom_argument_list  ->  atom_argument_list . TK_VAR_SYMBOL   (rule 100)
    atom_argument_list  ->  atom_argument_list . TK_OBJ_SYMBOL   (rule 101)

    TK_CLOSE	shift, and go to state 254
    TK_OBJ_SYMBOL	shift, and go to state 252
    TK_VAR_SYMBOL	shift, and go to state 253



state 220

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN . @4 typed_param_list TK_CLOSE @5 action_effect TK_CLOSE   (rule 113)

    $default	reduce using rule 111 (@4)

    @4  	go to state 255



state 221

    state_variable  ->  TK_OPEN KW_VARIABLE variable_symbol @1 variable_values rest_state_variable TK_CLOSE .   (rule 67)

    $default	reduce using rule 67 (state_variable)



state 222

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol . TK_CLOSE   (rule 153)

    TK_CLOSE	shift, and go to state 256



state 223

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)
    initial_state  ->  TK_OPEN KW_INIT TK_OPEN . KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 162)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT condition_list TK_CLOSE   (rule 169)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE condition_list TK_CLOSE   (rule 170)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE condition_list TK_CLOSE   (rule 171)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE condition_list TK_CLOSE   (rule 172)
    clause  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 176)
    oneof  ->  TK_OPEN . KW_ONEOF condition_list TK_CLOSE   (rule 177)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_AND	shift, and go to state 257
    KW_OR	shift, and go to state 258
    KW_NOT	shift, and go to state 243
    KW_ONEOF	shift, and go to state 259
    KW_INVARIANT	shift, and go to state 260
    KW_AT_LEAST_ONE	shift, and go to state 261
    KW_AT_MOST_ONE	shift, and go to state 262
    KW_EXACTLY_ONE	shift, and go to state 263



state 224

    initial_state  ->  TK_OPEN KW_INIT TK_CLOSE .   (rule 160)

    $default	reduce using rule 160 (initial_state)



state 225

    single_init_element  ->  literal .   (rule 165)

    $default	reduce using rule 165 (single_init_element)



state 226

    initial_state  ->  TK_OPEN KW_INIT init_elements . TK_CLOSE   (rule 161)
    init_elements  ->  init_elements . single_init_element   (rule 163)

    TK_OPEN	shift, and go to state 238
    TK_CLOSE	shift, and go to state 264

    literal	go to state 225
    positive_literal	go to state 195
    negative_literal	go to state 196
    single_init_element	go to state 265
    at_least_one_invariant	go to state 228
    at_most_one_invariant	go to state 229
    exactly_one_invariant	go to state 230
    invariant	go to state 231
    clause	go to state 232
    oneof	go to state 233



state 227

    init_elements  ->  single_init_element .   (rule 164)

    $default	reduce using rule 164 (init_elements)



state 228

    invariant  ->  at_least_one_invariant .   (rule 173)

    $default	reduce using rule 173 (invariant)



state 229

    invariant  ->  at_most_one_invariant .   (rule 174)

    $default	reduce using rule 174 (invariant)



state 230

    invariant  ->  exactly_one_invariant .   (rule 175)

    $default	reduce using rule 175 (invariant)



state 231

    single_init_element  ->  invariant .   (rule 166)

    $default	reduce using rule 166 (single_init_element)



state 232

    single_init_element  ->  clause .   (rule 167)

    $default	reduce using rule 167 (single_init_element)



state 233

    single_init_element  ->  oneof .   (rule 168)

    $default	reduce using rule 168 (single_init_element)



state 234

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)
    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN . KW_AND goal_list TK_CLOSE TK_CLOSE   (rule 180)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_AND	shift, and go to state 266
    KW_NOT	shift, and go to state 243



state 235

    single_goal  ->  positive_literal .   (rule 183)

    $default	reduce using rule 183 (single_goal)



state 236

    single_goal  ->  negative_literal .   (rule 184)

    $default	reduce using rule 184 (single_goal)



state 237

    goal_spec  ->  TK_OPEN KW_GOAL single_goal . TK_CLOSE   (rule 179)

    TK_CLOSE	shift, and go to state 267



state 238

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT condition_list TK_CLOSE   (rule 169)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE condition_list TK_CLOSE   (rule 170)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE condition_list TK_CLOSE   (rule 171)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE condition_list TK_CLOSE   (rule 172)
    clause  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 176)
    oneof  ->  TK_OPEN . KW_ONEOF condition_list TK_CLOSE   (rule 177)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_OR	shift, and go to state 258
    KW_NOT	shift, and go to state 243
    KW_ONEOF	shift, and go to state 259
    KW_INVARIANT	shift, and go to state 260
    KW_AT_LEAST_ONE	shift, and go to state 261
    KW_AT_MOST_ONE	shift, and go to state 262
    KW_EXACTLY_ONE	shift, and go to state 263



state 239

    init_elements  ->  init_elements . single_init_element   (rule 163)
    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements . TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 238
    TK_CLOSE	shift, and go to state 268

    literal	go to state 225
    positive_literal	go to state 195
    negative_literal	go to state 196
    single_init_element	go to state 265
    at_least_one_invariant	go to state 228
    at_most_one_invariant	go to state 229
    exactly_one_invariant	go to state 230
    invariant	go to state 231
    clause	go to state 232
    oneof	go to state 233



state 240

    typed_param_list  ->  typed_param_list typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL .   (rule 42)

    $default	reduce using rule 42 (typed_param_list)



state 241

    typed_param_list  ->  typed_param_list . typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list . typed_param_sym_list   (rule 43)
    action_elements  ->  action_elements KW_ARGS TK_OPEN typed_param_list . TK_CLOSE   (rule 84)

    TK_CLOSE	shift, and go to state 269

    TK_CLOSE	[reduce using rule 46 (typed_param_sym_list)]
    $default	reduce using rule 46 (typed_param_sym_list)

    typed_param_sym_list	go to state 154



state 242

    condition  ->  TK_OPEN KW_AND . condition_list TK_CLOSE   (rule 91)

    TK_OPEN	shift, and go to state 270

    condition_list	go to state 271
    single_condition	go to state 272
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 243

    negative_literal  ->  TK_OPEN KW_NOT . positive_literal TK_CLOSE   (rule 99)

    TK_OPEN	shift, and go to state 172

    positive_literal	go to state 273



state 244

    action_effect  ->  TK_OPEN KW_AND . action_effect_list TK_CLOSE   (rule 104)

    TK_OPEN	shift, and go to state 274

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    action_effect_list	go to state 275
    single_action_effect	go to state 276
    conditional_effect	go to state 201
    forall_effect	go to state 202
    atomic_effect	go to state 203



state 245

    conditional_effect  ->  TK_OPEN KW_WHEN . condition atomic_effect_kw_list TK_CLOSE   (rule 110)

    TK_OPEN	shift, and go to state 191

    condition	go to state 277
    single_condition	go to state 193
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 246

    typed_param_list  ->  typed_param_list . typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list . typed_param_sym_list   (rule 43)
    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN typed_param_list . TK_CLOSE   (rule 134)

    TK_CLOSE	shift, and go to state 278

    TK_CLOSE	[reduce using rule 46 (typed_param_sym_list)]
    $default	reduce using rule 46 (typed_param_sym_list)

    typed_param_sym_list	go to state 154



state 247

    typed_param_list  ->  typed_param_list . typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list . typed_param_sym_list   (rule 43)
    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN typed_param_list . TK_CLOSE   (rule 127)

    TK_CLOSE	shift, and go to state 279

    TK_CLOSE	[reduce using rule 46 (typed_param_sym_list)]
    $default	reduce using rule 46 (typed_param_sym_list)

    typed_param_sym_list	go to state 154



state 248

    atomic_effect_kw_list  ->  TK_OPEN KW_AND . atomic_effect_list TK_CLOSE   (rule 114)

    TK_OPEN	shift, and go to state 270

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    atomic_effect_list	go to state 280
    atomic_effect	go to state 281



state 249

    observable_elements  ->  observable_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE .   (rule 141)

    $default	reduce using rule 141 (observable_elements)



state 250

    sticky_elements  ->  sticky_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE .   (rule 147)

    $default	reduce using rule 147 (sticky_elements)



state 251

    positive_literal  ->  TK_OPEN TK_EQ atom_argument_list TK_CLOSE .   (rule 98)

    $default	reduce using rule 98 (positive_literal)



state 252

    atom_argument_list  ->  atom_argument_list TK_OBJ_SYMBOL .   (rule 101)

    $default	reduce using rule 101 (atom_argument_list)



state 253

    atom_argument_list  ->  atom_argument_list TK_VAR_SYMBOL .   (rule 100)

    $default	reduce using rule 100 (atom_argument_list)



state 254

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL atom_argument_list TK_CLOSE .   (rule 97)

    $default	reduce using rule 97 (positive_literal)



state 255

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @4 . typed_param_list TK_CLOSE @5 action_effect TK_CLOSE   (rule 113)

    $default	reduce using rule 44 (typed_param_list)

    typed_param_list	go to state 282



state 256

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE .   (rule 153)

    $default	reduce using rule 153 (problem_elements)



state 257

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND . init_elements TK_CLOSE TK_CLOSE   (rule 162)

    TK_OPEN	shift, and go to state 238

    literal	go to state 225
    positive_literal	go to state 195
    negative_literal	go to state 196
    init_elements	go to state 283
    single_init_element	go to state 227
    at_least_one_invariant	go to state 228
    at_most_one_invariant	go to state 229
    exactly_one_invariant	go to state 230
    invariant	go to state 231
    clause	go to state 232
    oneof	go to state 233



state 258

    clause  ->  TK_OPEN KW_OR . condition_list TK_CLOSE   (rule 176)

    TK_OPEN	shift, and go to state 270

    condition_list	go to state 284
    single_condition	go to state 272
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 259

    oneof  ->  TK_OPEN KW_ONEOF . condition_list TK_CLOSE   (rule 177)

    TK_OPEN	shift, and go to state 270

    condition_list	go to state 285
    single_condition	go to state 272
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 260

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT . condition_list TK_CLOSE   (rule 169)

    TK_OPEN	shift, and go to state 270

    condition_list	go to state 286
    single_condition	go to state 272
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 261

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE . condition_list TK_CLOSE   (rule 170)

    TK_OPEN	shift, and go to state 270

    condition_list	go to state 287
    single_condition	go to state 272
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 262

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE . condition_list TK_CLOSE   (rule 171)

    TK_OPEN	shift, and go to state 270

    condition_list	go to state 288
    single_condition	go to state 272
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 263

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE . condition_list TK_CLOSE   (rule 172)

    TK_OPEN	shift, and go to state 270

    condition_list	go to state 289
    single_condition	go to state 272
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 264

    initial_state  ->  TK_OPEN KW_INIT init_elements TK_CLOSE .   (rule 161)

    $default	reduce using rule 161 (initial_state)



state 265

    init_elements  ->  init_elements single_init_element .   (rule 163)

    $default	reduce using rule 163 (init_elements)



state 266

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND . goal_list TK_CLOSE TK_CLOSE   (rule 180)

    TK_OPEN	shift, and go to state 270

    positive_literal	go to state 235
    negative_literal	go to state 236
    goal_list	go to state 290
    single_goal	go to state 291



state 267

    goal_spec  ->  TK_OPEN KW_GOAL single_goal TK_CLOSE .   (rule 179)

    $default	reduce using rule 179 (goal_spec)



state 268

    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements TK_CLOSE .   (rule 178)

    $default	reduce using rule 178 (hidden_state)



state 269

    action_elements  ->  action_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE .   (rule 84)

    $default	reduce using rule 84 (action_elements)



state 270

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_NOT	shift, and go to state 243



state 271

    condition  ->  TK_OPEN KW_AND condition_list . TK_CLOSE   (rule 91)
    condition_list  ->  condition_list . single_condition   (rule 92)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 292

    single_condition	go to state 293
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 272

    condition_list  ->  single_condition .   (rule 93)

    $default	reduce using rule 93 (condition_list)



state 273

    negative_literal  ->  TK_OPEN KW_NOT positive_literal . TK_CLOSE   (rule 99)

    TK_CLOSE	shift, and go to state 294



state 274

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL atom_argument_list TK_CLOSE   (rule 97)
    positive_literal  ->  TK_OPEN . TK_EQ atom_argument_list TK_CLOSE   (rule 98)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 99)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 110)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE @5 action_effect TK_CLOSE   (rule 113)

    TK_EQ	shift, and go to state 177
    TK_PRED_SYMBOL	shift, and go to state 178
    KW_FORALL	shift, and go to state 179
    KW_NOT	shift, and go to state 243
    KW_WHEN	shift, and go to state 245



state 275

    action_effect  ->  TK_OPEN KW_AND action_effect_list . TK_CLOSE   (rule 104)
    action_effect_list  ->  action_effect_list . single_action_effect   (rule 105)

    TK_OPEN	shift, and go to state 274
    TK_CLOSE	shift, and go to state 295

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    single_action_effect	go to state 296
    conditional_effect	go to state 201
    forall_effect	go to state 202
    atomic_effect	go to state 203



state 276

    action_effect_list  ->  single_action_effect .   (rule 106)

    $default	reduce using rule 106 (action_effect_list)



state 277

    conditional_effect  ->  TK_OPEN KW_WHEN condition . atomic_effect_kw_list TK_CLOSE   (rule 110)

    TK_OPEN	shift, and go to state 212

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    atomic_effect_kw_list	go to state 297
    atomic_effect	go to state 214



state 278

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE .   (rule 134)

    $default	reduce using rule 134 (sensor_elements)



state 279

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN typed_param_list TK_CLOSE .   (rule 127)

    $default	reduce using rule 127 (axiom_elements)



state 280

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list . TK_CLOSE   (rule 114)
    atomic_effect_list  ->  atomic_effect_list . atomic_effect   (rule 116)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 298

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    atomic_effect	go to state 299



state 281

    atomic_effect_list  ->  atomic_effect .   (rule 117)

    $default	reduce using rule 117 (atomic_effect_list)



state 282

    typed_param_list  ->  typed_param_list . typed_param_sym_list TK_HYPHEN TK_TYPE_SYMBOL   (rule 42)
    typed_param_list  ->  typed_param_list . typed_param_sym_list   (rule 43)
    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @4 typed_param_list . TK_CLOSE @5 action_effect TK_CLOSE   (rule 113)

    TK_CLOSE	shift, and go to state 300

    TK_CLOSE	[reduce using rule 46 (typed_param_sym_list)]
    $default	reduce using rule 46 (typed_param_sym_list)

    typed_param_sym_list	go to state 154



state 283

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements . TK_CLOSE TK_CLOSE   (rule 162)
    init_elements  ->  init_elements . single_init_element   (rule 163)

    TK_OPEN	shift, and go to state 238
    TK_CLOSE	shift, and go to state 301

    literal	go to state 225
    positive_literal	go to state 195
    negative_literal	go to state 196
    single_init_element	go to state 265
    at_least_one_invariant	go to state 228
    at_most_one_invariant	go to state 229
    exactly_one_invariant	go to state 230
    invariant	go to state 231
    clause	go to state 232
    oneof	go to state 233



state 284

    condition_list  ->  condition_list . single_condition   (rule 92)
    clause  ->  TK_OPEN KW_OR condition_list . TK_CLOSE   (rule 176)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 302

    single_condition	go to state 293
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 285

    condition_list  ->  condition_list . single_condition   (rule 92)
    oneof  ->  TK_OPEN KW_ONEOF condition_list . TK_CLOSE   (rule 177)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 303

    single_condition	go to state 293
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 286

    condition_list  ->  condition_list . single_condition   (rule 92)
    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT condition_list . TK_CLOSE   (rule 169)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 304

    single_condition	go to state 293
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 287

    condition_list  ->  condition_list . single_condition   (rule 92)
    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE condition_list . TK_CLOSE   (rule 170)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 305

    single_condition	go to state 293
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 288

    condition_list  ->  condition_list . single_condition   (rule 92)
    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE condition_list . TK_CLOSE   (rule 171)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 306

    single_condition	go to state 293
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 289

    condition_list  ->  condition_list . single_condition   (rule 92)
    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE condition_list . TK_CLOSE   (rule 172)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 307

    single_condition	go to state 293
    literal	go to state 194
    positive_literal	go to state 195
    negative_literal	go to state 196



state 290

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list . TK_CLOSE TK_CLOSE   (rule 180)
    goal_list  ->  goal_list . single_goal   (rule 181)

    TK_OPEN	shift, and go to state 270
    TK_CLOSE	shift, and go to state 308

    positive_literal	go to state 235
    negative_literal	go to state 236
    single_goal	go to state 309



state 291

    goal_list  ->  single_goal .   (rule 182)

    $default	reduce using rule 182 (goal_list)



state 292

    condition  ->  TK_OPEN KW_AND condition_list TK_CLOSE .   (rule 91)

    $default	reduce using rule 91 (condition)



state 293

    condition_list  ->  condition_list single_condition .   (rule 92)

    $default	reduce using rule 92 (condition_list)



state 294

    negative_literal  ->  TK_OPEN KW_NOT positive_literal TK_CLOSE .   (rule 99)

    $default	reduce using rule 99 (negative_literal)



state 295

    action_effect  ->  TK_OPEN KW_AND action_effect_list TK_CLOSE .   (rule 104)

    $default	reduce using rule 104 (action_effect)



state 296

    action_effect_list  ->  action_effect_list single_action_effect .   (rule 105)

    $default	reduce using rule 105 (action_effect_list)



state 297

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list . TK_CLOSE   (rule 110)

    TK_CLOSE	shift, and go to state 310



state 298

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list TK_CLOSE .   (rule 114)

    $default	reduce using rule 114 (atomic_effect_kw_list)



state 299

    atomic_effect_list  ->  atomic_effect_list atomic_effect .   (rule 116)

    $default	reduce using rule 116 (atomic_effect_list)



state 300

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE . @5 action_effect TK_CLOSE   (rule 113)

    $default	reduce using rule 112 (@5)

    @5  	go to state 311



state 301

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE . TK_CLOSE   (rule 162)

    TK_CLOSE	shift, and go to state 312



state 302

    clause  ->  TK_OPEN KW_OR condition_list TK_CLOSE .   (rule 176)

    $default	reduce using rule 176 (clause)



state 303

    oneof  ->  TK_OPEN KW_ONEOF condition_list TK_CLOSE .   (rule 177)

    $default	reduce using rule 177 (oneof)



state 304

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT condition_list TK_CLOSE .   (rule 169)

    $default	reduce using rule 169 (at_least_one_invariant)



state 305

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE condition_list TK_CLOSE .   (rule 170)

    $default	reduce using rule 170 (at_least_one_invariant)



state 306

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE condition_list TK_CLOSE .   (rule 171)

    $default	reduce using rule 171 (at_most_one_invariant)



state 307

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE condition_list TK_CLOSE .   (rule 172)

    $default	reduce using rule 172 (exactly_one_invariant)



state 308

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE . TK_CLOSE   (rule 180)

    TK_CLOSE	shift, and go to state 313



state 309

    goal_list  ->  goal_list single_goal .   (rule 181)

    $default	reduce using rule 181 (goal_list)



state 310

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE .   (rule 110)

    $default	reduce using rule 110 (conditional_effect)



state 311

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE @5 . action_effect TK_CLOSE   (rule 113)

    TK_OPEN	shift, and go to state 197

    literal	go to state 198
    positive_literal	go to state 195
    negative_literal	go to state 196
    action_effect	go to state 314
    single_action_effect	go to state 200
    conditional_effect	go to state 201
    forall_effect	go to state 202
    atomic_effect	go to state 203



state 312

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE .   (rule 162)

    $default	reduce using rule 162 (initial_state)



state 313

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE .   (rule 180)

    $default	reduce using rule 180 (goal_spec)



state 314

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE @5 action_effect . TK_CLOSE   (rule 113)

    TK_CLOSE	shift, and go to state 315



state 315

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @4 typed_param_list TK_CLOSE @5 action_effect TK_CLOSE .   (rule 113)

    $default	reduce using rule 113 (forall_effect)



state 316

    $   	go to state 317



state 317

    $   	go to state 318



state 318

    $default	accept
