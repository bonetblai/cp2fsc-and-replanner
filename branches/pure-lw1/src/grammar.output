Useless nonterminals:

   term
   goal_list
   single_goal


Terminals which are not used:

   TK_OPEN_SQ
   TK_CLOSE_SQ
   TK_INT
   KW_FLUENTS
   KW_VALUES


Useless rules:

#204   term :	 TK_OPEN KW_AND single_condition_list TK_CLOSE;
#210   goal_list :	 goal_list single_goal;
#211   goal_list :	 single_goal;
#212   single_goal :	 positive_literal;
#213   single_goal :	 negative_literal;



Grammar
rule 1    pddl_decls -> pddl_domain pddl_decls
rule 2    pddl_decls -> pddl_problem pddl_decls
rule 3    pddl_decls ->		/* empty */
rule 4    pddl_domain -> TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE
rule 5    pddl_domain -> TK_OPEN KW_DEFINE domain_name error TK_CLOSE
rule 6    domain_elements -> domain_elements domain_requires
rule 7    domain_elements -> domain_elements domain_types
rule 8    domain_elements -> domain_elements domain_constants
rule 9    domain_elements -> domain_elements domain_predicates
rule 10   domain_elements -> domain_elements domain_schemas
rule 11   domain_elements -> domain_elements domain_default_sensing
rule 12   domain_elements ->		/* empty */
rule 13   domain_name -> TK_OPEN KW_DOMAIN any_symbol TK_CLOSE
rule 14   any_symbol -> TK_NEW_SYMBOL
rule 15   any_symbol -> TK_OBJ_SYMBOL
rule 16   any_symbol -> TK_TYPE_SYMBOL
rule 17   any_symbol -> TK_PRED_SYMBOL
rule 18   any_symbol -> TK_VAR_SYMBOL
rule 19   any_symbol -> TK_ACTION_SYMBOL
rule 20   any_symbol -> TK_AXIOM_SYMBOL
rule 21   any_symbol -> TK_SENSOR_SYMBOL
rule 22   any_symbol -> TK_MISC_SYMBOL
rule 23   action_symbol -> TK_NEW_SYMBOL
rule 24   action_symbol -> TK_ACTION_SYMBOL
rule 25   sensor_symbol -> TK_NEW_SYMBOL
rule 26   sensor_symbol -> TK_SENSOR_SYMBOL
rule 27   axiom_symbol -> TK_NEW_SYMBOL
rule 28   axiom_symbol -> TK_AXIOM_SYMBOL
rule 29   domain_requires -> TK_OPEN KW_REQS require_list TK_CLOSE
rule 30   domain_requires -> TK_OPEN KW_REQS error TK_CLOSE
rule 31   require_list -> require_list KW_TRANSLATION
rule 32   require_list -> require_list TK_KEYWORD
rule 33   require_list ->		/* empty */
rule 34   domain_predicates -> TK_OPEN KW_PREDS predicate_list TK_CLOSE
rule 35   domain_predicates -> TK_OPEN KW_PREDS error TK_CLOSE
rule 36   predicate_list -> predicate_list predicate_decl
rule 37   predicate_list -> predicate_decl
rule 38   predicate_decl -> TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE
rule 39   predicate_decl -> TK_OPEN error TK_CLOSE
rule 40   param_list -> untyped_param_list
rule 41   param_list -> typed_param_list
rule 42   param_list ->		/* empty */
rule 43   untyped_param_list -> param_sym_list
rule 44   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list
rule 45   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL
rule 46   param_sym_list -> new_var_symbol param_sym_list
rule 47   param_sym_list -> new_var_symbol
rule 48   new_var_symbol -> TK_NEW_VAR_SYMBOL
rule 49   new_var_symbol -> TK_VAR_SYMBOL
rule 50   domain_types -> TK_OPEN KW_TYPES primitive_type_list TK_CLOSE
rule 51   domain_types -> TK_OPEN KW_TYPES typed_type_list TK_CLOSE
rule 52   typed_type_list -> primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list
rule 53   typed_type_list -> primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list
rule 54   typed_type_list ->		/* empty */
rule 55   primitive_type_list -> primitive_type_list primitive_type
rule 56   primitive_type_list -> primitive_type
rule 57   primitive_type -> TK_TYPE_SYMBOL
rule 58   primitive_type -> TK_NEW_SYMBOL
rule 59   domain_constants -> TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE
rule 60   domain_constants -> TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE
rule 61   domain_constants -> TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE
rule 62   domain_constants -> TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE
rule 63   @1 ->		/* empty */
rule 64   typed_constant_list -> constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list
rule 65   typed_constant_list ->		/* empty */
rule 66   untyped_constant_list -> constant_sym_list
rule 67   constant_sym_list -> constant_sym_list TK_NEW_SYMBOL
rule 68   constant_sym_list -> TK_NEW_SYMBOL
rule 69   domain_schemas -> action_decl
rule 70   domain_schemas -> axiom_decl
rule 71   domain_schemas -> sensor_decl
rule 72   domain_schemas -> observable_decl
rule 73   domain_schemas -> sticky_decl
rule 74   domain_schemas -> multivalued_variable_decl
rule 75   @2 ->		/* empty */
rule 76   action_decl -> TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE
rule 77   action_decl -> TK_OPEN KW_ACTION error TK_CLOSE
rule 78   action_elements -> action_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 79   action_elements -> action_elements KW_PRE condition
rule 80   action_elements -> action_elements KW_EFFECT action_effect
rule 81   action_elements -> action_elements KW_OBSERVE positive_atomic_effect_list
rule 82   action_elements -> action_elements KW_SENSING sensing
rule 83   action_elements ->		/* empty */
rule 84   condition -> single_condition
rule 85   condition -> and_condition
rule 86   condition -> or_condition
rule 87   condition -> forall_condition
rule 88   condition -> exists_condition
rule 89   single_condition -> literal
rule 90   literal -> positive_literal
rule 91   literal -> negative_literal
rule 92   positive_literal -> TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE
rule 93   positive_literal -> TK_OPEN TK_EQ argument_list TK_CLOSE
rule 94   negative_literal -> TK_OPEN KW_NOT positive_literal TK_CLOSE
rule 95   argument_list -> argument_list TK_VAR_SYMBOL
rule 96   argument_list -> argument_list TK_OBJ_SYMBOL
rule 97   argument_list ->		/* empty */
rule 98   and_condition -> TK_OPEN KW_AND condition_list TK_CLOSE
rule 99   or_condition -> TK_OPEN KW_OR condition_list TK_CLOSE
rule 100  @3 ->		/* empty */
rule 101  @4 ->		/* empty */
rule 102  forall_condition -> TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE
rule 103  @5 ->		/* empty */
rule 104  @6 ->		/* empty */
rule 105  exists_condition -> TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE
rule 106  single_condition_list -> single_condition_list single_condition
rule 107  single_condition_list -> single_condition
rule 108  condition_list -> condition_list condition
rule 109  condition_list -> condition
rule 110  action_effect -> single_action_effect
rule 111  action_effect -> TK_OPEN KW_AND action_effect_list TK_CLOSE
rule 112  action_effect_list -> action_effect_list single_action_effect
rule 113  action_effect_list -> single_action_effect
rule 114  single_action_effect -> atomic_effect
rule 115  single_action_effect -> conditional_effect
rule 116  single_action_effect -> forall_effect
rule 117  conditional_effect -> TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE
rule 118  @7 ->		/* empty */
rule 119  @8 ->		/* empty */
rule 120  forall_effect -> TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE
rule 121  atomic_effect_kw_list -> TK_OPEN KW_AND atomic_effect_list TK_CLOSE
rule 122  atomic_effect_kw_list -> atomic_effect
rule 123  atomic_effect_list -> atomic_effect_list atomic_effect
rule 124  atomic_effect_list -> atomic_effect
rule 125  positive_atomic_effect_list -> positive_atomic_effect_list positive_atomic_effect
rule 126  positive_atomic_effect_list -> positive_atomic_effect
rule 127  atomic_effect -> literal
rule 128  positive_atomic_effect -> positive_literal
rule 129  sensing -> sensing_decl_list
rule 130  sensing ->		/* empty */
rule 131  sensing_decl_list -> sensing_decl_list sensing_decl
rule 132  sensing_decl_list -> sensing_decl
rule 133  sensing_decl -> sensing_model
rule 134  sensing_decl -> forall_sensing
rule 135  @9 ->		/* empty */
rule 136  @10 ->		/* empty */
rule 137  forall_sensing -> TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE
rule 138  sensing_model -> TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE
rule 139  sensing_model -> TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE
rule 140  sensing_model -> TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE
rule 141  sensing_model -> TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE
rule 142  sensing_model -> TK_OPEN KW_VARIABLE error TK_CLOSE
rule 143  sensing_model -> TK_OPEN KW_MODEL_FOR error TK_CLOSE
rule 144  @11 ->		/* empty */
rule 145  axiom_decl -> TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE
rule 146  axiom_decl -> TK_OPEN KW_AXIOM error TK_CLOSE
rule 147  axiom_elements -> axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 148  axiom_elements -> axiom_elements KW_BODY condition
rule 149  axiom_elements -> axiom_elements KW_HEAD atomic_effect_kw_list
rule 150  axiom_elements ->		/* empty */
rule 151  @12 ->		/* empty */
rule 152  sensor_decl -> TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE
rule 153  sensor_decl -> TK_OPEN KW_SENSOR error TK_CLOSE
rule 154  sensor_elements -> sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 155  sensor_elements -> sensor_elements KW_COND condition
rule 156  sensor_elements -> sensor_elements KW_SENSE positive_atomic_effect_list
rule 157  sensor_elements ->		/* empty */
rule 158  @13 ->		/* empty */
rule 159  observable_decl -> TK_OPEN KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE
rule 160  observable_decl -> TK_OPEN KW_OBSERVABLE error TK_CLOSE
rule 161  fluent_list_decl -> fluent_list_decl fluent_decl
rule 162  fluent_list_decl -> fluent_decl
rule 163  fluent_decl -> positive_atomic_effect
rule 164  fluent_decl -> forall_effect
rule 165  @14 ->		/* empty */
rule 166  sticky_decl -> TK_OPEN KW_STICKY @14 fluent_list_decl TK_CLOSE
rule 167  sticky_decl -> TK_OPEN KW_STICKY error TK_CLOSE
rule 168  @15 ->		/* empty */
rule 169  multivalued_variable_decl -> TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE
rule 170  @16 ->		/* empty */
rule 171  multivalued_variable_decl -> TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE
rule 172  multivalued_variable_decl -> TK_OPEN KW_VARIABLE error TK_CLOSE
rule 173  multivalued_variable_type -> KW_VARIABLE
rule 174  multivalued_variable_type -> KW_OBS_VARIABLE
rule 175  domain_default_sensing -> TK_OPEN KW_DEFAULT_SENSING sensing TK_CLOSE
rule 176  @17 ->		/* empty */
rule 177  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE
rule 178  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE
rule 179  problem_elements -> problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE
rule 180  problem_elements -> problem_elements domain_requires
rule 181  problem_elements -> problem_elements domain_constants
rule 182  problem_elements -> problem_elements initial_state
rule 183  problem_elements -> problem_elements hidden_state
rule 184  problem_elements -> problem_elements goal_spec
rule 185  problem_elements ->		/* empty */
rule 186  initial_state -> TK_OPEN KW_INIT TK_CLOSE
rule 187  initial_state -> TK_OPEN KW_INIT init_elements TK_CLOSE
rule 188  initial_state -> TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE
rule 189  init_elements -> init_elements single_init_element
rule 190  init_elements -> single_init_element
rule 191  single_init_element -> literal
rule 192  single_init_element -> invariant
rule 193  single_init_element -> clause
rule 194  single_init_element -> oneof
rule 195  single_init_element -> unknown
rule 196  at_least_one_invariant -> TK_OPEN KW_INVARIANT single_condition_list TK_CLOSE
rule 197  at_least_one_invariant -> TK_OPEN KW_AT_LEAST_ONE single_condition_list TK_CLOSE
rule 198  at_most_one_invariant -> TK_OPEN KW_AT_MOST_ONE single_condition_list TK_CLOSE
rule 199  exactly_one_invariant -> TK_OPEN KW_EXACTLY_ONE single_condition_list TK_CLOSE
rule 200  invariant -> at_least_one_invariant
rule 201  invariant -> at_most_one_invariant
rule 202  invariant -> exactly_one_invariant
rule 203  clause -> TK_OPEN KW_OR single_condition_list TK_CLOSE
rule 205  oneof -> TK_OPEN KW_ONEOF single_condition_list TK_CLOSE
rule 206  unknown -> TK_OPEN KW_UNKNOWN positive_literal TK_CLOSE
rule 207  hidden_state -> TK_OPEN KW_HIDDEN init_elements TK_CLOSE
rule 208  hidden_state -> TK_OPEN KW_HIDDEN TK_CLOSE
rule 209  goal_spec -> TK_OPEN KW_GOAL condition TK_CLOSE

Terminals, with rules where they appear

$ (-1)
error (256) 5 30 35 39 77 142 143 146 153 160 167 172 178
TK_OPEN (258) 4 5 13 29 30 34 35 38 39 50 51 59 60 61 62 76 77 78 92
    93 94 98 99 102 105 111 117 120 121 137 138 139 140 141 142 143
    145 146 147 152 153 154 159 160 166 167 169 171 172 175 177 178
    179 186 187 188 196 197 198 199 203 204 205 206 207 208 209
TK_CLOSE (259) 4 5 13 29 30 34 35 38 39 50 51 59 60 61 62 76 77 78
    92 93 94 98 99 102 105 111 117 120 121 137 138 139 140 141 142
    143 145 146 147 152 153 154 159 160 166 167 169 171 172 175 177
    178 179 186 187 188 196 197 198 199 203 204 205 206 207 208 209
TK_OPEN_SQ (260)
TK_CLOSE_SQ (261)
TK_EQ (262) 93
TK_HYPHEN (263) 44 45 52 53 64
TK_NEW_SYMBOL (264) 14 23 25 27 38 53 58 67 68 169 171
TK_OBJ_SYMBOL (265) 15 96
TK_TYPE_SYMBOL (266) 16 44 45 52 57 64
TK_PRED_SYMBOL (267) 17 92
TK_VAR_SYMBOL (268) 18 49 95
TK_ACTION_SYMBOL (269) 19 24
TK_AXIOM_SYMBOL (270) 20 28
TK_SENSOR_SYMBOL (271) 21 26
TK_MISC_SYMBOL (272) 22
TK_KEYWORD (273) 32
TK_NEW_VAR_SYMBOL (274) 48
TK_VARNAME_SYMBOL (275) 138 139 140 141
TK_INT (276)
KW_REQS (277) 29 30
KW_TRANSLATION (278) 31
KW_CONSTANTS (279) 59 61
KW_PREDS (280) 34 35
KW_TYPES (281) 50 51
KW_DEFINE (282) 4 5 177 178
KW_DOMAIN (283) 13
KW_ACTION (284) 76 77
KW_ARGS (285) 78 147 154
KW_PRE (286) 79
KW_EFFECT (287) 80
KW_AND (288) 98 111 121 188 204
KW_OR (289) 99 203
KW_EXISTS (290) 105
KW_FORALL (291) 102 120 137
KW_NOT (292) 94
KW_WHEN (293) 117
KW_ONEOF (294) 205
KW_UNKNOWN (295) 206
KW_PROBLEM (296) 177 178
KW_FORDOMAIN (297) 179
KW_OBJECTS (298) 60 62
KW_INIT (299) 186 187 188
KW_GOAL (300) 209
KW_SENSOR (301) 152 153
KW_SENSE (302) 156
KW_OBSERVE (303) 81
KW_AXIOM (304) 145 146
KW_COND (305) 155
KW_OBSERVABLE (306) 159 160
KW_BODY (307) 148
KW_HEAD (308) 149
KW_STICKY (309) 166 167
KW_FLUENTS (310)
KW_HIDDEN (311) 207 208
KW_INVARIANT (312) 196
KW_AT_LEAST_ONE (313) 197
KW_AT_MOST_ONE (314) 198
KW_EXACTLY_ONE (315) 199
KW_VARIABLE (316) 140 141 142 172 173
KW_OBS_VARIABLE (317) 174
KW_VALUES (318)
KW_SENSING (319) 82
KW_DEFAULT_SENSING (320) 175
KW_MODEL_FOR (321) 138 139 143

Nonterminals, with rules where they appear

pddl_decls (67)
    on left: 1 2 3, on right: 1 2
pddl_domain (68)
    on left: 4 5, on right: 1
domain_elements (69)
    on left: 6 7 8 9 10 11 12, on right: 4 6 7 8 9 10 11
domain_name (70)
    on left: 13, on right: 4 5
any_symbol (71)
    on left: 14 15 16 17 18 19 20 21 22, on right: 13 177 179
action_symbol (72)
    on left: 23 24, on right: 76
sensor_symbol (73)
    on left: 25 26, on right: 152
axiom_symbol (74)
    on left: 27 28, on right: 145
domain_requires (75)
    on left: 29 30, on right: 6 180
require_list (76)
    on left: 31 32 33, on right: 29 31 32
domain_predicates (77)
    on left: 34 35, on right: 9
predicate_list (78)
    on left: 36 37, on right: 34 36
predicate_decl (79)
    on left: 38 39, on right: 36 37
param_list (80)
    on left: 40 41 42, on right: 38 78 102 105 120 137 147 154 171
untyped_param_list (81)
    on left: 43, on right: 40
typed_param_list (82)
    on left: 44 45, on right: 41 44
param_sym_list (83)
    on left: 46 47, on right: 43 44 45 46
new_var_symbol (84)
    on left: 48 49, on right: 46 47
domain_types (85)
    on left: 50 51, on right: 7
typed_type_list (86)
    on left: 52 53 54, on right: 51 52 53
primitive_type_list (87)
    on left: 55 56, on right: 50 52 53 55
primitive_type (88)
    on left: 57 58, on right: 55 56
domain_constants (89)
    on left: 59 60 61 62, on right: 8 181
typed_constant_list (90)
    on left: 64 65, on right: 59 60 64
@1 (91)
    on left: 63, on right: 64
untyped_constant_list (92)
    on left: 66, on right: 61 62
constant_sym_list (93)
    on left: 67 68, on right: 64 66 67
domain_schemas (94)
    on left: 69 70 71 72 73 74, on right: 10
action_decl (95)
    on left: 76 77, on right: 69
@2 (96)
    on left: 75, on right: 76
action_elements (97)
    on left: 78 79 80 81 82 83, on right: 76 78 79 80 81 82
condition (98)
    on left: 84 85 86 87 88, on right: 79 102 105 108 109 117 138 139
    148 155 209
single_condition (99)
    on left: 89, on right: 84 106 107
literal (100)
    on left: 90 91, on right: 89 127 138 139 191
positive_literal (101)
    on left: 92 93, on right: 90 94 128 206 212
negative_literal (102)
    on left: 94, on right: 91 213
argument_list (103)
    on left: 95 96 97, on right: 92 93 95 96 139 141
and_condition (104)
    on left: 98, on right: 85
or_condition (105)
    on left: 99, on right: 86
forall_condition (106)
    on left: 102, on right: 87
@3 (107)
    on left: 100, on right: 102
@4 (108)
    on left: 101, on right: 102
exists_condition (109)
    on left: 105, on right: 88
@5 (110)
    on left: 103, on right: 105
@6 (111)
    on left: 104, on right: 105
single_condition_list (112)
    on left: 106 107, on right: 106 196 197 198 199 203 204 205
condition_list (113)
    on left: 108 109, on right: 98 99 108
action_effect (114)
    on left: 110 111, on right: 80 120
action_effect_list (115)
    on left: 112 113, on right: 111 112
single_action_effect (116)
    on left: 114 115 116, on right: 110 112 113
conditional_effect (117)
    on left: 117, on right: 115
forall_effect (118)
    on left: 120, on right: 116 164
@7 (119)
    on left: 118, on right: 120
@8 (120)
    on left: 119, on right: 120
atomic_effect_kw_list (121)
    on left: 121 122, on right: 117 149
atomic_effect_list (122)
    on left: 123 124, on right: 121 123
positive_atomic_effect_list (123)
    on left: 125 126, on right: 81 125 156
atomic_effect (124)
    on left: 127, on right: 114 122 123 124
positive_atomic_effect (125)
    on left: 128, on right: 125 126 163
sensing (126)
    on left: 129 130, on right: 82 175
sensing_decl_list (127)
    on left: 131 132, on right: 129 131 137
sensing_decl (128)
    on left: 133 134, on right: 131 132
forall_sensing (129)
    on left: 137, on right: 134
@9 (130)
    on left: 135, on right: 137
@10 (131)
    on left: 136, on right: 137
sensing_model (132)
    on left: 138 139 140 141 142 143, on right: 133
axiom_decl (133)
    on left: 145 146, on right: 70
@11 (134)
    on left: 144, on right: 145
axiom_elements (135)
    on left: 147 148 149 150, on right: 145 147 148 149
sensor_decl (136)
    on left: 152 153, on right: 71
@12 (137)
    on left: 151, on right: 152
sensor_elements (138)
    on left: 154 155 156 157, on right: 152 154 155 156
observable_decl (139)
    on left: 159 160, on right: 72
@13 (140)
    on left: 158, on right: 159
fluent_list_decl (141)
    on left: 161 162, on right: 159 161 166 169 171
fluent_decl (142)
    on left: 163 164, on right: 161 162
sticky_decl (143)
    on left: 166 167, on right: 73
@14 (144)
    on left: 165, on right: 166
multivalued_variable_decl (145)
    on left: 169 171 172, on right: 74
@15 (146)
    on left: 168, on right: 169
@16 (147)
    on left: 170, on right: 171
multivalued_variable_type (148)
    on left: 173 174, on right: 169 171
domain_default_sensing (149)
    on left: 175, on right: 11
pddl_problem (150)
    on left: 177 178, on right: 2
@17 (151)
    on left: 176, on right: 177
problem_elements (152)
    on left: 179 180 181 182 183 184 185, on right: 177 179 180 181
    182 183 184
initial_state (153)
    on left: 186 187 188, on right: 182
init_elements (154)
    on left: 189 190, on right: 187 188 189 207
single_init_element (155)
    on left: 191 192 193 194 195, on right: 189 190
at_least_one_invariant (156)
    on left: 196 197, on right: 200
at_most_one_invariant (157)
    on left: 198, on right: 201
exactly_one_invariant (158)
    on left: 199, on right: 202
invariant (159)
    on left: 200 201 202, on right: 192
clause (160)
    on left: 203, on right: 193
oneof (161)
    on left: 205, on right: 194
unknown (162)
    on left: 206, on right: 195
hidden_state (163)
    on left: 207 208, on right: 183
goal_spec (164)
    on left: 209, on right: 184


state 0

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 378
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 1

    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 177)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 178)

    KW_DEFINE	shift, and go to state 4



state 2

    pddl_decls  ->  pddl_domain . pddl_decls   (rule 1)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 5
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 3

    pddl_decls  ->  pddl_problem . pddl_decls   (rule 2)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 6
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 4

    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 177)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 7

    domain_name	go to state 8



state 5

    pddl_decls  ->  pddl_domain pddl_decls .   (rule 1)

    $default	reduce using rule 1 (pddl_decls)



state 6

    pddl_decls  ->  pddl_problem pddl_decls .   (rule 2)

    $default	reduce using rule 2 (pddl_decls)



state 7

    domain_name  ->  TK_OPEN . KW_DOMAIN any_symbol TK_CLOSE   (rule 13)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 177)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM error TK_CLOSE   (rule 178)

    KW_DOMAIN	shift, and go to state 9
    KW_PROBLEM	shift, and go to state 10



state 8

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . error TK_CLOSE   (rule 5)

    error	shift, and go to state 11

    TK_OPEN	reduce using rule 12 (domain_elements)
    TK_CLOSE	reduce using rule 12 (domain_elements)
    KW_EXISTS	reduce using rule 12 (domain_elements)
    KW_FORALL	reduce using rule 12 (domain_elements)

    domain_elements	go to state 12



state 9

    domain_name  ->  TK_OPEN KW_DOMAIN . any_symbol TK_CLOSE   (rule 13)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 22



state 10

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 177)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . error TK_CLOSE   (rule 178)

    error	shift, and go to state 23
    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 24



state 11

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error . TK_CLOSE   (rule 5)

    TK_CLOSE	shift, and go to state 25



state 12

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements . TK_CLOSE   (rule 4)
    domain_elements  ->  domain_elements . domain_requires   (rule 6)
    domain_elements  ->  domain_elements . domain_types   (rule 7)
    domain_elements  ->  domain_elements . domain_constants   (rule 8)
    domain_elements  ->  domain_elements . domain_predicates   (rule 9)
    domain_elements  ->  domain_elements . domain_schemas   (rule 10)
    domain_elements  ->  domain_elements . domain_default_sensing   (rule 11)

    TK_OPEN	shift, and go to state 26
    TK_CLOSE	shift, and go to state 27

    domain_requires	go to state 28
    domain_predicates	go to state 29
    domain_types	go to state 30
    domain_constants	go to state 31
    domain_schemas	go to state 32
    action_decl	go to state 33
    axiom_decl	go to state 34
    sensor_decl	go to state 35
    observable_decl	go to state 36
    sticky_decl	go to state 37
    multivalued_variable_decl	go to state 38
    domain_default_sensing	go to state 39



state 13

    any_symbol  ->  TK_NEW_SYMBOL .   (rule 14)

    $default	reduce using rule 14 (any_symbol)



state 14

    any_symbol  ->  TK_OBJ_SYMBOL .   (rule 15)

    $default	reduce using rule 15 (any_symbol)



state 15

    any_symbol  ->  TK_TYPE_SYMBOL .   (rule 16)

    $default	reduce using rule 16 (any_symbol)



state 16

    any_symbol  ->  TK_PRED_SYMBOL .   (rule 17)

    $default	reduce using rule 17 (any_symbol)



state 17

    any_symbol  ->  TK_VAR_SYMBOL .   (rule 18)

    $default	reduce using rule 18 (any_symbol)



state 18

    any_symbol  ->  TK_ACTION_SYMBOL .   (rule 19)

    $default	reduce using rule 19 (any_symbol)



state 19

    any_symbol  ->  TK_AXIOM_SYMBOL .   (rule 20)

    $default	reduce using rule 20 (any_symbol)



state 20

    any_symbol  ->  TK_SENSOR_SYMBOL .   (rule 21)

    $default	reduce using rule 21 (any_symbol)



state 21

    any_symbol  ->  TK_MISC_SYMBOL .   (rule 22)

    $default	reduce using rule 22 (any_symbol)



state 22

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol . TK_CLOSE   (rule 13)

    TK_CLOSE	shift, and go to state 40



state 23

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error . TK_CLOSE   (rule 178)

    TK_CLOSE	shift, and go to state 41



state 24

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol . TK_CLOSE @17 problem_elements TK_CLOSE   (rule 177)

    TK_CLOSE	shift, and go to state 42



state 25

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error TK_CLOSE .   (rule 5)

    $default	reduce using rule 5 (pddl_domain)



state 26

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 30)
    domain_predicates  ->  TK_OPEN . KW_PREDS predicate_list TK_CLOSE   (rule 34)
    domain_predicates  ->  TK_OPEN . KW_PREDS error TK_CLOSE   (rule 35)
    domain_types  ->  TK_OPEN . KW_TYPES primitive_type_list TK_CLOSE   (rule 50)
    domain_types  ->  TK_OPEN . KW_TYPES typed_type_list TK_CLOSE   (rule 51)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 62)
    action_decl  ->  TK_OPEN . KW_ACTION action_symbol @2 action_elements TK_CLOSE   (rule 76)
    action_decl  ->  TK_OPEN . KW_ACTION error TK_CLOSE   (rule 77)
    axiom_decl  ->  TK_OPEN . KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE   (rule 145)
    axiom_decl  ->  TK_OPEN . KW_AXIOM error TK_CLOSE   (rule 146)
    sensor_decl  ->  TK_OPEN . KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE   (rule 152)
    sensor_decl  ->  TK_OPEN . KW_SENSOR error TK_CLOSE   (rule 153)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE   (rule 159)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE error TK_CLOSE   (rule 160)
    sticky_decl  ->  TK_OPEN . KW_STICKY @14 fluent_list_decl TK_CLOSE   (rule 166)
    sticky_decl  ->  TK_OPEN . KW_STICKY error TK_CLOSE   (rule 167)
    multivalued_variable_decl  ->  TK_OPEN . multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE   (rule 169)
    multivalued_variable_decl  ->  TK_OPEN . multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 171)
    multivalued_variable_decl  ->  TK_OPEN . KW_VARIABLE error TK_CLOSE   (rule 172)
    domain_default_sensing  ->  TK_OPEN . KW_DEFAULT_SENSING sensing TK_CLOSE   (rule 175)

    KW_REQS	shift, and go to state 43
    KW_CONSTANTS	shift, and go to state 44
    KW_PREDS	shift, and go to state 45
    KW_TYPES	shift, and go to state 46
    KW_ACTION	shift, and go to state 47
    KW_OBJECTS	shift, and go to state 48
    KW_SENSOR	shift, and go to state 49
    KW_AXIOM	shift, and go to state 50
    KW_OBSERVABLE	shift, and go to state 51
    KW_STICKY	shift, and go to state 52
    KW_VARIABLE	shift, and go to state 53
    KW_OBS_VARIABLE	shift, and go to state 54
    KW_DEFAULT_SENSING	shift, and go to state 55

    multivalued_variable_type	go to state 56



state 27

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE .   (rule 4)

    $default	reduce using rule 4 (pddl_domain)



state 28

    domain_elements  ->  domain_elements domain_requires .   (rule 6)

    $default	reduce using rule 6 (domain_elements)



state 29

    domain_elements  ->  domain_elements domain_predicates .   (rule 9)

    $default	reduce using rule 9 (domain_elements)



state 30

    domain_elements  ->  domain_elements domain_types .   (rule 7)

    $default	reduce using rule 7 (domain_elements)



state 31

    domain_elements  ->  domain_elements domain_constants .   (rule 8)

    $default	reduce using rule 8 (domain_elements)



state 32

    domain_elements  ->  domain_elements domain_schemas .   (rule 10)

    $default	reduce using rule 10 (domain_elements)



state 33

    domain_schemas  ->  action_decl .   (rule 69)

    $default	reduce using rule 69 (domain_schemas)



state 34

    domain_schemas  ->  axiom_decl .   (rule 70)

    $default	reduce using rule 70 (domain_schemas)



state 35

    domain_schemas  ->  sensor_decl .   (rule 71)

    $default	reduce using rule 71 (domain_schemas)



state 36

    domain_schemas  ->  observable_decl .   (rule 72)

    $default	reduce using rule 72 (domain_schemas)



state 37

    domain_schemas  ->  sticky_decl .   (rule 73)

    $default	reduce using rule 73 (domain_schemas)



state 38

    domain_schemas  ->  multivalued_variable_decl .   (rule 74)

    $default	reduce using rule 74 (domain_schemas)



state 39

    domain_elements  ->  domain_elements domain_default_sensing .   (rule 11)

    $default	reduce using rule 11 (domain_elements)



state 40

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol TK_CLOSE .   (rule 13)

    $default	reduce using rule 13 (domain_name)



state 41

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE .   (rule 178)

    $default	reduce using rule 178 (pddl_problem)



state 42

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE . @17 problem_elements TK_CLOSE   (rule 177)

    $default	reduce using rule 176 (@17)

    @17 	go to state 57



state 43

    domain_requires  ->  TK_OPEN KW_REQS . require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN KW_REQS . error TK_CLOSE   (rule 30)

    error	shift, and go to state 58

    TK_CLOSE	reduce using rule 33 (require_list)
    TK_KEYWORD	reduce using rule 33 (require_list)
    KW_TRANSLATION	reduce using rule 33 (require_list)
    KW_FORALL	reduce using rule 33 (require_list)
    KW_COND	reduce using rule 33 (require_list)
    KW_FLUENTS	reduce using rule 33 (require_list)

    require_list	go to state 59



state 44

    domain_constants  ->  TK_OPEN KW_CONSTANTS . typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN KW_CONSTANTS . untyped_constant_list TK_CLOSE   (rule 61)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 61
    untyped_constant_list	go to state 62
    constant_sym_list	go to state 63



state 45

    domain_predicates  ->  TK_OPEN KW_PREDS . predicate_list TK_CLOSE   (rule 34)
    domain_predicates  ->  TK_OPEN KW_PREDS . error TK_CLOSE   (rule 35)

    error	shift, and go to state 64
    TK_OPEN	shift, and go to state 65

    predicate_list	go to state 66
    predicate_decl	go to state 67



state 46

    domain_types  ->  TK_OPEN KW_TYPES . primitive_type_list TK_CLOSE   (rule 50)
    domain_types  ->  TK_OPEN KW_TYPES . typed_type_list TK_CLOSE   (rule 51)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 70
    primitive_type_list	go to state 71
    primitive_type	go to state 72



state 47

    action_decl  ->  TK_OPEN KW_ACTION . action_symbol @2 action_elements TK_CLOSE   (rule 76)
    action_decl  ->  TK_OPEN KW_ACTION . error TK_CLOSE   (rule 77)

    error	shift, and go to state 73
    TK_NEW_SYMBOL	shift, and go to state 74
    TK_ACTION_SYMBOL	shift, and go to state 75

    action_symbol	go to state 76



state 48

    domain_constants  ->  TK_OPEN KW_OBJECTS . typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN KW_OBJECTS . untyped_constant_list TK_CLOSE   (rule 62)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 77
    untyped_constant_list	go to state 78
    constant_sym_list	go to state 63



state 49

    sensor_decl  ->  TK_OPEN KW_SENSOR . sensor_symbol @12 sensor_elements TK_CLOSE   (rule 152)
    sensor_decl  ->  TK_OPEN KW_SENSOR . error TK_CLOSE   (rule 153)

    error	shift, and go to state 79
    TK_NEW_SYMBOL	shift, and go to state 80
    TK_SENSOR_SYMBOL	shift, and go to state 81

    sensor_symbol	go to state 82



state 50

    axiom_decl  ->  TK_OPEN KW_AXIOM . axiom_symbol @11 axiom_elements TK_CLOSE   (rule 145)
    axiom_decl  ->  TK_OPEN KW_AXIOM . error TK_CLOSE   (rule 146)

    error	shift, and go to state 83
    TK_NEW_SYMBOL	shift, and go to state 84
    TK_AXIOM_SYMBOL	shift, and go to state 85

    axiom_symbol	go to state 86



state 51

    observable_decl  ->  TK_OPEN KW_OBSERVABLE . @13 fluent_list_decl TK_CLOSE   (rule 159)
    observable_decl  ->  TK_OPEN KW_OBSERVABLE . error TK_CLOSE   (rule 160)

    error	shift, and go to state 87

    TK_OPEN	reduce using rule 158 (@13)
    KW_EXISTS	reduce using rule 158 (@13)

    @13 	go to state 88



state 52

    sticky_decl  ->  TK_OPEN KW_STICKY . @14 fluent_list_decl TK_CLOSE   (rule 166)
    sticky_decl  ->  TK_OPEN KW_STICKY . error TK_CLOSE   (rule 167)

    error	shift, and go to state 89

    TK_OPEN	reduce using rule 165 (@14)
    KW_EXISTS	reduce using rule 165 (@14)

    @14 	go to state 90



state 53

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE . error TK_CLOSE   (rule 172)
    multivalued_variable_type  ->  KW_VARIABLE .   (rule 173)

    error	shift, and go to state 91

    TK_OPEN	reduce using rule 173 (multivalued_variable_type)
    TK_NEW_SYMBOL	reduce using rule 173 (multivalued_variable_type)
    KW_EXISTS	reduce using rule 173 (multivalued_variable_type)
    KW_PROBLEM	reduce using rule 173 (multivalued_variable_type)



state 54

    multivalued_variable_type  ->  KW_OBS_VARIABLE .   (rule 174)

    $default	reduce using rule 174 (multivalued_variable_type)



state 55

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING . sensing TK_CLOSE   (rule 175)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 130 (sensing)

    sensing	go to state 93
    sensing_decl_list	go to state 94
    sensing_decl	go to state 95
    forall_sensing	go to state 96
    sensing_model	go to state 97



state 56

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type . TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE   (rule 169)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type . TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 171)

    TK_OPEN	shift, and go to state 98
    TK_NEW_SYMBOL	shift, and go to state 99



state 57

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 . problem_elements TK_CLOSE   (rule 177)

    $default	reduce using rule 185 (problem_elements)

    problem_elements	go to state 100



state 58

    domain_requires  ->  TK_OPEN KW_REQS error . TK_CLOSE   (rule 30)

    TK_CLOSE	shift, and go to state 101



state 59

    domain_requires  ->  TK_OPEN KW_REQS require_list . TK_CLOSE   (rule 29)
    require_list  ->  require_list . KW_TRANSLATION   (rule 31)
    require_list  ->  require_list . TK_KEYWORD   (rule 32)

    TK_CLOSE	shift, and go to state 102
    TK_KEYWORD	shift, and go to state 103
    KW_TRANSLATION	shift, and go to state 104



state 60

    constant_sym_list  ->  TK_NEW_SYMBOL .   (rule 68)

    $default	reduce using rule 68 (constant_sym_list)



state 61

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list . TK_CLOSE   (rule 59)

    TK_CLOSE	shift, and go to state 105



state 62

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list . TK_CLOSE   (rule 61)

    TK_CLOSE	shift, and go to state 106



state 63

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)
    untyped_constant_list  ->  constant_sym_list .   (rule 66)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 67)

    TK_HYPHEN	shift, and go to state 107
    TK_NEW_SYMBOL	shift, and go to state 108

    $default	reduce using rule 66 (untyped_constant_list)



state 64

    domain_predicates  ->  TK_OPEN KW_PREDS error . TK_CLOSE   (rule 35)

    TK_CLOSE	shift, and go to state 109



state 65

    predicate_decl  ->  TK_OPEN . TK_NEW_SYMBOL param_list TK_CLOSE   (rule 38)
    predicate_decl  ->  TK_OPEN . error TK_CLOSE   (rule 39)

    error	shift, and go to state 110
    TK_NEW_SYMBOL	shift, and go to state 111



state 66

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list . TK_CLOSE   (rule 34)
    predicate_list  ->  predicate_list . predicate_decl   (rule 36)

    TK_OPEN	shift, and go to state 65
    TK_CLOSE	shift, and go to state 112

    predicate_decl	go to state 113



state 67

    predicate_list  ->  predicate_decl .   (rule 37)

    $default	reduce using rule 37 (predicate_list)



state 68

    primitive_type  ->  TK_NEW_SYMBOL .   (rule 58)

    $default	reduce using rule 58 (primitive_type)



state 69

    primitive_type  ->  TK_TYPE_SYMBOL .   (rule 57)

    $default	reduce using rule 57 (primitive_type)



state 70

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list . TK_CLOSE   (rule 51)

    TK_CLOSE	shift, and go to state 114



state 71

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list . TK_CLOSE   (rule 50)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 53)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 55)

    TK_CLOSE	shift, and go to state 115
    TK_HYPHEN	shift, and go to state 116
    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    primitive_type	go to state 117



state 72

    primitive_type_list  ->  primitive_type .   (rule 56)

    $default	reduce using rule 56 (primitive_type_list)



state 73

    action_decl  ->  TK_OPEN KW_ACTION error . TK_CLOSE   (rule 77)

    TK_CLOSE	shift, and go to state 118



state 74

    action_symbol  ->  TK_NEW_SYMBOL .   (rule 23)

    $default	reduce using rule 23 (action_symbol)



state 75

    action_symbol  ->  TK_ACTION_SYMBOL .   (rule 24)

    $default	reduce using rule 24 (action_symbol)



state 76

    action_decl  ->  TK_OPEN KW_ACTION action_symbol . @2 action_elements TK_CLOSE   (rule 76)

    $default	reduce using rule 75 (@2)

    @2  	go to state 119



state 77

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list . TK_CLOSE   (rule 60)

    TK_CLOSE	shift, and go to state 120



state 78

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list . TK_CLOSE   (rule 62)

    TK_CLOSE	shift, and go to state 121



state 79

    sensor_decl  ->  TK_OPEN KW_SENSOR error . TK_CLOSE   (rule 153)

    TK_CLOSE	shift, and go to state 122



state 80

    sensor_symbol  ->  TK_NEW_SYMBOL .   (rule 25)

    $default	reduce using rule 25 (sensor_symbol)



state 81

    sensor_symbol  ->  TK_SENSOR_SYMBOL .   (rule 26)

    $default	reduce using rule 26 (sensor_symbol)



state 82

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol . @12 sensor_elements TK_CLOSE   (rule 152)

    $default	reduce using rule 151 (@12)

    @12 	go to state 123



state 83

    axiom_decl  ->  TK_OPEN KW_AXIOM error . TK_CLOSE   (rule 146)

    TK_CLOSE	shift, and go to state 124



state 84

    axiom_symbol  ->  TK_NEW_SYMBOL .   (rule 27)

    $default	reduce using rule 27 (axiom_symbol)



state 85

    axiom_symbol  ->  TK_AXIOM_SYMBOL .   (rule 28)

    $default	reduce using rule 28 (axiom_symbol)



state 86

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol . @11 axiom_elements TK_CLOSE   (rule 145)

    $default	reduce using rule 144 (@11)

    @11 	go to state 125



state 87

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error . TK_CLOSE   (rule 160)

    TK_CLOSE	shift, and go to state 126



state 88

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 . fluent_list_decl TK_CLOSE   (rule 159)

    TK_OPEN	shift, and go to state 127

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_list_decl	go to state 131
    fluent_decl	go to state 132



state 89

    sticky_decl  ->  TK_OPEN KW_STICKY error . TK_CLOSE   (rule 167)

    TK_CLOSE	shift, and go to state 133



state 90

    sticky_decl  ->  TK_OPEN KW_STICKY @14 . fluent_list_decl TK_CLOSE   (rule 166)

    TK_OPEN	shift, and go to state 127

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_list_decl	go to state 134
    fluent_decl	go to state 132



state 91

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE error . TK_CLOSE   (rule 172)

    TK_CLOSE	shift, and go to state 135



state 92

    forall_sensing  ->  TK_OPEN . KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 137)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE   (rule 138)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 139)
    sensing_model  ->  TK_OPEN . KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE   (rule 140)
    sensing_model  ->  TK_OPEN . KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 141)
    sensing_model  ->  TK_OPEN . KW_VARIABLE error TK_CLOSE   (rule 142)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR error TK_CLOSE   (rule 143)

    KW_FORALL	shift, and go to state 136
    KW_VARIABLE	shift, and go to state 137
    KW_MODEL_FOR	shift, and go to state 138



state 93

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING sensing . TK_CLOSE   (rule 175)

    TK_CLOSE	shift, and go to state 139



state 94

    sensing  ->  sensing_decl_list .   (rule 129)
    sensing_decl_list  ->  sensing_decl_list . sensing_decl   (rule 131)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 129 (sensing)

    sensing_decl	go to state 140
    forall_sensing	go to state 96
    sensing_model	go to state 97



state 95

    sensing_decl_list  ->  sensing_decl .   (rule 132)

    $default	reduce using rule 132 (sensing_decl_list)



state 96

    sensing_decl  ->  forall_sensing .   (rule 134)

    $default	reduce using rule 134 (sensing_decl)



state 97

    sensing_decl  ->  sensing_model .   (rule 133)

    $default	reduce using rule 133 (sensing_decl)



state 98

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN . TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 171)

    TK_NEW_SYMBOL	shift, and go to state 141



state 99

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL . @15 fluent_list_decl TK_CLOSE   (rule 169)

    $default	reduce using rule 168 (@15)

    @15 	go to state 142



state 100

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements . TK_CLOSE   (rule 177)
    problem_elements  ->  problem_elements . TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE   (rule 179)
    problem_elements  ->  problem_elements . domain_requires   (rule 180)
    problem_elements  ->  problem_elements . domain_constants   (rule 181)
    problem_elements  ->  problem_elements . initial_state   (rule 182)
    problem_elements  ->  problem_elements . hidden_state   (rule 183)
    problem_elements  ->  problem_elements . goal_spec   (rule 184)

    TK_OPEN	shift, and go to state 143
    TK_CLOSE	shift, and go to state 144

    domain_requires	go to state 145
    domain_constants	go to state 146
    initial_state	go to state 147
    hidden_state	go to state 148
    goal_spec	go to state 149



state 101

    domain_requires  ->  TK_OPEN KW_REQS error TK_CLOSE .   (rule 30)

    $default	reduce using rule 30 (domain_requires)



state 102

    domain_requires  ->  TK_OPEN KW_REQS require_list TK_CLOSE .   (rule 29)

    $default	reduce using rule 29 (domain_requires)



state 103

    require_list  ->  require_list TK_KEYWORD .   (rule 32)

    $default	reduce using rule 32 (require_list)



state 104

    require_list  ->  require_list KW_TRANSLATION .   (rule 31)

    $default	reduce using rule 31 (require_list)



state 105

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE .   (rule 59)

    $default	reduce using rule 59 (domain_constants)



state 106

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE .   (rule 61)

    $default	reduce using rule 61 (domain_constants)



state 107

    typed_constant_list  ->  constant_sym_list TK_HYPHEN . TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)

    TK_TYPE_SYMBOL	shift, and go to state 150



state 108

    constant_sym_list  ->  constant_sym_list TK_NEW_SYMBOL .   (rule 67)

    $default	reduce using rule 67 (constant_sym_list)



state 109

    domain_predicates  ->  TK_OPEN KW_PREDS error TK_CLOSE .   (rule 35)

    $default	reduce using rule 35 (domain_predicates)



state 110

    predicate_decl  ->  TK_OPEN error . TK_CLOSE   (rule 39)

    TK_CLOSE	shift, and go to state 151



state 111

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL . param_list TK_CLOSE   (rule 38)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 154
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 112

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list TK_CLOSE .   (rule 34)

    $default	reduce using rule 34 (domain_predicates)



state 113

    predicate_list  ->  predicate_list predicate_decl .   (rule 36)

    $default	reduce using rule 36 (predicate_list)



state 114

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list TK_CLOSE .   (rule 51)

    $default	reduce using rule 51 (domain_types)



state 115

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list TK_CLOSE .   (rule 50)

    $default	reduce using rule 50 (domain_types)



state 116

    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_NEW_SYMBOL typed_type_list   (rule 53)

    TK_NEW_SYMBOL	shift, and go to state 159
    TK_TYPE_SYMBOL	shift, and go to state 160



state 117

    primitive_type_list  ->  primitive_type_list primitive_type .   (rule 55)

    $default	reduce using rule 55 (primitive_type_list)



state 118

    action_decl  ->  TK_OPEN KW_ACTION error TK_CLOSE .   (rule 77)

    $default	reduce using rule 77 (action_decl)



state 119

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 . action_elements TK_CLOSE   (rule 76)

    $default	reduce using rule 83 (action_elements)

    action_elements	go to state 161



state 120

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE .   (rule 60)

    $default	reduce using rule 60 (domain_constants)



state 121

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE .   (rule 62)

    $default	reduce using rule 62 (domain_constants)



state 122

    sensor_decl  ->  TK_OPEN KW_SENSOR error TK_CLOSE .   (rule 153)

    $default	reduce using rule 153 (sensor_decl)



state 123

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 . sensor_elements TK_CLOSE   (rule 152)

    $default	reduce using rule 157 (sensor_elements)

    sensor_elements	go to state 162



state 124

    axiom_decl  ->  TK_OPEN KW_AXIOM error TK_CLOSE .   (rule 146)

    $default	reduce using rule 146 (axiom_decl)



state 125

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 . axiom_elements TK_CLOSE   (rule 145)

    $default	reduce using rule 150 (axiom_elements)

    axiom_elements	go to state 163



state 126

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error TK_CLOSE .   (rule 160)

    $default	reduce using rule 160 (observable_decl)



state 127

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 120)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_FORALL	shift, and go to state 166



state 128

    positive_atomic_effect  ->  positive_literal .   (rule 128)

    $default	reduce using rule 128 (positive_atomic_effect)



state 129

    fluent_decl  ->  forall_effect .   (rule 164)

    $default	reduce using rule 164 (fluent_decl)



state 130

    fluent_decl  ->  positive_atomic_effect .   (rule 163)

    $default	reduce using rule 163 (fluent_decl)



state 131

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 fluent_list_decl . TK_CLOSE   (rule 159)
    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 161)

    TK_OPEN	shift, and go to state 127
    TK_CLOSE	shift, and go to state 167

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_decl	go to state 168



state 132

    fluent_list_decl  ->  fluent_decl .   (rule 162)

    $default	reduce using rule 162 (fluent_list_decl)



state 133

    sticky_decl  ->  TK_OPEN KW_STICKY error TK_CLOSE .   (rule 167)

    $default	reduce using rule 167 (sticky_decl)



state 134

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 161)
    sticky_decl  ->  TK_OPEN KW_STICKY @14 fluent_list_decl . TK_CLOSE   (rule 166)

    TK_OPEN	shift, and go to state 127
    TK_CLOSE	shift, and go to state 169

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_decl	go to state 168



state 135

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE error TK_CLOSE .   (rule 172)

    $default	reduce using rule 172 (multivalued_variable_decl)



state 136

    forall_sensing  ->  TK_OPEN KW_FORALL . TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 137)

    TK_OPEN	shift, and go to state 170



state 137

    sensing_model  ->  TK_OPEN KW_VARIABLE . TK_VARNAME_SYMBOL TK_CLOSE   (rule 140)
    sensing_model  ->  TK_OPEN KW_VARIABLE . TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 141)
    sensing_model  ->  TK_OPEN KW_VARIABLE . error TK_CLOSE   (rule 142)

    error	shift, and go to state 171
    TK_OPEN	shift, and go to state 172
    TK_VARNAME_SYMBOL	shift, and go to state 173



state 138

    sensing_model  ->  TK_OPEN KW_MODEL_FOR . TK_VARNAME_SYMBOL literal condition TK_CLOSE   (rule 138)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR . TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 139)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR . error TK_CLOSE   (rule 143)

    error	shift, and go to state 174
    TK_OPEN	shift, and go to state 175
    TK_VARNAME_SYMBOL	shift, and go to state 176



state 139

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING sensing TK_CLOSE .   (rule 175)

    $default	reduce using rule 175 (domain_default_sensing)



state 140

    sensing_decl_list  ->  sensing_decl_list sensing_decl .   (rule 131)

    $default	reduce using rule 131 (sensing_decl_list)



state 141

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL . param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 171)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 177
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 142

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 . fluent_list_decl TK_CLOSE   (rule 169)

    TK_OPEN	shift, and go to state 127

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_list_decl	go to state 178
    fluent_decl	go to state 132



state 143

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 30)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 62)
    problem_elements  ->  problem_elements TK_OPEN . KW_FORDOMAIN any_symbol TK_CLOSE   (rule 179)
    initial_state  ->  TK_OPEN . KW_INIT TK_CLOSE   (rule 186)
    initial_state  ->  TK_OPEN . KW_INIT init_elements TK_CLOSE   (rule 187)
    initial_state  ->  TK_OPEN . KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 188)
    hidden_state  ->  TK_OPEN . KW_HIDDEN init_elements TK_CLOSE   (rule 207)
    hidden_state  ->  TK_OPEN . KW_HIDDEN TK_CLOSE   (rule 208)
    goal_spec  ->  TK_OPEN . KW_GOAL condition TK_CLOSE   (rule 209)

    KW_REQS	shift, and go to state 43
    KW_CONSTANTS	shift, and go to state 44
    KW_FORDOMAIN	shift, and go to state 179
    KW_OBJECTS	shift, and go to state 48
    KW_INIT	shift, and go to state 180
    KW_GOAL	shift, and go to state 181
    KW_HIDDEN	shift, and go to state 182



state 144

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE .   (rule 177)

    $default	reduce using rule 177 (pddl_problem)



state 145

    problem_elements  ->  problem_elements domain_requires .   (rule 180)

    $default	reduce using rule 180 (problem_elements)



state 146

    problem_elements  ->  problem_elements domain_constants .   (rule 181)

    $default	reduce using rule 181 (problem_elements)



state 147

    problem_elements  ->  problem_elements initial_state .   (rule 182)

    $default	reduce using rule 182 (problem_elements)



state 148

    problem_elements  ->  problem_elements hidden_state .   (rule 183)

    $default	reduce using rule 183 (problem_elements)



state 149

    problem_elements  ->  problem_elements goal_spec .   (rule 184)

    $default	reduce using rule 184 (problem_elements)



state 150

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL . @1 typed_constant_list   (rule 64)

    $default	reduce using rule 63 (@1)

    @1  	go to state 183



state 151

    predicate_decl  ->  TK_OPEN error TK_CLOSE .   (rule 39)

    $default	reduce using rule 39 (predicate_decl)



state 152

    new_var_symbol  ->  TK_VAR_SYMBOL .   (rule 49)

    $default	reduce using rule 49 (new_var_symbol)



state 153

    new_var_symbol  ->  TK_NEW_VAR_SYMBOL .   (rule 48)

    $default	reduce using rule 48 (new_var_symbol)



state 154

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list . TK_CLOSE   (rule 38)

    TK_CLOSE	shift, and go to state 184



state 155

    param_list  ->  untyped_param_list .   (rule 40)

    $default	reduce using rule 40 (param_list)



state 156

    param_list  ->  typed_param_list .   (rule 41)

    $default	reduce using rule 41 (param_list)



state 157

    untyped_param_list  ->  param_sym_list .   (rule 43)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 45)

    TK_HYPHEN	shift, and go to state 185

    $default	reduce using rule 43 (untyped_param_list)



state 158

    param_sym_list  ->  new_var_symbol . param_sym_list   (rule 46)
    param_sym_list  ->  new_var_symbol .   (rule 47)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 47 (param_sym_list)

    param_sym_list	go to state 186
    new_var_symbol	go to state 158



state 159

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL . typed_type_list   (rule 53)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 187
    primitive_type_list	go to state 188
    primitive_type	go to state 72



state 160

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL . typed_type_list   (rule 52)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 189
    primitive_type_list	go to state 188
    primitive_type	go to state 72



state 161

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements . TK_CLOSE   (rule 76)
    action_elements  ->  action_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 78)
    action_elements  ->  action_elements . KW_PRE condition   (rule 79)
    action_elements  ->  action_elements . KW_EFFECT action_effect   (rule 80)
    action_elements  ->  action_elements . KW_OBSERVE positive_atomic_effect_list   (rule 81)
    action_elements  ->  action_elements . KW_SENSING sensing   (rule 82)

    TK_CLOSE	shift, and go to state 190
    KW_ARGS	shift, and go to state 191
    KW_PRE	shift, and go to state 192
    KW_EFFECT	shift, and go to state 193
    KW_OBSERVE	shift, and go to state 194
    KW_SENSING	shift, and go to state 195



state 162

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements . TK_CLOSE   (rule 152)
    sensor_elements  ->  sensor_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 154)
    sensor_elements  ->  sensor_elements . KW_COND condition   (rule 155)
    sensor_elements  ->  sensor_elements . KW_SENSE positive_atomic_effect_list   (rule 156)

    TK_CLOSE	shift, and go to state 196
    KW_ARGS	shift, and go to state 197
    KW_SENSE	shift, and go to state 198
    KW_COND	shift, and go to state 199



state 163

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements . TK_CLOSE   (rule 145)
    axiom_elements  ->  axiom_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 147)
    axiom_elements  ->  axiom_elements . KW_BODY condition   (rule 148)
    axiom_elements  ->  axiom_elements . KW_HEAD atomic_effect_kw_list   (rule 149)

    TK_CLOSE	shift, and go to state 200
    KW_ARGS	shift, and go to state 201
    KW_BODY	shift, and go to state 202
    KW_HEAD	shift, and go to state 203



state 164

    positive_literal  ->  TK_OPEN TK_EQ . argument_list TK_CLOSE   (rule 93)

    $default	reduce using rule 97 (argument_list)

    argument_list	go to state 204



state 165

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL . argument_list TK_CLOSE   (rule 92)

    $default	reduce using rule 97 (argument_list)

    argument_list	go to state 205



state 166

    forall_effect  ->  TK_OPEN KW_FORALL . TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 120)

    TK_OPEN	shift, and go to state 206



state 167

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE .   (rule 159)

    $default	reduce using rule 159 (observable_decl)



state 168

    fluent_list_decl  ->  fluent_list_decl fluent_decl .   (rule 161)

    $default	reduce using rule 161 (fluent_list_decl)



state 169

    sticky_decl  ->  TK_OPEN KW_STICKY @14 fluent_list_decl TK_CLOSE .   (rule 166)

    $default	reduce using rule 166 (sticky_decl)



state 170

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN . @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 137)

    $default	reduce using rule 135 (@9)

    @9  	go to state 207



state 171

    sensing_model  ->  TK_OPEN KW_VARIABLE error . TK_CLOSE   (rule 142)

    TK_CLOSE	shift, and go to state 208



state 172

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN . TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 141)

    TK_VARNAME_SYMBOL	shift, and go to state 209



state 173

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL . TK_CLOSE   (rule 140)

    TK_CLOSE	shift, and go to state 210



state 174

    sensing_model  ->  TK_OPEN KW_MODEL_FOR error . TK_CLOSE   (rule 143)

    TK_CLOSE	shift, and go to state 211



state 175

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN . TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 139)

    TK_VARNAME_SYMBOL	shift, and go to state 212



state 176

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL . literal condition TK_CLOSE   (rule 138)

    TK_OPEN	shift, and go to state 213

    literal	go to state 214
    positive_literal	go to state 215
    negative_literal	go to state 216



state 177

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list . TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 171)

    TK_CLOSE	shift, and go to state 217



state 178

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 161)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl . TK_CLOSE   (rule 169)

    TK_OPEN	shift, and go to state 127
    TK_CLOSE	shift, and go to state 218

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_decl	go to state 168



state 179

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN . any_symbol TK_CLOSE   (rule 179)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 219



state 180

    initial_state  ->  TK_OPEN KW_INIT . TK_CLOSE   (rule 186)
    initial_state  ->  TK_OPEN KW_INIT . init_elements TK_CLOSE   (rule 187)
    initial_state  ->  TK_OPEN KW_INIT . TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 188)

    TK_OPEN	shift, and go to state 220
    TK_CLOSE	shift, and go to state 221

    literal	go to state 222
    positive_literal	go to state 215
    negative_literal	go to state 216
    init_elements	go to state 223
    single_init_element	go to state 224
    at_least_one_invariant	go to state 225
    at_most_one_invariant	go to state 226
    exactly_one_invariant	go to state 227
    invariant	go to state 228
    clause	go to state 229
    oneof	go to state 230
    unknown	go to state 231



state 181

    goal_spec  ->  TK_OPEN KW_GOAL . condition TK_CLOSE   (rule 209)

    TK_OPEN	shift, and go to state 232

    condition	go to state 233
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 182

    hidden_state  ->  TK_OPEN KW_HIDDEN . init_elements TK_CLOSE   (rule 207)
    hidden_state  ->  TK_OPEN KW_HIDDEN . TK_CLOSE   (rule 208)

    TK_OPEN	shift, and go to state 240
    TK_CLOSE	shift, and go to state 241

    literal	go to state 222
    positive_literal	go to state 215
    negative_literal	go to state 216
    init_elements	go to state 242
    single_init_element	go to state 224
    at_least_one_invariant	go to state 225
    at_most_one_invariant	go to state 226
    exactly_one_invariant	go to state 227
    invariant	go to state 228
    clause	go to state 229
    oneof	go to state 230
    unknown	go to state 231



state 183

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 . typed_constant_list   (rule 64)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 243
    constant_sym_list	go to state 244



state 184

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE .   (rule 38)

    $default	reduce using rule 38 (predicate_decl)



state 185

    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL   (rule 45)

    TK_TYPE_SYMBOL	shift, and go to state 245



state 186

    param_sym_list  ->  new_var_symbol param_sym_list .   (rule 46)

    $default	reduce using rule 46 (param_sym_list)



state 187

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list .   (rule 53)

    $default	reduce using rule 53 (typed_type_list)



state 188

    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 53)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 55)

    TK_HYPHEN	shift, and go to state 116
    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    primitive_type	go to state 117



state 189

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list .   (rule 52)

    $default	reduce using rule 52 (typed_type_list)



state 190

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE .   (rule 76)

    $default	reduce using rule 76 (action_decl)



state 191

    action_elements  ->  action_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 78)

    TK_OPEN	shift, and go to state 246



state 192

    action_elements  ->  action_elements KW_PRE . condition   (rule 79)

    TK_OPEN	shift, and go to state 232

    condition	go to state 247
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 193

    action_elements  ->  action_elements KW_EFFECT . action_effect   (rule 80)

    TK_OPEN	shift, and go to state 248

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    action_effect	go to state 250
    single_action_effect	go to state 251
    conditional_effect	go to state 252
    forall_effect	go to state 253
    atomic_effect	go to state 254



state 194

    action_elements  ->  action_elements KW_OBSERVE . positive_atomic_effect_list   (rule 81)

    TK_OPEN	shift, and go to state 255

    positive_literal	go to state 128
    positive_atomic_effect_list	go to state 256
    positive_atomic_effect	go to state 257



state 195

    action_elements  ->  action_elements KW_SENSING . sensing   (rule 82)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 130 (sensing)

    sensing	go to state 258
    sensing_decl_list	go to state 94
    sensing_decl	go to state 95
    forall_sensing	go to state 96
    sensing_model	go to state 97



state 196

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE .   (rule 152)

    $default	reduce using rule 152 (sensor_decl)



state 197

    sensor_elements  ->  sensor_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 154)

    TK_OPEN	shift, and go to state 259



state 198

    sensor_elements  ->  sensor_elements KW_SENSE . positive_atomic_effect_list   (rule 156)

    TK_OPEN	shift, and go to state 255

    positive_literal	go to state 128
    positive_atomic_effect_list	go to state 260
    positive_atomic_effect	go to state 257



state 199

    sensor_elements  ->  sensor_elements KW_COND . condition   (rule 155)

    TK_OPEN	shift, and go to state 232

    condition	go to state 261
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 200

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE .   (rule 145)

    $default	reduce using rule 145 (axiom_decl)



state 201

    axiom_elements  ->  axiom_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 147)

    TK_OPEN	shift, and go to state 262



state 202

    axiom_elements  ->  axiom_elements KW_BODY . condition   (rule 148)

    TK_OPEN	shift, and go to state 232

    condition	go to state 263
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 203

    axiom_elements  ->  axiom_elements KW_HEAD . atomic_effect_kw_list   (rule 149)

    TK_OPEN	shift, and go to state 264

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    atomic_effect_kw_list	go to state 265
    atomic_effect	go to state 266



state 204

    positive_literal  ->  TK_OPEN TK_EQ argument_list . TK_CLOSE   (rule 93)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 95)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 96)

    TK_CLOSE	shift, and go to state 267
    TK_OBJ_SYMBOL	shift, and go to state 268
    TK_VAR_SYMBOL	shift, and go to state 269



state 205

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list . TK_CLOSE   (rule 92)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 95)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 96)

    TK_CLOSE	shift, and go to state 270
    TK_OBJ_SYMBOL	shift, and go to state 268
    TK_VAR_SYMBOL	shift, and go to state 269



state 206

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN . @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 120)

    $default	reduce using rule 118 (@7)

    @7  	go to state 271



state 207

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 . param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 137)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 272
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 208

    sensing_model  ->  TK_OPEN KW_VARIABLE error TK_CLOSE .   (rule 142)

    $default	reduce using rule 142 (sensing_model)



state 209

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL . argument_list TK_CLOSE TK_CLOSE   (rule 141)

    $default	reduce using rule 97 (argument_list)

    argument_list	go to state 273



state 210

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE .   (rule 140)

    $default	reduce using rule 140 (sensing_model)



state 211

    sensing_model  ->  TK_OPEN KW_MODEL_FOR error TK_CLOSE .   (rule 143)

    $default	reduce using rule 143 (sensing_model)



state 212

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL . argument_list TK_CLOSE literal condition TK_CLOSE   (rule 139)

    $default	reduce using rule 97 (argument_list)

    argument_list	go to state 274



state 213

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 94)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_NOT	shift, and go to state 275



state 214

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal . condition TK_CLOSE   (rule 138)

    TK_OPEN	shift, and go to state 232

    condition	go to state 276
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 215

    literal  ->  positive_literal .   (rule 90)

    $default	reduce using rule 90 (literal)



state 216

    literal  ->  negative_literal .   (rule 91)

    $default	reduce using rule 91 (literal)



state 217

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE . @16 fluent_list_decl TK_CLOSE   (rule 171)

    $default	reduce using rule 170 (@16)

    @16 	go to state 277



state 218

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE .   (rule 169)

    $default	reduce using rule 169 (multivalued_variable_decl)



state 219

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol . TK_CLOSE   (rule 179)

    TK_CLOSE	shift, and go to state 278



state 220

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 94)
    initial_state  ->  TK_OPEN KW_INIT TK_OPEN . KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 188)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT single_condition_list TK_CLOSE   (rule 196)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE single_condition_list TK_CLOSE   (rule 197)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE single_condition_list TK_CLOSE   (rule 198)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE single_condition_list TK_CLOSE   (rule 199)
    clause  ->  TK_OPEN . KW_OR single_condition_list TK_CLOSE   (rule 203)
    oneof  ->  TK_OPEN . KW_ONEOF single_condition_list TK_CLOSE   (rule 205)
    unknown  ->  TK_OPEN . KW_UNKNOWN positive_literal TK_CLOSE   (rule 206)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_AND	shift, and go to state 279
    KW_OR	shift, and go to state 280
    KW_NOT	shift, and go to state 275
    KW_ONEOF	shift, and go to state 281
    KW_UNKNOWN	shift, and go to state 282
    KW_INVARIANT	shift, and go to state 283
    KW_AT_LEAST_ONE	shift, and go to state 284
    KW_AT_MOST_ONE	shift, and go to state 285
    KW_EXACTLY_ONE	shift, and go to state 286



state 221

    initial_state  ->  TK_OPEN KW_INIT TK_CLOSE .   (rule 186)

    $default	reduce using rule 186 (initial_state)



state 222

    single_init_element  ->  literal .   (rule 191)

    $default	reduce using rule 191 (single_init_element)



state 223

    initial_state  ->  TK_OPEN KW_INIT init_elements . TK_CLOSE   (rule 187)
    init_elements  ->  init_elements . single_init_element   (rule 189)

    TK_OPEN	shift, and go to state 240
    TK_CLOSE	shift, and go to state 287

    literal	go to state 222
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_init_element	go to state 288
    at_least_one_invariant	go to state 225
    at_most_one_invariant	go to state 226
    exactly_one_invariant	go to state 227
    invariant	go to state 228
    clause	go to state 229
    oneof	go to state 230
    unknown	go to state 231



state 224

    init_elements  ->  single_init_element .   (rule 190)

    $default	reduce using rule 190 (init_elements)



state 225

    invariant  ->  at_least_one_invariant .   (rule 200)

    $default	reduce using rule 200 (invariant)



state 226

    invariant  ->  at_most_one_invariant .   (rule 201)

    $default	reduce using rule 201 (invariant)



state 227

    invariant  ->  exactly_one_invariant .   (rule 202)

    $default	reduce using rule 202 (invariant)



state 228

    single_init_element  ->  invariant .   (rule 192)

    $default	reduce using rule 192 (single_init_element)



state 229

    single_init_element  ->  clause .   (rule 193)

    $default	reduce using rule 193 (single_init_element)



state 230

    single_init_element  ->  oneof .   (rule 194)

    $default	reduce using rule 194 (single_init_element)



state 231

    single_init_element  ->  unknown .   (rule 195)

    $default	reduce using rule 195 (single_init_element)



state 232

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 94)
    and_condition  ->  TK_OPEN . KW_AND condition_list TK_CLOSE   (rule 98)
    or_condition  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 99)
    forall_condition  ->  TK_OPEN . KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 102)
    exists_condition  ->  TK_OPEN . KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 105)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_AND	shift, and go to state 289
    KW_OR	shift, and go to state 290
    KW_EXISTS	shift, and go to state 291
    KW_FORALL	shift, and go to state 292
    KW_NOT	shift, and go to state 275



state 233

    goal_spec  ->  TK_OPEN KW_GOAL condition . TK_CLOSE   (rule 209)

    TK_CLOSE	shift, and go to state 293



state 234

    condition  ->  single_condition .   (rule 84)

    $default	reduce using rule 84 (condition)



state 235

    single_condition  ->  literal .   (rule 89)

    $default	reduce using rule 89 (single_condition)



state 236

    condition  ->  and_condition .   (rule 85)

    $default	reduce using rule 85 (condition)



state 237

    condition  ->  or_condition .   (rule 86)

    $default	reduce using rule 86 (condition)



state 238

    condition  ->  forall_condition .   (rule 87)

    $default	reduce using rule 87 (condition)



state 239

    condition  ->  exists_condition .   (rule 88)

    $default	reduce using rule 88 (condition)



state 240

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 94)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT single_condition_list TK_CLOSE   (rule 196)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE single_condition_list TK_CLOSE   (rule 197)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE single_condition_list TK_CLOSE   (rule 198)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE single_condition_list TK_CLOSE   (rule 199)
    clause  ->  TK_OPEN . KW_OR single_condition_list TK_CLOSE   (rule 203)
    oneof  ->  TK_OPEN . KW_ONEOF single_condition_list TK_CLOSE   (rule 205)
    unknown  ->  TK_OPEN . KW_UNKNOWN positive_literal TK_CLOSE   (rule 206)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_OR	shift, and go to state 280
    KW_NOT	shift, and go to state 275
    KW_ONEOF	shift, and go to state 281
    KW_UNKNOWN	shift, and go to state 282
    KW_INVARIANT	shift, and go to state 283
    KW_AT_LEAST_ONE	shift, and go to state 284
    KW_AT_MOST_ONE	shift, and go to state 285
    KW_EXACTLY_ONE	shift, and go to state 286



state 241

    hidden_state  ->  TK_OPEN KW_HIDDEN TK_CLOSE .   (rule 208)

    $default	reduce using rule 208 (hidden_state)



state 242

    init_elements  ->  init_elements . single_init_element   (rule 189)
    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements . TK_CLOSE   (rule 207)

    TK_OPEN	shift, and go to state 240
    TK_CLOSE	shift, and go to state 294

    literal	go to state 222
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_init_element	go to state 288
    at_least_one_invariant	go to state 225
    at_most_one_invariant	go to state 226
    exactly_one_invariant	go to state 227
    invariant	go to state 228
    clause	go to state 229
    oneof	go to state 230
    unknown	go to state 231



state 243

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list .   (rule 64)

    $default	reduce using rule 64 (typed_constant_list)



state 244

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 67)

    TK_HYPHEN	shift, and go to state 107
    TK_NEW_SYMBOL	shift, and go to state 108



state 245

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL . typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL .   (rule 45)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 45 (typed_param_list)

    typed_param_list	go to state 295
    param_sym_list	go to state 296
    new_var_symbol	go to state 158



state 246

    action_elements  ->  action_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 78)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 297
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 247

    action_elements  ->  action_elements KW_PRE condition .   (rule 79)

    $default	reduce using rule 79 (action_elements)



state 248

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 94)
    action_effect  ->  TK_OPEN . KW_AND action_effect_list TK_CLOSE   (rule 111)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 117)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 120)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_AND	shift, and go to state 298
    KW_FORALL	shift, and go to state 166
    KW_NOT	shift, and go to state 275
    KW_WHEN	shift, and go to state 299



state 249

    atomic_effect  ->  literal .   (rule 127)

    $default	reduce using rule 127 (atomic_effect)



state 250

    action_elements  ->  action_elements KW_EFFECT action_effect .   (rule 80)

    $default	reduce using rule 80 (action_elements)



state 251

    action_effect  ->  single_action_effect .   (rule 110)

    $default	reduce using rule 110 (action_effect)



state 252

    single_action_effect  ->  conditional_effect .   (rule 115)

    $default	reduce using rule 115 (single_action_effect)



state 253

    single_action_effect  ->  forall_effect .   (rule 116)

    $default	reduce using rule 116 (single_action_effect)



state 254

    single_action_effect  ->  atomic_effect .   (rule 114)

    $default	reduce using rule 114 (single_action_effect)



state 255

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165



state 256

    action_elements  ->  action_elements KW_OBSERVE positive_atomic_effect_list .   (rule 81)
    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 125)

    TK_OPEN	shift, and go to state 255

    $default	reduce using rule 81 (action_elements)

    positive_literal	go to state 128
    positive_atomic_effect	go to state 300



state 257

    positive_atomic_effect_list  ->  positive_atomic_effect .   (rule 126)

    $default	reduce using rule 126 (positive_atomic_effect_list)



state 258

    action_elements  ->  action_elements KW_SENSING sensing .   (rule 82)

    $default	reduce using rule 82 (action_elements)



state 259

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 154)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 301
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 260

    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 125)
    sensor_elements  ->  sensor_elements KW_SENSE positive_atomic_effect_list .   (rule 156)

    TK_OPEN	shift, and go to state 255

    $default	reduce using rule 156 (sensor_elements)

    positive_literal	go to state 128
    positive_atomic_effect	go to state 300



state 261

    sensor_elements  ->  sensor_elements KW_COND condition .   (rule 155)

    $default	reduce using rule 155 (sensor_elements)



state 262

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 147)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 302
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 263

    axiom_elements  ->  axiom_elements KW_BODY condition .   (rule 148)

    $default	reduce using rule 148 (axiom_elements)



state 264

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 94)
    atomic_effect_kw_list  ->  TK_OPEN . KW_AND atomic_effect_list TK_CLOSE   (rule 121)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_AND	shift, and go to state 303
    KW_NOT	shift, and go to state 275



state 265

    axiom_elements  ->  axiom_elements KW_HEAD atomic_effect_kw_list .   (rule 149)

    $default	reduce using rule 149 (axiom_elements)



state 266

    atomic_effect_kw_list  ->  atomic_effect .   (rule 122)

    $default	reduce using rule 122 (atomic_effect_kw_list)



state 267

    positive_literal  ->  TK_OPEN TK_EQ argument_list TK_CLOSE .   (rule 93)

    $default	reduce using rule 93 (positive_literal)



state 268

    argument_list  ->  argument_list TK_OBJ_SYMBOL .   (rule 96)

    $default	reduce using rule 96 (argument_list)



state 269

    argument_list  ->  argument_list TK_VAR_SYMBOL .   (rule 95)

    $default	reduce using rule 95 (argument_list)



state 270

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE .   (rule 92)

    $default	reduce using rule 92 (positive_literal)



state 271

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 . param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 120)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 304
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 272

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list . TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 137)

    TK_CLOSE	shift, and go to state 305



state 273

    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 95)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 96)
    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list . TK_CLOSE TK_CLOSE   (rule 141)

    TK_CLOSE	shift, and go to state 306
    TK_OBJ_SYMBOL	shift, and go to state 268
    TK_VAR_SYMBOL	shift, and go to state 269



state 274

    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 95)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 96)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list . TK_CLOSE literal condition TK_CLOSE   (rule 139)

    TK_CLOSE	shift, and go to state 307
    TK_OBJ_SYMBOL	shift, and go to state 268
    TK_VAR_SYMBOL	shift, and go to state 269



state 275

    negative_literal  ->  TK_OPEN KW_NOT . positive_literal TK_CLOSE   (rule 94)

    TK_OPEN	shift, and go to state 255

    positive_literal	go to state 308



state 276

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition . TK_CLOSE   (rule 138)

    TK_CLOSE	shift, and go to state 309



state 277

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 . fluent_list_decl TK_CLOSE   (rule 171)

    TK_OPEN	shift, and go to state 127

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_list_decl	go to state 310
    fluent_decl	go to state 132



state 278

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE .   (rule 179)

    $default	reduce using rule 179 (problem_elements)



state 279

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND . init_elements TK_CLOSE TK_CLOSE   (rule 188)

    TK_OPEN	shift, and go to state 240

    literal	go to state 222
    positive_literal	go to state 215
    negative_literal	go to state 216
    init_elements	go to state 311
    single_init_element	go to state 224
    at_least_one_invariant	go to state 225
    at_most_one_invariant	go to state 226
    exactly_one_invariant	go to state 227
    invariant	go to state 228
    clause	go to state 229
    oneof	go to state 230
    unknown	go to state 231



state 280

    clause  ->  TK_OPEN KW_OR . single_condition_list TK_CLOSE   (rule 203)

    TK_OPEN	shift, and go to state 213

    single_condition	go to state 312
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_condition_list	go to state 313



state 281

    oneof  ->  TK_OPEN KW_ONEOF . single_condition_list TK_CLOSE   (rule 205)

    TK_OPEN	shift, and go to state 213

    single_condition	go to state 312
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_condition_list	go to state 314



state 282

    unknown  ->  TK_OPEN KW_UNKNOWN . positive_literal TK_CLOSE   (rule 206)

    TK_OPEN	shift, and go to state 255

    positive_literal	go to state 315



state 283

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT . single_condition_list TK_CLOSE   (rule 196)

    TK_OPEN	shift, and go to state 213

    single_condition	go to state 312
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_condition_list	go to state 316



state 284

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE . single_condition_list TK_CLOSE   (rule 197)

    TK_OPEN	shift, and go to state 213

    single_condition	go to state 312
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_condition_list	go to state 317



state 285

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE . single_condition_list TK_CLOSE   (rule 198)

    TK_OPEN	shift, and go to state 213

    single_condition	go to state 312
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_condition_list	go to state 318



state 286

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE . single_condition_list TK_CLOSE   (rule 199)

    TK_OPEN	shift, and go to state 213

    single_condition	go to state 312
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_condition_list	go to state 319



state 287

    initial_state  ->  TK_OPEN KW_INIT init_elements TK_CLOSE .   (rule 187)

    $default	reduce using rule 187 (initial_state)



state 288

    init_elements  ->  init_elements single_init_element .   (rule 189)

    $default	reduce using rule 189 (init_elements)



state 289

    and_condition  ->  TK_OPEN KW_AND . condition_list TK_CLOSE   (rule 98)

    TK_OPEN	shift, and go to state 232

    condition	go to state 320
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239
    condition_list	go to state 321



state 290

    or_condition  ->  TK_OPEN KW_OR . condition_list TK_CLOSE   (rule 99)

    TK_OPEN	shift, and go to state 232

    condition	go to state 320
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239
    condition_list	go to state 322



state 291

    exists_condition  ->  TK_OPEN KW_EXISTS . TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 105)

    TK_OPEN	shift, and go to state 323



state 292

    forall_condition  ->  TK_OPEN KW_FORALL . TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 102)

    TK_OPEN	shift, and go to state 324



state 293

    goal_spec  ->  TK_OPEN KW_GOAL condition TK_CLOSE .   (rule 209)

    $default	reduce using rule 209 (goal_spec)



state 294

    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements TK_CLOSE .   (rule 207)

    $default	reduce using rule 207 (hidden_state)



state 295

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list .   (rule 44)

    $default	reduce using rule 44 (typed_param_list)



state 296

    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 45)

    TK_HYPHEN	shift, and go to state 185



state 297

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 78)

    TK_CLOSE	shift, and go to state 325



state 298

    action_effect  ->  TK_OPEN KW_AND . action_effect_list TK_CLOSE   (rule 111)

    TK_OPEN	shift, and go to state 326

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    action_effect_list	go to state 327
    single_action_effect	go to state 328
    conditional_effect	go to state 252
    forall_effect	go to state 253
    atomic_effect	go to state 254



state 299

    conditional_effect  ->  TK_OPEN KW_WHEN . condition atomic_effect_kw_list TK_CLOSE   (rule 117)

    TK_OPEN	shift, and go to state 232

    condition	go to state 329
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 300

    positive_atomic_effect_list  ->  positive_atomic_effect_list positive_atomic_effect .   (rule 125)

    $default	reduce using rule 125 (positive_atomic_effect_list)



state 301

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 154)

    TK_CLOSE	shift, and go to state 330



state 302

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 147)

    TK_CLOSE	shift, and go to state 331



state 303

    atomic_effect_kw_list  ->  TK_OPEN KW_AND . atomic_effect_list TK_CLOSE   (rule 121)

    TK_OPEN	shift, and go to state 213

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    atomic_effect_list	go to state 332
    atomic_effect	go to state 333



state 304

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list . TK_CLOSE @8 action_effect TK_CLOSE   (rule 120)

    TK_CLOSE	shift, and go to state 334



state 305

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE . @10 sensing_decl_list TK_CLOSE   (rule 137)

    $default	reduce using rule 136 (@10)

    @10 	go to state 335



state 306

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE . TK_CLOSE   (rule 141)

    TK_CLOSE	shift, and go to state 336



state 307

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE . literal condition TK_CLOSE   (rule 139)

    TK_OPEN	shift, and go to state 213

    literal	go to state 337
    positive_literal	go to state 215
    negative_literal	go to state 216



state 308

    negative_literal  ->  TK_OPEN KW_NOT positive_literal . TK_CLOSE   (rule 94)

    TK_CLOSE	shift, and go to state 338



state 309

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE .   (rule 138)

    $default	reduce using rule 138 (sensing_model)



state 310

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 161)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl . TK_CLOSE   (rule 171)

    TK_OPEN	shift, and go to state 127
    TK_CLOSE	shift, and go to state 339

    positive_literal	go to state 128
    forall_effect	go to state 129
    positive_atomic_effect	go to state 130
    fluent_decl	go to state 168



state 311

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements . TK_CLOSE TK_CLOSE   (rule 188)
    init_elements  ->  init_elements . single_init_element   (rule 189)

    TK_OPEN	shift, and go to state 240
    TK_CLOSE	shift, and go to state 340

    literal	go to state 222
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_init_element	go to state 288
    at_least_one_invariant	go to state 225
    at_most_one_invariant	go to state 226
    exactly_one_invariant	go to state 227
    invariant	go to state 228
    clause	go to state 229
    oneof	go to state 230
    unknown	go to state 231



state 312

    single_condition_list  ->  single_condition .   (rule 107)

    $default	reduce using rule 107 (single_condition_list)



state 313

    single_condition_list  ->  single_condition_list . single_condition   (rule 106)
    clause  ->  TK_OPEN KW_OR single_condition_list . TK_CLOSE   (rule 203)

    TK_OPEN	shift, and go to state 213
    TK_CLOSE	shift, and go to state 341

    single_condition	go to state 342
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216



state 314

    single_condition_list  ->  single_condition_list . single_condition   (rule 106)
    oneof  ->  TK_OPEN KW_ONEOF single_condition_list . TK_CLOSE   (rule 205)

    TK_OPEN	shift, and go to state 213
    TK_CLOSE	shift, and go to state 343

    single_condition	go to state 342
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216



state 315

    unknown  ->  TK_OPEN KW_UNKNOWN positive_literal . TK_CLOSE   (rule 206)

    TK_CLOSE	shift, and go to state 344



state 316

    single_condition_list  ->  single_condition_list . single_condition   (rule 106)
    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT single_condition_list . TK_CLOSE   (rule 196)

    TK_OPEN	shift, and go to state 213
    TK_CLOSE	shift, and go to state 345

    single_condition	go to state 342
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216



state 317

    single_condition_list  ->  single_condition_list . single_condition   (rule 106)
    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE single_condition_list . TK_CLOSE   (rule 197)

    TK_OPEN	shift, and go to state 213
    TK_CLOSE	shift, and go to state 346

    single_condition	go to state 342
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216



state 318

    single_condition_list  ->  single_condition_list . single_condition   (rule 106)
    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE single_condition_list . TK_CLOSE   (rule 198)

    TK_OPEN	shift, and go to state 213
    TK_CLOSE	shift, and go to state 347

    single_condition	go to state 342
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216



state 319

    single_condition_list  ->  single_condition_list . single_condition   (rule 106)
    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE single_condition_list . TK_CLOSE   (rule 199)

    TK_OPEN	shift, and go to state 213
    TK_CLOSE	shift, and go to state 348

    single_condition	go to state 342
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216



state 320

    condition_list  ->  condition .   (rule 109)

    $default	reduce using rule 109 (condition_list)



state 321

    and_condition  ->  TK_OPEN KW_AND condition_list . TK_CLOSE   (rule 98)
    condition_list  ->  condition_list . condition   (rule 108)

    TK_OPEN	shift, and go to state 232
    TK_CLOSE	shift, and go to state 349

    condition	go to state 350
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 322

    or_condition  ->  TK_OPEN KW_OR condition_list . TK_CLOSE   (rule 99)
    condition_list  ->  condition_list . condition   (rule 108)

    TK_OPEN	shift, and go to state 232
    TK_CLOSE	shift, and go to state 351

    condition	go to state 350
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 323

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN . @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 105)

    $default	reduce using rule 103 (@5)

    @5  	go to state 352



state 324

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN . @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 102)

    $default	reduce using rule 100 (@3)

    @3  	go to state 353



state 325

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 78)

    $default	reduce using rule 78 (action_elements)



state 326

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 92)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 93)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 94)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 117)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 120)

    TK_EQ	shift, and go to state 164
    TK_PRED_SYMBOL	shift, and go to state 165
    KW_FORALL	shift, and go to state 166
    KW_NOT	shift, and go to state 275
    KW_WHEN	shift, and go to state 299



state 327

    action_effect  ->  TK_OPEN KW_AND action_effect_list . TK_CLOSE   (rule 111)
    action_effect_list  ->  action_effect_list . single_action_effect   (rule 112)

    TK_OPEN	shift, and go to state 326
    TK_CLOSE	shift, and go to state 354

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    single_action_effect	go to state 355
    conditional_effect	go to state 252
    forall_effect	go to state 253
    atomic_effect	go to state 254



state 328

    action_effect_list  ->  single_action_effect .   (rule 113)

    $default	reduce using rule 113 (action_effect_list)



state 329

    conditional_effect  ->  TK_OPEN KW_WHEN condition . atomic_effect_kw_list TK_CLOSE   (rule 117)

    TK_OPEN	shift, and go to state 264

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    atomic_effect_kw_list	go to state 356
    atomic_effect	go to state 266



state 330

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 154)

    $default	reduce using rule 154 (sensor_elements)



state 331

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 147)

    $default	reduce using rule 147 (axiom_elements)



state 332

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list . TK_CLOSE   (rule 121)
    atomic_effect_list  ->  atomic_effect_list . atomic_effect   (rule 123)

    TK_OPEN	shift, and go to state 213
    TK_CLOSE	shift, and go to state 357

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    atomic_effect	go to state 358



state 333

    atomic_effect_list  ->  atomic_effect .   (rule 124)

    $default	reduce using rule 124 (atomic_effect_list)



state 334

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE . @8 action_effect TK_CLOSE   (rule 120)

    $default	reduce using rule 119 (@8)

    @8  	go to state 359



state 335

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 . sensing_decl_list TK_CLOSE   (rule 137)

    TK_OPEN	shift, and go to state 92

    sensing_decl_list	go to state 360
    sensing_decl	go to state 95
    forall_sensing	go to state 96
    sensing_model	go to state 97



state 336

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE .   (rule 141)

    $default	reduce using rule 141 (sensing_model)



state 337

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal . condition TK_CLOSE   (rule 139)

    TK_OPEN	shift, and go to state 232

    condition	go to state 361
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 338

    negative_literal  ->  TK_OPEN KW_NOT positive_literal TK_CLOSE .   (rule 94)

    $default	reduce using rule 94 (negative_literal)



state 339

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE .   (rule 171)

    $default	reduce using rule 171 (multivalued_variable_decl)



state 340

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE . TK_CLOSE   (rule 188)

    TK_CLOSE	shift, and go to state 362



state 341

    clause  ->  TK_OPEN KW_OR single_condition_list TK_CLOSE .   (rule 203)

    $default	reduce using rule 203 (clause)



state 342

    single_condition_list  ->  single_condition_list single_condition .   (rule 106)

    $default	reduce using rule 106 (single_condition_list)



state 343

    oneof  ->  TK_OPEN KW_ONEOF single_condition_list TK_CLOSE .   (rule 205)

    $default	reduce using rule 205 (oneof)



state 344

    unknown  ->  TK_OPEN KW_UNKNOWN positive_literal TK_CLOSE .   (rule 206)

    $default	reduce using rule 206 (unknown)



state 345

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT single_condition_list TK_CLOSE .   (rule 196)

    $default	reduce using rule 196 (at_least_one_invariant)



state 346

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE single_condition_list TK_CLOSE .   (rule 197)

    $default	reduce using rule 197 (at_least_one_invariant)



state 347

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE single_condition_list TK_CLOSE .   (rule 198)

    $default	reduce using rule 198 (at_most_one_invariant)



state 348

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE single_condition_list TK_CLOSE .   (rule 199)

    $default	reduce using rule 199 (exactly_one_invariant)



state 349

    and_condition  ->  TK_OPEN KW_AND condition_list TK_CLOSE .   (rule 98)

    $default	reduce using rule 98 (and_condition)



state 350

    condition_list  ->  condition_list condition .   (rule 108)

    $default	reduce using rule 108 (condition_list)



state 351

    or_condition  ->  TK_OPEN KW_OR condition_list TK_CLOSE .   (rule 99)

    $default	reduce using rule 99 (or_condition)



state 352

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 . param_list TK_CLOSE @6 condition TK_CLOSE   (rule 105)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 363
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 353

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 . param_list TK_CLOSE @4 condition TK_CLOSE   (rule 102)

    TK_VAR_SYMBOL	shift, and go to state 152
    TK_NEW_VAR_SYMBOL	shift, and go to state 153

    $default	reduce using rule 42 (param_list)

    param_list	go to state 364
    untyped_param_list	go to state 155
    typed_param_list	go to state 156
    param_sym_list	go to state 157
    new_var_symbol	go to state 158



state 354

    action_effect  ->  TK_OPEN KW_AND action_effect_list TK_CLOSE .   (rule 111)

    $default	reduce using rule 111 (action_effect)



state 355

    action_effect_list  ->  action_effect_list single_action_effect .   (rule 112)

    $default	reduce using rule 112 (action_effect_list)



state 356

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list . TK_CLOSE   (rule 117)

    TK_CLOSE	shift, and go to state 365



state 357

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list TK_CLOSE .   (rule 121)

    $default	reduce using rule 121 (atomic_effect_kw_list)



state 358

    atomic_effect_list  ->  atomic_effect_list atomic_effect .   (rule 123)

    $default	reduce using rule 123 (atomic_effect_list)



state 359

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 . action_effect TK_CLOSE   (rule 120)

    TK_OPEN	shift, and go to state 248

    literal	go to state 249
    positive_literal	go to state 215
    negative_literal	go to state 216
    action_effect	go to state 366
    single_action_effect	go to state 251
    conditional_effect	go to state 252
    forall_effect	go to state 253
    atomic_effect	go to state 254



state 360

    sensing_decl_list  ->  sensing_decl_list . sensing_decl   (rule 131)
    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list . TK_CLOSE   (rule 137)

    TK_OPEN	shift, and go to state 92
    TK_CLOSE	shift, and go to state 367

    sensing_decl	go to state 140
    forall_sensing	go to state 96
    sensing_model	go to state 97



state 361

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition . TK_CLOSE   (rule 139)

    TK_CLOSE	shift, and go to state 368



state 362

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE .   (rule 188)

    $default	reduce using rule 188 (initial_state)



state 363

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list . TK_CLOSE @6 condition TK_CLOSE   (rule 105)

    TK_CLOSE	shift, and go to state 369



state 364

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list . TK_CLOSE @4 condition TK_CLOSE   (rule 102)

    TK_CLOSE	shift, and go to state 370



state 365

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE .   (rule 117)

    $default	reduce using rule 117 (conditional_effect)



state 366

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect . TK_CLOSE   (rule 120)

    TK_CLOSE	shift, and go to state 371



state 367

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE .   (rule 137)

    $default	reduce using rule 137 (forall_sensing)



state 368

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE .   (rule 139)

    $default	reduce using rule 139 (sensing_model)



state 369

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE . @6 condition TK_CLOSE   (rule 105)

    $default	reduce using rule 104 (@6)

    @6  	go to state 372



state 370

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE . @4 condition TK_CLOSE   (rule 102)

    $default	reduce using rule 101 (@4)

    @4  	go to state 373



state 371

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE .   (rule 120)

    $default	reduce using rule 120 (forall_effect)



state 372

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 . condition TK_CLOSE   (rule 105)

    TK_OPEN	shift, and go to state 232

    condition	go to state 374
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 373

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 . condition TK_CLOSE   (rule 102)

    TK_OPEN	shift, and go to state 232

    condition	go to state 375
    single_condition	go to state 234
    literal	go to state 235
    positive_literal	go to state 215
    negative_literal	go to state 216
    and_condition	go to state 236
    or_condition	go to state 237
    forall_condition	go to state 238
    exists_condition	go to state 239



state 374

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition . TK_CLOSE   (rule 105)

    TK_CLOSE	shift, and go to state 376



state 375

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition . TK_CLOSE   (rule 102)

    TK_CLOSE	shift, and go to state 377



state 376

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE .   (rule 105)

    $default	reduce using rule 105 (exists_condition)



state 377

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE .   (rule 102)

    $default	reduce using rule 102 (forall_condition)



state 378

    $   	go to state 379



state 379

    $   	go to state 380



state 380

    $default	accept
