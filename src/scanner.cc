#define YY_CHAR char
#line 1 "/usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
//#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "ppddl.lex"
#define INITIAL 0
#define YY_PDDL_Scanner_FLEX_SCANNER
#include "scanner.h"
#line 40 "ppddl.lex"
#line 196 "/usr/local/lib/flexskel.cc"

#define yy___stderr YY_PDDL_Scanner_ERRFILE
#define yy___text YY_PDDL_Scanner_TEXT
#define yy___leng YY_PDDL_Scanner_LENG
#define yy___in YY_PDDL_Scanner_IN
#define yy___out YY_PDDL_Scanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in ); \
		YY_PDDL_Scanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_PDDL_Scanner_DEBUG != 0
#define yy___flex_debug YY_PDDL_Scanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_PDDL_Scanner_ECHO
#define yy___input YY_PDDL_Scanner_INPUT
#define yy___fatal_error YY_PDDL_Scanner_FATAL_ERROR
#define yy___wrap YY_PDDL_Scanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_PDDL_Scanner_IFILE  *yy_input_file;

    YY_PDDL_Scanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_PDDL_Scanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_PDDL_Scanner_DEBUG != 0
int YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_PDDL_Scanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_PDDL_Scanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_PDDL_Scanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_PDDL_Scanner_CHAR *yy___text;
int yy___leng;

YY_PDDL_Scanner_IFILE  *yy___in = (YY_PDDL_Scanner_IFILE  *) 0;
YY_PDDL_Scanner_OFILE *yy___out = (YY_PDDL_Scanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_PDDL_Scanner_CHAR *yy_c_buf_p = (YY_PDDL_Scanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_PDDL_Scanner_ECHO_NOCODE
void YY_PDDL_Scanner_CLASS::yy___echo()
{YY_PDDL_Scanner_ECHO_CODE
}
#endif
#ifndef YY_PDDL_Scanner_INPUT_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_PDDL_Scanner_INPUT_CODE
}
#endif
#ifndef YY_PDDL_Scanner_FATAL_ERROR_NOCODE
void YY_PDDL_Scanner_CLASS::yy___fatal_error(const char *msg)
{YY_PDDL_Scanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_PDDL_Scanner_WRAP_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___wrap()
{YY_PDDL_Scanner_WRAP_CODE
}
#endif
void YY_PDDL_Scanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_PDDL_Scanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_PDDL_Scanner_DEBUG != 0
 YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
}

YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CLASS(YY_PDDL_Scanner_CONSTRUCTOR_PARAM) YY_PDDL_Scanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_PDDL_Scanner_CONSTRUCTOR_CODE;
}
YY_PDDL_Scanner_CLASS::~YY_PDDL_Scanner_CLASS() 
{YY_PDDL_Scanner_DESTRUCTOR_CODE;
 if(YY_PDDL_Scanner_CURRENT_BUFFER)
  YY_PDDL_Scanner_DELETE_BUFFER(YY_PDDL_Scanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 61
typedef int yy_state_type;
static const short int yy_accept[325] =
    {   0,
       59,   59,   61,   60,    1,    3,    4,    5,    8,   59,
       60,   60,    9,   60,    6,    7,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,    1,   59,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,    0,    2,   56,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   39,   58,   58,   58,   58,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       56,   56,   30,   58,   58,   58,   58,   58,   58,   58,

       33,   58,   58,   58,   58,   58,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   34,   57,   57,   28,   57,   57,   57,   57,
       57,   57,   47,   29,   57,   45,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       58,   58,   58,   58,   58,   58,   58,   58,   40,   58,
       58,   58,   57,   20,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   26,

       57,   57,   57,   57,   13,   57,   57,   58,   58,   10,
       11,   58,   31,   32,   58,   58,   58,   58,   19,   57,
       57,   57,   43,   24,   57,   46,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   21,   17,   57,   51,   57,
       58,   58,   58,   58,   42,   58,   41,   57,   57,   57,
       18,   57,   44,   57,   57,   27,   57,   57,   57,   57,
       52,   57,   57,   58,   58,   58,   58,   58,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   49,
       58,   58,   58,   35,   55,   25,   14,   57,   54,   57,
       57,   57,   57,   57,   57,   57,   58,   58,   58,   57,

       57,   16,   22,   57,   15,   57,   57,   58,   37,   38,
       57,   57,   57,   57,   48,   36,   57,   50,   23,   12,
       57,   57,   53,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        5,    1,    1,    1,    6,    1,    1,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,    9,    1,
       10,    1,   11,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   14,
       12,    1,   13,    1,   14,    1,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   14,    1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[40] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const short int yy_base[333] =
    {   0,
        0,    0,  495,  914,  467,  914,  914,  914,  459,  455,
       26,  444,  914,    0,  914,  914,   60,   62,   64,   66,
       68,   70,   72,   74,   78,   80,   85,  101,  440,  432,
       82,   88,   93,  105,  110,  112,  114,  118,  129,  121,
      124,  135,  131,  137,  148,  151,  153,  432,  914,  155,
        0,  158,  163,  165,  167,  169,  171,  173,  178,  182,
      185,  191,  193,  195,  200,  202,    0,  204,  211,  213,
      217,  220,  222,  224,  226,  231,  234,  237,  247,  249,
      251,  253,  255,  257,  261,  267,  273,  275,  264,  277,
        0,  282,  291,  273,  295,  298,  300,  304,  308,  313,

      315,  318,  320,  323,  325,  327,  333,  335,  337,  342,
      344,  351,  355,  361,  363,  365,  372,  375,  378,  380,
      385,  387,  389,  394,  404,  406,  408,  411,  413,  415,
      409,  387,  418,  420,  425,  427,  434,  438,  443,  445,
      447,  449,  451,  458,  461,  466,  468,  470,  473,  475,
      477,  479,  483,  486,  490,  493,  495,  499,  372,  504,
      506,  508,  511,  516,  519,  521,  523,  525,  534,  537,
      390,  370,  543,  548,  553,  557,  559,  561,  513,  563,
      364,  565,  567,  571,  574,  581,  585,  587,  591,  593,
      598,  600,  603,  373,  606,  610,  612,  614,  616,  626,

      628,  632,  637,  639,  643,  645,  647,  344,  339,  651,
      653,  655,  660,  662,  664,  666,  343,  668,  674,  676,
      678,  680,  682,  684,  691,  694,  343,  696,  322,  698,
      701,  703,  705,  709,  712,  716,  719,  724,  730,  734,
      318,  340,  736,  738,  740,  323,  742,  744,  746,  748,
      750,  306,  752,  293,  755,  757,  762,  768,  770,  772,
      776,  778,  781,  306,  279,  264,  783,  257,  786,  788,
      252,  246,  260,  790,  795,  799,  801,  803,  812,  817,
      221,  219,  211,  819,    0,  822,  824,  215,    0,  199,
      830,  832,  834,  836,  838,  841,  185,  184,  176,  165,

      140,  844,  846,  848,  852,  854,  856,  131,    0,    0,
      112,  114,  861,  865,  867,    0,   91,    0,  869,  872,
       81,   82,    0,  914,  898,   79,  900,  902,  904,  906,
      908,  910
    } ;

static const short int yy_def[333] =
    {   0,
      324,    1,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  325,  324,  326,  324,  324,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  324,  324,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  325,  324,  329,
      330,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  331,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      332,  329,  327,  330,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      330,  330,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  331,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      330,  330,  327,  327,  327,  327,  327,  327,  327,  327,
      330,  327,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  331,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  330,  330,  327,
      327,  327,  327,  327,  327,  327,  330,  327,  328,  328,
      328,  328,  328,  328,  328,  328,  331,  328,  331,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      330,  330,  327,  327,  327,  330,  327,  328,  328,  328,
      328,  331,  328,  331,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  330,  330,  330,  327,  330,  328,  328,
      331,  331,  331,  328,  328,  328,  328,  328,  328,  328,
      330,  330,  330,  327,  330,  328,  328,  331,  331,  331,
      328,  328,  328,  328,  328,  328,  330,  330,  330,  331,

      331,  328,  328,  328,  328,  328,  328,  330,  330,  330,
      331,  331,  328,  328,  328,  330,  331,  331,  328,  328,
      331,  331,  331,    0,  324,  324,  324,  324,  324,  324,
      324,  324
    } ;

static const short int yy_nxt[954] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   17,   17,   19,   20,   21,
       17,   17,   22,   17,   17,   17,   17,   23,   24,   25,
       17,   17,   26,   17,   27,   17,   28,   17,   17,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   31,
       31,   31,   41,   31,   42,   43,   31,   44,   45,   46,
       31,   47,   31,   31,   31,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   50,   55,   51,   51,   51,   51,   67,   67,   53,
       51,   51,   56,   67,   67,   54,   58,   59,   67,   67,

       60,   61,  323,   57,   69,   62,   51,   51,  322,   63,
       67,   67,   65,  321,   64,   67,   67,   67,   67,   67,
       67,   71,   66,   67,   67,   70,   67,   67,   73,   67,
       67,   75,  318,   72,   67,   67,   67,   67,   74,   76,
       67,   67,   67,   67,  317,   83,   77,   78,   80,  316,
       82,   79,   81,   67,   67,   85,   67,   67,   67,   67,
       91,   91,   84,   51,   51,  312,   86,   90,   51,   51,
       94,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       93,   87,   88,   51,   51,   97,   95,   51,   51,   89,
       51,   51,  311,   98,  310,   96,   51,   51,   51,   51,

       51,   51,  309,  102,   99,   51,   51,   51,   51,   67,
       67,  104,  308,  100,  301,  101,   67,   67,   67,   67,
      106,  103,   67,   67,  105,   67,   67,   67,   67,   67,
       67,   67,   67,  300,  109,  108,   67,   67,  299,   67,
       67,  111,   67,   67,  107,  113,  298,  110,  115,  297,
      112,  116,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,  117,  114,   67,   67,  119,   67,
       67,  118,   67,   67,  290,  123,  120,  289,   67,   67,
       67,   67,   67,   67,  288,  121,  122,   91,   91,  127,
      285,  124,  283,  128,  125,  126,   51,   51,  131,  132,

       51,   51,  129,   51,   51,   51,   51,  282,  130,   51,
       51,  281,  134,   51,   51,  273,  135,  133,   51,   51,
       51,   51,  137,   51,   51,   51,   51,  138,   51,   51,
       51,   51,   51,   51,  272,  140,  136,  268,   67,   67,
       67,   67,   67,   67,  141,  265,  139,   67,   67,   67,
       67,  264,  142,  254,  143,  144,   67,   67,  149,  147,
       67,   67,  252,  145,  246,  150,   67,   67,   67,   67,
       67,   67,  242,  151,  148,  146,  241,   67,   67,  152,
       67,   67,  154,   67,   67,   67,   67,  229,  153,  155,
      159,   67,   67,   67,   67,   67,  157,  217,  158,   67,

       67,  161,  209,  160,  208,  162,  163,  194,  156,   67,
       67,   67,   67,   67,   67,  172,   67,   67,   67,   67,
       67,   67,  166,   51,   51,   51,   51,  171,  164,  168,
       51,   51,   51,   51,   49,  167,  165,  170,   30,   51,
       51,   29,  174,   51,   51,  173,   49,  169,   51,   51,
       51,   51,  181,   51,   51,   51,   51,   51,  175,  177,
      176,   30,  179,   67,   67,   30,   67,   67,   29,  178,
      180,   67,   67,   67,   67,   67,   67,  182,   67,   67,
       67,   67,   67,   67,   67,   67,  183,  184,   67,   67,
      185,   67,   67,  189,  324,   67,   67,  188,   67,   67,

       67,   67,  324,  186,   67,   67,  190,  187,  191,   67,
       67,   67,   67,   67,   67,  193,   67,   67,   51,   51,
      192,   67,   67,  324,   67,   67,   67,   67,   67,   67,
       67,   67,  196,  198,  324,  195,  197,  200,  199,   67,
       67,  201,   67,   67,  324,  203,  324,  202,   51,   51,
      324,  207,  206,   51,   51,  204,  324,  205,   51,   51,
      324,  210,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   67,   67,  324,  211,   67,   67,  212,   67,
       67,  216,  324,  215,  214,  324,   67,   67,  324,  213,
       67,   67,   67,   67,  219,  221,   67,   67,   67,   67,

      324,  218,  324,   67,   67,  227,   67,  220,   67,   67,
      222,   67,   67,  324,  223,   67,   67,   67,   67,   67,
       67,   67,   67,  324,  224,  226,  225,  324,  231,  324,
      233,   67,   67,   67,   67,  324,  228,   67,   67,  232,
      324,  230,   67,   67,   67,   67,  324,  234,   67,   67,
       67,   67,   67,   67,  324,  235,   51,   51,   51,   51,
       51,   51,  240,  236,  238,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  237,  324,  239,  244,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,  324,  245,  243,  324,  247,   67,   67,  248,   67,

       67,   67,   67,   67,   67,  249,   67,   67,   67,   67,
       67,   67,  255,  250,   67,   67,  256,   67,   67,  259,
      258,   67,   67,  251,   67,   67,  324,  260,  253,   67,
       67,  324,  261,  324,  257,   67,   67,  324,  262,   67,
       67,  266,   51,   51,   51,   51,   51,   51,   51,   67,
       67,   67,   67,  271,   67,   67,   67,   67,   67,  263,
       67,   67,   67,   67,  324,  267,  324,   67,   67,  324,
      274,  324,  269,   67,   67,   67,   67,   67,   67,  270,
      275,   67,   67,   67,   67,  324,   67,   67,   51,   51,
      276,   67,   67,   67,   67,   67,   67,  324,  278,  280,

       67,   67,  324,  277,   67,   67,   67,   67,   67,   67,
      324,  279,  324,  286,  324,  291,  284,   67,   67,  294,
      287,  295,   67,   67,   51,   51,  292,   67,   67,   67,
       67,  324,  293,  324,  296,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,  324,   67,   67,  302,   67,
       67,   67,   67,   67,   67,  324,  304,   67,   67,   67,
       67,   67,   67,  324,  303,  306,   67,   67,  305,  307,
       67,   67,   67,   67,   67,   67,  313,   67,   67,  324,
      324,  324,  324,  315,  324,  324,  324,  314,  319,  324,
      324,  324,  324,  324,  324,  324,  324,  320,   48,   48,

       48,   52,   52,   68,   68,   92,   92,   51,   51,   67,
       67,   91,   91,    3,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324
    } ;

static const short int yy_chk[954] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   17,   17,   18,   18,   19,
       19,   20,   20,   21,   21,   22,   22,   23,   23,   24,
       24,  326,   19,   25,   25,   26,   26,   31,   31,   18,
       27,   27,   19,   32,   32,   18,   21,   22,   33,   33,

       23,   24,  322,   20,   32,   24,   28,   28,  321,   25,
       34,   34,   27,  317,   26,   35,   35,   36,   36,   37,
       37,   33,   28,   38,   38,   32,   40,   40,   35,   41,
       41,   36,  312,   34,   39,   39,   43,   43,   35,   37,
       42,   42,   44,   44,  311,   43,   38,   39,   40,  308,
       42,   39,   41,   45,   45,   44,   46,   46,   47,   47,
       50,   50,   43,   52,   52,  301,   45,   47,   53,   53,
       54,   54,   55,   55,   56,   56,   57,   57,   58,   58,
       53,   45,   46,   59,   59,   57,   55,   60,   60,   46,
       61,   61,  300,   57,  299,   56,   62,   62,   63,   63,

       64,   64,  298,   61,   58,   65,   65,   66,   66,   68,
       68,   64,  297,   59,  290,   60,   69,   69,   70,   70,
       66,   63,   71,   71,   65,   72,   72,   73,   73,   74,
       74,   75,   75,  288,   71,   70,   76,   76,  283,   77,
       77,   73,   78,   78,   69,   75,  282,   72,   77,  281,
       74,   78,   79,   79,   80,   80,   81,   81,   82,   82,
       83,   83,   84,   84,   79,   76,   85,   85,   81,   89,
       89,   80,   86,   86,  273,   84,   82,  272,   87,   87,
       88,   88,   90,   90,  271,   82,   83,   92,   92,   88,
      268,   85,  266,   89,   86,   87,   93,   93,   94,   94,

       95,   95,   90,   96,   96,   97,   97,  265,   90,   98,
       98,  264,   96,   99,   99,  254,   97,   95,  100,  100,
      101,  101,   99,  102,  102,  103,  103,  100,  104,  104,
      105,  105,  106,  106,  252,  103,   98,  246,  107,  107,
      108,  108,  109,  109,  104,  242,  102,  110,  110,  111,
      111,  241,  105,  229,  106,  107,  112,  112,  111,  110,
      113,  113,  227,  108,  217,  112,  114,  114,  115,  115,
      116,  116,  209,  113,  110,  109,  208,  117,  117,  114,
      118,  118,  116,  119,  119,  120,  120,  194,  115,  117,
      121,  121,  122,  122,  123,  123,  119,  181,  120,  124,

      124,  122,  172,  121,  171,  123,  123,  159,  118,  125,
      125,  126,  126,  127,  127,  132,  128,  128,  129,  129,
      130,  130,  126,  133,  133,  134,  134,  131,  124,  128,
      135,  135,  136,  136,   48,  127,  125,  130,   30,  137,
      137,   29,  134,  138,  138,  133,   12,  129,  139,  139,
      140,  140,  141,  141,  142,  142,  143,  143,  135,  137,
      136,   10,  139,  144,  144,    9,  145,  145,    5,  138,
      140,  146,  146,  147,  147,  148,  148,  142,  149,  149,
      150,  150,  151,  151,  152,  152,  144,  145,  153,  153,
      147,  154,  154,  151,    3,  155,  155,  150,  156,  156,

      157,  157,    0,  148,  158,  158,  152,  149,  155,  160,
      160,  161,  161,  162,  162,  158,  163,  163,  179,  179,
      157,  164,  164,    0,  165,  165,  166,  166,  167,  167,
      168,  168,  161,  163,    0,  160,  162,  165,  164,  169,
      169,  165,  170,  170,    0,  166,    0,  165,  173,  173,
        0,  170,  169,  174,  174,  167,    0,  168,  175,  175,
        0,  173,  176,  176,  177,  177,  178,  178,  180,  180,
      182,  182,  183,  183,    0,  174,  184,  184,  175,  185,
      185,  180,    0,  178,  177,    0,  186,  186,    0,  176,
      187,  187,  188,  188,  183,  186,  189,  189,  190,  190,

        0,  182,    0,  191,  191,  192,  192,  185,  193,  193,
      187,  195,  195,    0,  188,  196,  196,  197,  197,  198,
      198,  199,  199,    0,  189,  191,  190,    0,  196,    0,
      198,  200,  200,  201,  201,    0,  193,  202,  202,  197,
        0,  195,  203,  203,  204,  204,    0,  199,  205,  205,
      206,  206,  207,  207,    0,  201,  210,  210,  211,  211,
      212,  212,  207,  202,  204,  213,  213,  214,  214,  215,
      215,  216,  216,  218,  218,  203,    0,  206,  215,  219,
      219,  220,  220,  221,  221,  222,  222,  223,  223,  224,
      224,    0,  216,  212,    0,  218,  225,  225,  220,  226,

      226,  228,  228,  230,  230,  221,  231,  231,  232,  232,
      233,  233,  230,  222,  234,  234,  230,  235,  235,  233,
      232,  236,  236,  225,  237,  237,    0,  234,  228,  238,
      238,    0,  235,    0,  231,  239,  239,    0,  238,  240,
      240,  243,  243,  244,  244,  245,  245,  247,  247,  248,
      248,  249,  249,  250,  250,  251,  251,  253,  253,  240,
      255,  255,  256,  256,    0,  244,    0,  257,  257,    0,
      255,    0,  248,  258,  258,  259,  259,  260,  260,  249,
      257,  261,  261,  262,  262,    0,  263,  263,  267,  267,
      258,  269,  269,  270,  270,  274,  274,    0,  260,  263,

      275,  275,    0,  259,  276,  276,  277,  277,  278,  278,
        0,  262,    0,  269,    0,  274,  267,  279,  279,  277,
      270,  278,  280,  280,  284,  284,  275,  286,  286,  287,
      287,    0,  276,    0,  279,  291,  291,  292,  292,  293,
      293,  294,  294,  295,  295,    0,  296,  296,  291,  302,
      302,  303,  303,  304,  304,    0,  293,  305,  305,  306,
      306,  307,  307,    0,  292,  295,  313,  313,  294,  296,
      314,  314,  315,  315,  319,  319,  304,  320,  320,    0,
        0,    0,    0,  307,    0,    0,    0,  306,  313,    0,
        0,    0,    0,    0,    0,    0,    0,  314,  325,  325,

      325,  327,  327,  328,  328,  329,  329,  330,  330,  331,
      331,  332,  332,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_PDDL_Scanner_DEBUG != 0
static const short int yy_rule_linenum[60] =
    {   0,
       42,   43,   47,   52,   53,   54,   55,   56,   57,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   98,   99,  100,
      101,  102,  103,  104,  105,  108,  116,  120,  145
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_PDDL_Scanner_LEX_DEFINED
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM )
YY_PDDL_Scanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "/usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_PDDL_Scanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_PDDL_Scanner_OFILE_DEFAULT;

	if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in );
	else
	    YY_PDDL_Scanner_CURRENT_BUFFER = YY_PDDL_Scanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_PDDL_Scanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 325 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 324 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "/usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "/usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_PDDL_Scanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 42 "ppddl.lex"
;
	YY_BREAK
case 2:
#line 43 "ppddl.lex"
{ _line_no++;
                             if( _trace_line )
                                 cout << endl << "LINE: " << _line_no << endl;
                           }
	YY_BREAK
case 3:
#line 47 "ppddl.lex"
{ _line_no++;
                             if( _trace_line )
                                 cout << endl << "LINE: " << _line_no << endl;
                           }
	YY_BREAK
case 4:
#line 52 "ppddl.lex"
{ return PDDL_Parser::TK_OPEN; }
	YY_BREAK
case 5:
#line 53 "ppddl.lex"
{ return PDDL_Parser::TK_CLOSE; }
	YY_BREAK
case 6:
#line 54 "ppddl.lex"
{ return PDDL_Parser::TK_OPEN_SQ; }
	YY_BREAK
case 7:
#line 55 "ppddl.lex"
{ return PDDL_Parser::TK_CLOSE_SQ; }
	YY_BREAK
case 8:
#line 56 "ppddl.lex"
{ return PDDL_Parser::TK_HYPHEN; }
	YY_BREAK
case 9:
#line 57 "ppddl.lex"
{ return PDDL_Parser::TK_EQ; }
	YY_BREAK
case 10:
#line 59 "ppddl.lex"
{ return PDDL_Parser::KW_DEFINE; }
	YY_BREAK
case 11:
#line 60 "ppddl.lex"
{ return PDDL_Parser::KW_DOMAIN; }
	YY_BREAK
case 12:
#line 61 "ppddl.lex"
{ return PDDL_Parser::KW_REQS; }
	YY_BREAK
case 13:
#line 62 "ppddl.lex"
{ return PDDL_Parser::KW_TYPES; }
	YY_BREAK
case 14:
#line 63 "ppddl.lex"
{ return PDDL_Parser::KW_CONSTANTS; }
	YY_BREAK
case 15:
#line 64 "ppddl.lex"
{ return PDDL_Parser::KW_PREDS; }
	YY_BREAK
case 16:
#line 65 "ppddl.lex"
{ return PDDL_Parser::KW_OBSERVABLE; }
	YY_BREAK
case 17:
#line 66 "ppddl.lex"
{ return PDDL_Parser::KW_STICKY; }
	YY_BREAK
case 18:
#line 67 "ppddl.lex"
{ return PDDL_Parser::KW_FLUENTS; }
	YY_BREAK
case 19:
#line 68 "ppddl.lex"
{ return PDDL_Parser::KW_ACTION; }
	YY_BREAK
case 20:
#line 69 "ppddl.lex"
{ return PDDL_Parser::KW_AXIOM; }
	YY_BREAK
case 21:
#line 70 "ppddl.lex"
{ return PDDL_Parser::KW_SENSOR; }
	YY_BREAK
case 22:
#line 71 "ppddl.lex"
{ return PDDL_Parser::KW_ARGS; }
	YY_BREAK
case 23:
#line 72 "ppddl.lex"
{ return PDDL_Parser::KW_PRE; }
	YY_BREAK
case 24:
#line 73 "ppddl.lex"
{ return PDDL_Parser::KW_EFFECT; }
	YY_BREAK
case 25:
#line 74 "ppddl.lex"
{ return PDDL_Parser::KW_COND; }
	YY_BREAK
case 26:
#line 75 "ppddl.lex"
{ return PDDL_Parser::KW_SENSE; }
	YY_BREAK
case 27:
#line 76 "ppddl.lex"
{ return PDDL_Parser::KW_OBSERVE; }
	YY_BREAK
case 28:
#line 77 "ppddl.lex"
{ return PDDL_Parser::KW_BODY; }
	YY_BREAK
case 29:
#line 78 "ppddl.lex"
{ return PDDL_Parser::KW_HEAD; }
	YY_BREAK
case 30:
#line 79 "ppddl.lex"
{ return PDDL_Parser::KW_AND; }
	YY_BREAK
case 31:
#line 80 "ppddl.lex"
{ return PDDL_Parser::KW_EXISTS; }
	YY_BREAK
case 32:
#line 81 "ppddl.lex"
{ return PDDL_Parser::KW_FORALL; }
	YY_BREAK
case 33:
#line 82 "ppddl.lex"
{ return PDDL_Parser::KW_NOT; }
	YY_BREAK
case 34:
#line 83 "ppddl.lex"
{ return PDDL_Parser::KW_WHEN; }
	YY_BREAK
case 35:
#line 84 "ppddl.lex"
{ return PDDL_Parser::KW_INVARIANT; }
	YY_BREAK
case 36:
#line 85 "ppddl.lex"
{ return PDDL_Parser::KW_AT_LEAST_ONE; }
	YY_BREAK
case 37:
#line 86 "ppddl.lex"
{ return PDDL_Parser::KW_AT_MOST_ONE; }
	YY_BREAK
case 38:
#line 87 "ppddl.lex"
{ return PDDL_Parser::KW_EXACTLY_ONE; }
	YY_BREAK
case 39:
#line 88 "ppddl.lex"
{ return PDDL_Parser::KW_OR; }
	YY_BREAK
case 40:
#line 89 "ppddl.lex"
{ return PDDL_Parser::KW_ONEOF; }
	YY_BREAK
case 41:
#line 90 "ppddl.lex"
{ return PDDL_Parser::KW_UNKNOWN; }
	YY_BREAK
case 42:
#line 91 "ppddl.lex"
{ return PDDL_Parser::KW_PROBLEM; }
	YY_BREAK
case 43:
#line 92 "ppddl.lex"
{ return PDDL_Parser::KW_FORDOMAIN; }
	YY_BREAK
case 44:
#line 93 "ppddl.lex"
{ return PDDL_Parser::KW_OBJECTS; }
	YY_BREAK
case 45:
#line 94 "ppddl.lex"
{ return PDDL_Parser::KW_INIT; }
	YY_BREAK
case 46:
#line 95 "ppddl.lex"
{ return PDDL_Parser::KW_HIDDEN; }
	YY_BREAK
case 47:
#line 96 "ppddl.lex"
{ return PDDL_Parser::KW_GOAL; }
	YY_BREAK
case 48:
#line 98 "ppddl.lex"
{ return PDDL_Parser::KW_TRANSLATION; }
	YY_BREAK
case 49:
#line 99 "ppddl.lex"
{ return PDDL_Parser::KW_VARIABLE; }
	YY_BREAK
case 50:
#line 100 "ppddl.lex"
{ return PDDL_Parser::KW_OBS_VARIABLE; }
	YY_BREAK
case 51:
#line 101 "ppddl.lex"
{ return PDDL_Parser::KW_VALUES; }
	YY_BREAK
case 52:
#line 102 "ppddl.lex"
{ return PDDL_Parser::KW_SENSING; }
	YY_BREAK
case 53:
#line 103 "ppddl.lex"
{ return PDDL_Parser::KW_DEFAULT_SENSING; }
	YY_BREAK
case 54:
#line 104 "ppddl.lex"
{ return PDDL_Parser::KW_MODEL_FOR; }
	YY_BREAK
case 55:
#line 105 "ppddl.lex"
{ return PDDL_Parser::KW_SUCH_THAT; }
	YY_BREAK
case 56:
#line 108 "ppddl.lex"
{ val.sym = _tab.inserta(yytext);
             if( val.sym->val == 0 )
                 return PDDL_Parser::TK_NEW_VAR_SYMBOL;
             if( ((PDDL_Base::Symbol*)val.sym->val)->sym_class_ == PDDL_Base::sym_variable )
                 return PDDL_Parser::TK_VAR_SYMBOL;
             return PDDL_Parser::TK_NEW_VAR_SYMBOL;
           }
	YY_BREAK
case 57:
#line 116 "ppddl.lex"
{ val.sym = _tab.inserta(yytext);
             return PDDL_Parser::TK_KEYWORD;
           }
	YY_BREAK
case 58:
#line 120 "ppddl.lex"
{ val.sym = _tab.inserta(yytext);
             if( val.sym->val == 0 ) {
                 return PDDL_Parser::TK_NEW_SYMBOL;
             } else {
                 switch (((PDDL_Base::Symbol*)val.sym->val)->sym_class_) {
                   case PDDL_Base::sym_object:
                     return PDDL_Parser::TK_OBJ_SYMBOL;
                   case PDDL_Base::sym_typename:
                     return PDDL_Parser::TK_TYPE_SYMBOL;
                   case PDDL_Base::sym_predicate:
                     return PDDL_Parser::TK_PRED_SYMBOL;
                   case PDDL_Base::sym_action:
                     return PDDL_Parser::TK_ACTION_SYMBOL;
                   case PDDL_Base::sym_sensor:
                     return PDDL_Parser::TK_SENSOR_SYMBOL;
                   case PDDL_Base::sym_axiom:
                     return PDDL_Parser::TK_AXIOM_SYMBOL;
                   case PDDL_Base::sym_varname:
                     return PDDL_Parser::TK_VARNAME_SYMBOL;
                   default:
                     return PDDL_Parser::TK_MISC_SYMBOL;
                 }
             }
           }
	YY_BREAK
case 59:
#line 145 "ppddl.lex"
{ val.ival = atoi(yytext); return PDDL_Parser::TK_INT; }
	YY_BREAK
case 60:
#line 147 "ppddl.lex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "/usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "/usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_PDDL_Scanner_DEBUG != 0
#ifndef YY_PDDL_Scanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_PDDL_Scanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_PDDL_Scanner_CHAR *dest = YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_PDDL_Scanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_PDDL_Scanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "/usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 325 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "/usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_PDDL_Scanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 325 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 324);
#line 755 "/usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_PDDL_Scanner_CHAR c, register YY_PDDL_Scanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_PDDL_Scanner_CHAR c;
register YY_PDDL_Scanner_CHAR *yy_bp;
#endif
#else
void YY_PDDL_Scanner_CLASS::yyunput( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *yy_bp )
#endif

    {
    register YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_PDDL_Scanner_CHAR *dest =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_PDDL_Scanner_CHAR *source =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_PDDL_Scanner_CLASS::input()
#endif
    {
    int c;
    YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_PDDL_Scanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_RESTART( YY_PDDL_Scanner_IFILE  *input_file )
#else
void YY_PDDL_Scanner_RESTART( input_file )
YY_PDDL_Scanner_IFILE  *input_file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_RESTART ( YY_PDDL_Scanner_IFILE  *input_file )
#endif

    {
    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, input_file );
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_PDDL_Scanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_PDDL_Scanner_CURRENT_BUFFER = new_buffer;
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_LOAD_BUFFER_STATE( void )
#else
void YY_PDDL_Scanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_PDDL_Scanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( file, size )
YY_PDDL_Scanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_PDDL_Scanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    YY_PDDL_Scanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_PDDL_Scanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_PDDL_Scanner_CURRENT_BUFFER )
	YY_PDDL_Scanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file )
#else
void YY_PDDL_Scanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_PDDL_Scanner_IFILE  *file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 147 "ppddl.lex"


/*{FLOAT}    { val.rval = A_TO_NN(yytext); return PDDL_Parser::TK_FLOAT; }*/

int yywrap() {
    return 1;
}

void PDDL_Scanner::open_file(char* name, bool trace) {
    yyin = fopen(name, "r");
    if( !yyin ) {
        cout << Utils::error() << "can't open " << name << endl;
        exit(255);
    }
    _filename = name;
    if( _reset ) yy_init_buffer(YY_PDDL_Scanner_CURRENT_BUFFER, yyin);
    _reset = true;
    _line_no = 1;
    _trace_line = trace;
    yy_flex_debug = trace;
}

void PDDL_Scanner::close_file() {
    if( _filename != 0 ) {
        fclose(yyin);
        _filename = 0;
    }
}

