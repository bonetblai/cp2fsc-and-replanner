#define YY_CHAR char
#line 1 "/usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
//#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "ppddl.lex"
#define INITIAL 0
/*
 *  Copyright (C) 2011 - <date> Blai Bonet, Universidad Simon Bolivar
 *
 *  Permission is hereby granted to distribute this software for
 *  non-commercial research purposes, provided that this copyright
 *  notice is included with any such distribution.
 *
 *  THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
 *  SOFTWARE IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU
 *  ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 *
 *  Blai Bonet, bonet@ldc.usb.ve, bonetblai@gmail.com
 *
 */
#define YY_PDDL_Scanner_FLEX_SCANNER
#include "scanner.h"
#line 59 "ppddl.lex"
#line 196 "/usr/local/lib/flexskel.cc"

#define yy___stderr YY_PDDL_Scanner_ERRFILE
#define yy___text YY_PDDL_Scanner_TEXT
#define yy___leng YY_PDDL_Scanner_LENG
#define yy___in YY_PDDL_Scanner_IN
#define yy___out YY_PDDL_Scanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in ); \
		YY_PDDL_Scanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_PDDL_Scanner_DEBUG != 0
#define yy___flex_debug YY_PDDL_Scanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_PDDL_Scanner_ECHO
#define yy___input YY_PDDL_Scanner_INPUT
#define yy___fatal_error YY_PDDL_Scanner_FATAL_ERROR
#define yy___wrap YY_PDDL_Scanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_PDDL_Scanner_IFILE  *yy_input_file;

    YY_PDDL_Scanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_PDDL_Scanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_PDDL_Scanner_DEBUG != 0
int YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_PDDL_Scanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_PDDL_Scanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_PDDL_Scanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_PDDL_Scanner_CHAR *yy___text;
int yy___leng;

YY_PDDL_Scanner_IFILE  *yy___in = (YY_PDDL_Scanner_IFILE  *) 0;
YY_PDDL_Scanner_OFILE *yy___out = (YY_PDDL_Scanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_PDDL_Scanner_CHAR *yy_c_buf_p = (YY_PDDL_Scanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_PDDL_Scanner_ECHO_NOCODE
void YY_PDDL_Scanner_CLASS::yy___echo()
{YY_PDDL_Scanner_ECHO_CODE
}
#endif
#ifndef YY_PDDL_Scanner_INPUT_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_PDDL_Scanner_INPUT_CODE
}
#endif
#ifndef YY_PDDL_Scanner_FATAL_ERROR_NOCODE
void YY_PDDL_Scanner_CLASS::yy___fatal_error(const char *msg)
{YY_PDDL_Scanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_PDDL_Scanner_WRAP_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___wrap()
{YY_PDDL_Scanner_WRAP_CODE
}
#endif
void YY_PDDL_Scanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_PDDL_Scanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_PDDL_Scanner_DEBUG != 0
 YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
}

YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CLASS(YY_PDDL_Scanner_CONSTRUCTOR_PARAM) YY_PDDL_Scanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_PDDL_Scanner_CONSTRUCTOR_CODE;
}
YY_PDDL_Scanner_CLASS::~YY_PDDL_Scanner_CLASS() 
{YY_PDDL_Scanner_DESTRUCTOR_CODE;
 if(YY_PDDL_Scanner_CURRENT_BUFFER)
  YY_PDDL_Scanner_DELETE_BUFFER(YY_PDDL_Scanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 64
typedef int yy_state_type;
static const short int yy_accept[356] =
    {   0,
       62,   62,   64,   63,    1,    3,    4,    5,    8,   62,
       63,   63,    9,   63,    6,    7,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
        1,   62,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,    0,    2,
       59,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   41,   61,   61,   61,   61,   61,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   59,   59,   32,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   35,   61,   61,   61,
       61,   61,   61,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   30,
       61,   36,   60,   60,   28,   60,   60,   60,   60,   60,
       60,   60,   49,   29,   60,   47,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   61,
       61,   61,   61,   61,   61,   31,   61,   61,   61,   42,
       61,   61,   61,   60,   20,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       26,   60,   60,   60,   60,   13,   60,   60,   61,   61,
       10,   11,   61,   33,   34,   61,   61,   61,   61,   61,
       19,   60,   60,   60,   45,   24,   60,   60,   48,   60,
       60,   60,   60,   60,   60,   60,   60,   21,   17,   60,
       60,   60,   61,   61,   61,   61,   61,   44,   61,   43,
       60,   60,   60,   60,   18,   46,   60,   60,   27,   60,
       60,   60,   60,   55,   60,   60,   60,   61,   61,   61,
       61,   61,   61,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   52,   61,   61,   61,   37,

       57,   58,   25,   14,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   54,   61,   61,   61,   60,   60,   60,
       16,   22,   60,   15,   60,   60,   61,   39,   40,   60,
       60,   60,   60,   60,   51,   38,   60,   60,   53,   23,
       12,   60,   60,   60,   60,   56,   60,   60,   60,   60,
       60,   60,   60,   50,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        5,    1,    1,    1,    6,    1,    1,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,    9,    1,
       10,    1,   11,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   14,
       12,    1,   13,    1,   14,    1,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   14,    1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[40] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const short int yy_base[364] =
    {   0,
        0,    0,  626,  947,  611,  947,  947,  947,  600,  598,
       26,  579,  947,    0,  947,  947,   60,   62,   64,   66,
       69,   71,   73,   79,   75,   81,   85,   94,   88,   99,
      569,  560,  103,  105,  108,  111,  117,  121,  123,  125,
      128,  132,  146,  149,  138,  159,  162,  164,  559,  947,
      166,    0,  168,  170,  176,  178,  180,  185,  183,  189,
      196,  198,  204,  206,  208,  211,  213,  216,  220,  222,
        0,  227,  229,  236,  240,  242,  246,  248,  254,  250,
      258,  261,  266,  271,  276,  278,  280,  284,  288,  290,
      294,  298,  300,  302,    0,  308,  314,  296,  318,  320,

      322,  325,  330,  336,  338,  340,  342,  348,  350,  354,
      361,  358,  363,  365,  367,  372,  375,  377,  383,  388,
      393,  395,  397,  399,  403,  406,  409,  418,  420,  424,
      426,  432,  437,  439,  441,  443,  523,  508,  445,  449,
      451,  456,  462,  468,  464,  471,  473,  476,  480,  482,
      485,  492,  494,  497,  499,  502,  504,  506,  509,  511,
      513,  515,  520,  523,  527,  533,  538,  499,  541,  543,
      545,  552,  554,  557,  547,  550,  559,  510,  572,  492,
      462,  562,  578,  582,  584,  587,  589,  591,  593,  595,
      597,  450,  603,  605,  612,  614,  616,  618,  621,  623,

      628,  630,  632,  635,  461,  640,  644,  646,  648,  652,
      655,  660,  664,  666,  671,  673,  432,  675,  426,  419,
      679,  683,  686,  688,  692,  694,  416,  696,  412,  700,
      704,  706,  708,  710,  712,  714,  720,  724,  726,  728,
      397,  731,  733,  735,  741,  745,  748,  752,  756,  759,
      393,  764,  386,  412,  766,  769,  368,  771,  372,  773,
      775,  777,  779,  781,  785,  787,  362,  789,  792,  794,
      796,  800,  802,  810,  814,  340,  816,  356,  323,  321,
      818,  308,  304,  821,  824,  300,  826,  301,  830,  832,
      834,  836,  839,  844,  280,  847,  269,  264,  260,  853,

        0,    0,  855,  859,  260,  248,  253,  863,  865,  867,
      869,  871,  874,    0,  234,  231,  225,  211,  209,  205,
      877,  879,  881,  885,  887,  889,  205,    0,    0,  173,
      176,  178,  894,  898,  900,    0,  157,  133,    0,  902,
      905,  135,  138,  137,  135,    0,  122,  136,  100,   91,
      104,   63,   70,    0,  947,  931,   71,  933,  935,  937,
      939,  941,  943
    } ;

static const short int yy_def[364] =
    {   0,
      355,    1,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  356,  355,  357,  355,  355,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      355,  355,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  356,  355,
      360,  361,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      362,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  363,  360,  358,  361,  358,  358,

      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  361,  361,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  362,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  362,  359,  361,
      361,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  361,  358,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  362,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  362,  359,  361,  361,
      358,  358,  358,  358,  358,  358,  361,  358,  361,  358,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      362,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      362,  359,  361,  361,  358,  358,  361,  358,  361,  358,
      359,  359,  359,  359,  359,  359,  362,  359,  359,  359,
      359,  359,  359,  359,  359,  362,  359,  361,  361,  361,
      358,  361,  361,  359,  359,  362,  359,  362,  359,  359,
      359,  359,  359,  359,  362,  359,  361,  361,  361,  358,

      361,  361,  359,  359,  362,  362,  362,  359,  359,  359,
      359,  359,  359,  362,  361,  361,  361,  362,  362,  362,
      359,  359,  359,  359,  359,  359,  361,  361,  361,  362,
      362,  362,  359,  359,  359,  361,  362,  362,  362,  359,
      359,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,    0,  355,  355,  355,  355,  355,
      355,  355,  355
    } ;

static const short int yy_nxt[987] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   17,   17,   19,   20,   21,
       17,   17,   22,   17,   17,   17,   23,   24,   25,   26,
       17,   17,   27,   28,   29,   17,   30,   17,   17,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   33,
       33,   33,   33,   33,   43,   44,   33,   45,   46,   47,
       33,   48,   33,   33,   33,   52,   52,   52,   52,   52,
       52,   52,   52,   51,   52,   52,   52,   52,   52,   52,
       52,   52,   56,   59,   52,   52,   52,   52,  354,   54,
       52,   52,   57,   52,   52,   55,  353,   60,   61,   52,

       52,   62,   64,   58,   52,   52,   65,   63,   71,   71,
       71,   71,   66,   71,   71,   69,   71,   71,  352,   67,
       70,   73,   71,   71,  351,   68,   71,   71,   71,   71,
       71,   71,  350,   71,   71,   77,   75,   71,   71,   76,
       79,  349,   74,   71,   71,   78,   83,  348,   81,  347,
       84,   71,   71,   82,   71,   71,   89,  346,   80,   85,
      345,   86,  344,   87,   71,   71,  343,   71,   71,   71,
       71,   95,   95,   52,   52,   52,   52,   90,   94,  342,
       88,   98,   52,   52,   52,   52,   52,   97,   52,   52,
       52,   52,   91,   92,   52,   52,  339,   99,  338,  101,

       93,   52,   52,   52,   52,  337,  100,  102,  103,   52,
       52,   52,   52,   52,   52,  106,   52,   52,   52,   52,
      104,   52,   52,  336,  108,   52,   52,   52,   52,  110,
      332,  105,   71,   71,   71,   71,  331,  107,  330,  109,
      113,   71,   71,  329,  112,   71,   71,   71,   71,  328,
      111,   71,   71,   71,   71,   71,   71,  116,  115,   71,
       71,  327,  114,   71,   71,  118,   71,   71,  320,  117,
      319,   71,   71,  120,  119,  123,   71,   71,  318,  121,
      124,   71,   71,   71,   71,   71,   71,  317,  125,   71,
       71,  316,  122,   71,   71,   71,   71,  315,  126,   71,

       71,  127,  130,   71,   71,   71,   71,   71,   71,  314,
      128,  129,  134,   95,   95,  307,  133,  132,  131,   52,
       52,  137,  138,   52,   52,   52,   52,   52,   52,  135,
       52,   52,  305,  136,  140,   52,   52,  302,  141,  301,
      139,   52,   52,   52,   52,   52,   52,   52,   52,  299,
      144,  298,  145,   52,   52,   52,   52,  142,  146,   52,
       52,  297,  143,   52,   52,  148,   52,   52,   52,   52,
       71,   71,   71,   71,  295,  149,  147,   71,   71,  150,
       71,   71,   71,   71,  288,  151,  283,  153,   71,   71,
      152,  158,  156,   71,   71,  154,  282,  159,   71,   71,

       71,   71,   71,   71,   71,   71,  160,  157,   71,   71,
      155,   71,   71,  162,   71,   71,  164,  279,  161,  278,
      165,  276,  163,  168,   71,   71,   71,  167,  267,   71,
       71,   71,   71,  259,  170,  257,  169,   71,   71,  166,
      171,  172,   71,   71,   71,   71,   71,   71,  178,   71,
       52,   52,  254,  175,   52,   52,   52,   52,  253,  177,
      173,   52,   52,  251,  174,  179,  176,   52,   52,   52,
       52,  183,  182,   52,   52,  241,   52,   52,   52,   52,
      186,   52,   52,  229,  184,  192,   52,   52,   52,  185,
       52,   52,  190,  187,  220,  188,  189,   52,   52,   71,

       71,  191,   71,   71,   71,   71,  219,   71,   71,   71,
       71,   71,   71,  193,   71,   71,   71,   71,   71,   71,
       71,   71,  194,  195,  196,   71,   71,  200,   71,   71,
      217,  199,   71,   71,  205,  201,  181,  197,   71,   71,
      198,  180,  202,   71,   71,  203,   71,   71,   71,   71,
       71,   71,   71,   71,  204,   71,   71,   71,   71,   71,
       71,   50,   71,   71,   71,   71,   32,   52,   52,  207,
       31,  214,  206,  208,  209,  211,  210,   71,   71,  212,
      221,   50,  215,   52,   52,  213,  218,   52,   52,   52,
       52,  216,   52,   52,   52,   52,   52,   52,  227,   52,

       52,   52,   52,   52,   32,  222,   32,  223,   52,   52,
       71,   71,   31,  226,  225,  228,  224,   71,   71,   71,
       71,   71,   71,   71,   71,  355,   71,   71,   71,   71,
      233,  355,  231,   71,   71,   71,   71,   71,   71,  230,
       71,   71,  355,  234,  237,   71,   71,  232,  235,   71,
       71,   71,   71,   71,   71,  355,  236,   71,   71,  239,
       71,   71,  243,  238,  245,   71,   71,  355,  240,   71,
       71,   71,   71,  244,  355,  242,   71,   71,   71,   71,
       71,   71,  355,  246,   52,   52,  355,  247,   52,   52,
      252,   52,   52,   52,   52,  248,  250,   52,   52,   52,

       52,   52,   52,  355,  249,   52,   52,  355,  256,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  355,  258,  355,  255,   71,   71,  260,  261,   71,
       71,   71,   71,   71,   71,  262,   71,   71,   71,   71,
       71,   71,  264,  263,  355,  268,   71,   71,  355,  269,
       71,   71,  271,   71,   71,  272,  265,   71,   71,  355,
      266,   71,   71,  273,   71,   71,  270,  355,  274,   71,
       71,  280,   52,  275,   52,   52,   52,   52,   52,   52,
       71,   71,   71,   71,  286,   71,   71,   71,  355,  277,
       71,   71,   71,   71,   71,   71,  281,   71,   71,   71,

       71,   71,   71,  284,  289,   71,   71,   71,   71,  355,
      285,  355,  290,  355,  287,   71,   71,  355,  291,   71,
       71,   71,   71,   52,   52,  355,   71,   71,  293,   71,
       71,  306,   71,  292,  296,   71,   71,   71,   71,   71,
       71,   71,   71,  355,   71,   71,  355,  294,  303,   71,
       71,  300,   71,   71,  311,  308,  304,  312,   52,   52,
       71,   71,  355,  309,   71,   71,  313,  310,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,  355,   71,
       71,  321,   71,   71,   71,   71,   71,   71,  355,  323,
       71,   71,   71,   71,   71,   71,  355,  322,  325,   71,

       71,  324,  326,   71,   71,   71,   71,   71,   71,  333,
       71,   71,  355,  355,  355,  355,  335,  355,  355,  355,
      334,  340,  355,  355,  355,  355,  355,  355,  355,  355,
      341,   49,   49,   49,   53,   53,   72,   72,   96,   96,
       52,   52,   71,   71,   95,   95,    3,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355
    } ;

static const short int yy_chk[987] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   17,   17,   18,   18,   19,
       19,   20,   20,  357,   21,   21,   22,   22,   23,   23,
       25,   25,   19,   21,   24,   24,   26,   26,  353,   18,
       27,   27,   19,   29,   29,   18,  352,   21,   22,   28,

       28,   23,   25,   20,   30,   30,   25,   24,   33,   33,
       34,   34,   26,   35,   35,   29,   36,   36,  351,   27,
       30,   34,   37,   37,  350,   28,   38,   38,   39,   39,
       40,   40,  349,   41,   41,   37,   35,   42,   42,   36,
       38,  348,   34,   45,   45,   37,   41,  347,   39,  345,
       41,   43,   43,   40,   44,   44,   45,  344,   38,   42,
      343,   43,  342,   44,   46,   46,  338,   47,   47,   48,
       48,   51,   51,   53,   53,   54,   54,   46,   48,  337,
       44,   55,   55,   56,   56,   57,   57,   54,   59,   59,
       58,   58,   46,   47,   60,   60,  332,   56,  331,   58,

       47,   61,   61,   62,   62,  330,   57,   58,   59,   63,
       63,   64,   64,   65,   65,   62,   66,   66,   67,   67,
       60,   68,   68,  327,   64,   69,   69,   70,   70,   67,
      320,   61,   72,   72,   73,   73,  319,   63,  318,   66,
       70,   74,   74,  317,   69,   75,   75,   76,   76,  316,
       68,   77,   77,   78,   78,   80,   80,   75,   74,   79,
       79,  315,   73,   81,   81,   77,   82,   82,  307,   76,
      306,   83,   83,   79,   78,   82,   84,   84,  305,   80,
       83,   85,   85,   86,   86,   87,   87,  299,   84,   88,
       88,  298,   81,   89,   89,   90,   90,  297,   85,   91,

       91,   86,   88,   92,   92,   93,   93,   94,   94,  295,
       86,   87,   92,   96,   96,  288,   91,   90,   89,   97,
       97,   98,   98,   99,   99,  100,  100,  101,  101,   93,
      102,  102,  286,   94,  100,  103,  103,  283,  101,  282,
       99,  104,  104,  105,  105,  106,  106,  107,  107,  280,
      104,  279,  105,  108,  108,  109,  109,  102,  106,  110,
      110,  278,  103,  112,  112,  109,  111,  111,  113,  113,
      114,  114,  115,  115,  276,  110,  108,  116,  116,  111,
      117,  117,  118,  118,  267,  112,  259,  114,  119,  119,
      113,  118,  117,  120,  120,  115,  257,  119,  121,  121,

      122,  122,  123,  123,  124,  124,  120,  117,  125,  125,
      116,  126,  126,  122,  127,  127,  124,  254,  121,  253,
      125,  251,  123,  128,  128,  129,  129,  127,  241,  130,
      130,  131,  131,  229,  129,  227,  128,  132,  132,  126,
      130,  130,  133,  133,  134,  134,  135,  135,  136,  136,
      139,  139,  220,  133,  140,  140,  141,  141,  219,  135,
      131,  142,  142,  217,  132,  136,  134,  143,  143,  145,
      145,  140,  139,  144,  144,  205,  146,  146,  147,  147,
      143,  148,  148,  192,  141,  149,  149,  150,  150,  142,
      151,  151,  147,  144,  181,  145,  146,  152,  152,  153,

      153,  148,  154,  154,  155,  155,  180,  156,  156,  157,
      157,  158,  158,  151,  159,  159,  160,  160,  161,  161,
      162,  162,  153,  154,  156,  163,  163,  160,  164,  164,
      178,  159,  165,  165,  168,  161,  138,  157,  166,  166,
      158,  137,  162,  167,  167,  165,  169,  169,  170,  170,
      171,  171,  175,  175,  167,  176,  176,  172,  172,  173,
      173,   49,  174,  174,  177,  177,   32,  182,  182,  170,
       31,  175,  169,  171,  172,  174,  173,  179,  179,  174,
      182,   12,  176,  183,  183,  174,  179,  184,  184,  185,
      185,  177,  186,  186,  187,  187,  188,  188,  189,  189,

      190,  190,  191,  191,   10,  183,    9,  184,  193,  193,
      194,  194,    5,  188,  187,  191,  185,  195,  195,  196,
      196,  197,  197,  198,  198,    3,  199,  199,  200,  200,
      197,    0,  194,  201,  201,  202,  202,  203,  203,  193,
      204,  204,    0,  198,  201,  206,  206,  196,  199,  207,
      207,  208,  208,  209,  209,    0,  200,  210,  210,  203,
      211,  211,  207,  202,  209,  212,  212,    0,  204,  213,
      213,  214,  214,  208,    0,  206,  215,  215,  216,  216,
      218,  218,    0,  210,  221,  221,    0,  212,  222,  222,
      218,  223,  223,  224,  224,  213,  215,  225,  225,  226,

      226,  228,  228,    0,  214,  230,  230,    0,  226,  231,
      231,  232,  232,  233,  233,  234,  234,  235,  235,  236,
      236,    0,  228,    0,  223,  237,  237,  230,  232,  238,
      238,  239,  239,  240,  240,  233,  242,  242,  243,  243,
      244,  244,  237,  234,    0,  242,  245,  245,    0,  242,
      246,  246,  244,  247,  247,  245,  238,  248,  248,    0,
      240,  249,  249,  246,  250,  250,  243,    0,  247,  252,
      252,  255,  255,  250,  256,  256,  258,  258,  260,  260,
      261,  261,  262,  262,  263,  263,  264,  264,    0,  252,
      265,  265,  266,  266,  268,  268,  256,  269,  269,  270,

      270,  271,  271,  261,  268,  272,  272,  273,  273,    0,
      262,    0,  270,    0,  264,  274,  274,    0,  271,  275,
      275,  277,  277,  281,  281,    0,  284,  284,  273,  285,
      285,  287,  287,  272,  277,  289,  289,  290,  290,  291,
      291,  292,  292,    0,  293,  293,    0,  275,  284,  294,
      294,  281,  296,  296,  292,  289,  285,  293,  300,  300,
      303,  303,    0,  290,  304,  304,  294,  291,  308,  308,
      309,  309,  310,  310,  311,  311,  312,  312,    0,  313,
      313,  308,  321,  321,  322,  322,  323,  323,    0,  310,
      324,  324,  325,  325,  326,  326,    0,  309,  312,  333,

      333,  311,  313,  334,  334,  335,  335,  340,  340,  323,
      341,  341,    0,    0,    0,    0,  326,    0,    0,    0,
      325,  333,    0,    0,    0,    0,    0,    0,    0,    0,
      334,  356,  356,  356,  358,  358,  359,  359,  360,  360,
      361,  361,  362,  362,  363,  363,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_PDDL_Scanner_DEBUG != 0
static const short int yy_rule_linenum[63] =
    {   0,
       61,   62,   66,   71,   72,   73,   74,   75,   76,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      120,  121,  122,  123,  124,  125,  126,  127,  130,  138,
      142,  167
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_PDDL_Scanner_LEX_DEFINED
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM )
YY_PDDL_Scanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM)

#endif
    {
    yy_state_type yy_current_state;
    YY_PDDL_Scanner_CHAR *yy_cp, *yy_bp;
    int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "/usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_PDDL_Scanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_PDDL_Scanner_OFILE_DEFAULT;

	if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in );
	else
	    YY_PDDL_Scanner_CURRENT_BUFFER = YY_PDDL_Scanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_PDDL_Scanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 356 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 355 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "/usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "/usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_PDDL_Scanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 61 "ppddl.lex"
;
	YY_BREAK
case 2:
#line 62 "ppddl.lex"
{ _line_no++;
                             if( _trace_line )
                                 cout << endl << "LINE: " << _line_no << endl;
                           }
	YY_BREAK
case 3:
#line 66 "ppddl.lex"
{ _line_no++;
                             if( _trace_line )
                                 cout << endl << "LINE: " << _line_no << endl;
                           }
	YY_BREAK
case 4:
#line 71 "ppddl.lex"
{ return PDDL_Parser::TK_OPEN; }
	YY_BREAK
case 5:
#line 72 "ppddl.lex"
{ return PDDL_Parser::TK_CLOSE; }
	YY_BREAK
case 6:
#line 73 "ppddl.lex"
{ return PDDL_Parser::TK_OPEN_SQ; }
	YY_BREAK
case 7:
#line 74 "ppddl.lex"
{ return PDDL_Parser::TK_CLOSE_SQ; }
	YY_BREAK
case 8:
#line 75 "ppddl.lex"
{ return PDDL_Parser::TK_HYPHEN; }
	YY_BREAK
case 9:
#line 76 "ppddl.lex"
{ return PDDL_Parser::TK_EQ; }
	YY_BREAK
case 10:
#line 78 "ppddl.lex"
{ return PDDL_Parser::KW_DEFINE; }
	YY_BREAK
case 11:
#line 79 "ppddl.lex"
{ return PDDL_Parser::KW_DOMAIN; }
	YY_BREAK
case 12:
#line 80 "ppddl.lex"
{ return PDDL_Parser::KW_REQS; }
	YY_BREAK
case 13:
#line 81 "ppddl.lex"
{ return PDDL_Parser::KW_TYPES; }
	YY_BREAK
case 14:
#line 82 "ppddl.lex"
{ return PDDL_Parser::KW_CONSTANTS; }
	YY_BREAK
case 15:
#line 83 "ppddl.lex"
{ return PDDL_Parser::KW_PREDS; }
	YY_BREAK
case 16:
#line 84 "ppddl.lex"
{ return PDDL_Parser::KW_OBSERVABLE; }
	YY_BREAK
case 17:
#line 85 "ppddl.lex"
{ return PDDL_Parser::KW_STICKY; }
	YY_BREAK
case 18:
#line 86 "ppddl.lex"
{ return PDDL_Parser::KW_FLUENTS; }
	YY_BREAK
case 19:
#line 87 "ppddl.lex"
{ return PDDL_Parser::KW_ACTION; }
	YY_BREAK
case 20:
#line 88 "ppddl.lex"
{ return PDDL_Parser::KW_AXIOM; }
	YY_BREAK
case 21:
#line 89 "ppddl.lex"
{ return PDDL_Parser::KW_SENSOR; }
	YY_BREAK
case 22:
#line 90 "ppddl.lex"
{ return PDDL_Parser::KW_ARGS; }
	YY_BREAK
case 23:
#line 91 "ppddl.lex"
{ return PDDL_Parser::KW_PRE; }
	YY_BREAK
case 24:
#line 92 "ppddl.lex"
{ return PDDL_Parser::KW_EFFECT; }
	YY_BREAK
case 25:
#line 93 "ppddl.lex"
{ return PDDL_Parser::KW_COND; }
	YY_BREAK
case 26:
#line 94 "ppddl.lex"
{ return PDDL_Parser::KW_SENSE; }
	YY_BREAK
case 27:
#line 95 "ppddl.lex"
{ return PDDL_Parser::KW_OBSERVE; }
	YY_BREAK
case 28:
#line 96 "ppddl.lex"
{ return PDDL_Parser::KW_BODY; }
	YY_BREAK
case 29:
#line 97 "ppddl.lex"
{ return PDDL_Parser::KW_HEAD; }
	YY_BREAK
case 30:
#line 98 "ppddl.lex"
{ return PDDL_Parser::KW_TRUE; }
	YY_BREAK
case 31:
#line 99 "ppddl.lex"
{ return PDDL_Parser::KW_FALSE; }
	YY_BREAK
case 32:
#line 100 "ppddl.lex"
{ return PDDL_Parser::KW_AND; }
	YY_BREAK
case 33:
#line 101 "ppddl.lex"
{ return PDDL_Parser::KW_EXISTS; }
	YY_BREAK
case 34:
#line 102 "ppddl.lex"
{ return PDDL_Parser::KW_FORALL; }
	YY_BREAK
case 35:
#line 103 "ppddl.lex"
{ return PDDL_Parser::KW_NOT; }
	YY_BREAK
case 36:
#line 104 "ppddl.lex"
{ return PDDL_Parser::KW_WHEN; }
	YY_BREAK
case 37:
#line 105 "ppddl.lex"
{ return PDDL_Parser::KW_INVARIANT; }
	YY_BREAK
case 38:
#line 106 "ppddl.lex"
{ return PDDL_Parser::KW_AT_LEAST_ONE; }
	YY_BREAK
case 39:
#line 107 "ppddl.lex"
{ return PDDL_Parser::KW_AT_MOST_ONE; }
	YY_BREAK
case 40:
#line 108 "ppddl.lex"
{ return PDDL_Parser::KW_EXACTLY_ONE; }
	YY_BREAK
case 41:
#line 109 "ppddl.lex"
{ return PDDL_Parser::KW_OR; }
	YY_BREAK
case 42:
#line 110 "ppddl.lex"
{ return PDDL_Parser::KW_ONEOF; }
	YY_BREAK
case 43:
#line 111 "ppddl.lex"
{ return PDDL_Parser::KW_UNKNOWN; }
	YY_BREAK
case 44:
#line 112 "ppddl.lex"
{ return PDDL_Parser::KW_PROBLEM; }
	YY_BREAK
case 45:
#line 113 "ppddl.lex"
{ return PDDL_Parser::KW_FORDOMAIN; }
	YY_BREAK
case 46:
#line 114 "ppddl.lex"
{ return PDDL_Parser::KW_OBJECTS; }
	YY_BREAK
case 47:
#line 115 "ppddl.lex"
{ return PDDL_Parser::KW_INIT; }
	YY_BREAK
case 48:
#line 116 "ppddl.lex"
{ return PDDL_Parser::KW_HIDDEN; }
	YY_BREAK
case 49:
#line 117 "ppddl.lex"
{ return PDDL_Parser::KW_GOAL; }
	YY_BREAK
case 50:
#line 118 "ppddl.lex"
{ return PDDL_Parser::KW_EXPLICIT_INITIAL_STATE; }
	YY_BREAK
case 51:
#line 120 "ppddl.lex"
{ return PDDL_Parser::KW_TRANSLATION; }
	YY_BREAK
case 52:
#line 121 "ppddl.lex"
{ return PDDL_Parser::KW_VARIABLE; }
	YY_BREAK
case 53:
#line 122 "ppddl.lex"
{ return PDDL_Parser::KW_OBS_VARIABLE; }
	YY_BREAK
case 54:
#line 123 "ppddl.lex"
{ return PDDL_Parser::KW_VGROUP; }
	YY_BREAK
case 55:
#line 124 "ppddl.lex"
{ return PDDL_Parser::KW_SENSING; }
	YY_BREAK
case 56:
#line 125 "ppddl.lex"
{ return PDDL_Parser::KW_DEFAULT_SENSING; }
	YY_BREAK
case 57:
#line 126 "ppddl.lex"
{ return PDDL_Parser::KW_MODEL_FOR; }
	YY_BREAK
case 58:
#line 127 "ppddl.lex"
{ return PDDL_Parser::KW_SUCH_THAT; }
	YY_BREAK
case 59:
#line 130 "ppddl.lex"
{ val.sym = _tab.insert(yytext);
             if( val.sym->value_ == 0 )
                 return PDDL_Parser::TK_NEW_VAR_SYMBOL;
             if( static_cast<PDDL_Base::Symbol*>(val.sym->value_)->sym_class_ == PDDL_Base::sym_variable )
                 return PDDL_Parser::TK_VAR_SYMBOL;
             return PDDL_Parser::TK_NEW_VAR_SYMBOL;
           }
	YY_BREAK
case 60:
#line 138 "ppddl.lex"
{ val.sym = _tab.insert(yytext);
             return PDDL_Parser::TK_KEYWORD;
           }
	YY_BREAK
case 61:
#line 142 "ppddl.lex"
{ val.sym = _tab.insert(yytext);
             if( val.sym->value_ == 0 ) {
                 return PDDL_Parser::TK_NEW_SYMBOL;
             } else {
                 switch( static_cast<PDDL_Base::Symbol*>(val.sym->value_)->sym_class_ ) {
                   case PDDL_Base::sym_object:
                     return PDDL_Parser::TK_OBJ_SYMBOL;
                   case PDDL_Base::sym_typename:
                     return PDDL_Parser::TK_TYPE_SYMBOL;
                   case PDDL_Base::sym_predicate:
                     return PDDL_Parser::TK_PRED_SYMBOL;
                   case PDDL_Base::sym_action:
                     return PDDL_Parser::TK_ACTION_SYMBOL;
                   case PDDL_Base::sym_sensor:
                     return PDDL_Parser::TK_SENSOR_SYMBOL;
                   case PDDL_Base::sym_axiom:
                     return PDDL_Parser::TK_AXIOM_SYMBOL;
                   case PDDL_Base::sym_varname:
                     return PDDL_Parser::TK_VARNAME_SYMBOL;
                   default:
                     return PDDL_Parser::TK_MISC_SYMBOL;
                 }
             }
           }
	YY_BREAK
case 62:
#line 167 "ppddl.lex"
{ val.ival = atoi(yytext); return PDDL_Parser::TK_INT; }
	YY_BREAK
case 63:
#line 169 "ppddl.lex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "/usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "/usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_PDDL_Scanner_DEBUG != 0
#ifndef YY_PDDL_Scanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_PDDL_Scanner_CLASS::yy_get_next_buffer()
#endif
    {
    YY_PDDL_Scanner_CHAR *dest = YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf;
    YY_PDDL_Scanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_PDDL_Scanner_CLASS::yy_get_previous_state_()
#endif
    {
    yy_state_type yy_current_state;
    YY_PDDL_Scanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "/usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 356 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "/usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
#else
long YY_PDDL_Scanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    YY_CHAR *yy_cp = yy_c_buf_p;

    YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 356 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 355);
#line 755 "/usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_PDDL_Scanner_CHAR c;
YY_PDDL_Scanner_CHAR *yy_bp;
#endif
#else
void YY_PDDL_Scanner_CLASS::yyunput( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *yy_bp )
#endif

    {
    YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	YY_PDDL_Scanner_CHAR *dest =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size + 2];
	YY_PDDL_Scanner_CHAR *source =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_PDDL_Scanner_CLASS::input()
#endif
    {
    int c;
    YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_PDDL_Scanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_RESTART( YY_PDDL_Scanner_IFILE  *input_file )
#else
void YY_PDDL_Scanner_RESTART( input_file )
YY_PDDL_Scanner_IFILE  *input_file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_RESTART ( YY_PDDL_Scanner_IFILE  *input_file )
#endif

    {
    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, input_file );
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_PDDL_Scanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_PDDL_Scanner_CURRENT_BUFFER = new_buffer;
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_LOAD_BUFFER_STATE( void )
#else
void YY_PDDL_Scanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_PDDL_Scanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( file, size )
YY_PDDL_Scanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_PDDL_Scanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    YY_PDDL_Scanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_PDDL_Scanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_PDDL_Scanner_CURRENT_BUFFER )
	YY_PDDL_Scanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file )
#else
void YY_PDDL_Scanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_PDDL_Scanner_IFILE  *file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 169 "ppddl.lex"


/*{FLOAT}    { val.rval = A_TO_NN(yytext); return PDDL_Parser::TK_FLOAT; }*/

int yywrap() {
    return 1;
}

void PDDL_Scanner::open_file(char* name, bool trace) {
    yyin = fopen(name, "r");
    if( !yyin ) {
        cout << Utils::error() << "can't open " << name << endl;
        exit(255);
    }
    _filename = name;
    if( _reset ) yy_init_buffer(YY_PDDL_Scanner_CURRENT_BUFFER, yyin);
    _reset = true;
    _line_no = 1;
    _trace_line = trace;
    yy_flex_debug = trace;
}

void PDDL_Scanner::open_file(bool trace) {
    yyin = stdin;
    _filename = strdup("<stdin>");
    if( _reset ) yy_init_buffer(YY_PDDL_Scanner_CURRENT_BUFFER, yyin);
    _reset = true;
    _line_no = 1;
    _trace_line = trace;
    yy_flex_debug = trace;
}

void PDDL_Scanner::close_file() {
    if( _filename != 0 ) {
        fclose(yyin);
        _filename = 0;
    }
}

