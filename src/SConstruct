import os

debug = ARGUMENTS.get( 'debug', 0 )
common_env = Environment( ENV = os.environ )

# Path to base dir of lwaptk, TODO: bind it to an environment var
lwaptk_path = os.environ['LWAPTK_PATH']

common_env.Append( CCFLAGS = [ '-fpermissive','-Wall', '-std=c++11' ] )

if int(debug) == 1 :
        common_env.Append( CCFLAGS = ['-g',  '-DDEBUG' ] )
elif int(debug) == 2 :
        common_env.Append( CCFLAGS = ['-g',  '-DNDEBUG' ] )
else:
        common_env.Append( CCFLAGS = ['-O3', '-DNDEBUG'] )

Export( 'common_env' )

# Here we import lwaptk sources for compiling

lwaptk_generic_objs = SConscript( os.path.join( lwaptk_path, 'src/SConscript.aptk' ) )
lwaptk_agnostic_objs = SConscript( os.path.join( lwaptk_path, 'interfaces/agnostic/SConscript.agnostic' ) )

common_env.Append( CCFLAGS = [ '-include', 'g++-4.8-compat.h' ] )

# MRJ: For LW1 we don't want to compile the other two binaries
other_sources = [ File('lw1.cc'), File('cp2fsc.cc') ]
lw1_sources = Glob( '*.cc' )
for src in other_sources :
	lw1_sources.remove( src )

lw1_objs = [common_env.Object(s) for s in lw1_sources ]

common_env.Program( 'lw1-lwaptk', lw1_objs + lwaptk_generic_objs + lwaptk_agnostic_objs )
