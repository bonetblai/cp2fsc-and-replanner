

Terminals which are not used:

   TK_OPEN_SQ
   TK_CLOSE_SQ
   TK_INT
   KW_EXISTS
   KW_FLUENTS
   KW_VALUES



Grammar
rule 1    pddl_decls -> pddl_domain pddl_decls
rule 2    pddl_decls -> pddl_problem pddl_decls
rule 3    pddl_decls ->		/* empty */
rule 4    pddl_domain -> TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE
rule 5    pddl_domain -> TK_OPEN KW_DEFINE domain_name error TK_CLOSE
rule 6    domain_elements -> domain_elements domain_requires
rule 7    domain_elements -> domain_elements domain_types
rule 8    domain_elements -> domain_elements domain_constants
rule 9    domain_elements -> domain_elements domain_predicates
rule 10   domain_elements -> domain_elements domain_schemas
rule 11   domain_elements -> domain_elements domain_default_sensing_model
rule 12   domain_elements ->		/* empty */
rule 13   domain_name -> TK_OPEN KW_DOMAIN any_symbol TK_CLOSE
rule 14   any_symbol -> TK_NEW_SYMBOL
rule 15   any_symbol -> TK_OBJ_SYMBOL
rule 16   any_symbol -> TK_TYPE_SYMBOL
rule 17   any_symbol -> TK_PRED_SYMBOL
rule 18   any_symbol -> TK_VAR_SYMBOL
rule 19   any_symbol -> TK_ACTION_SYMBOL
rule 20   any_symbol -> TK_AXIOM_SYMBOL
rule 21   any_symbol -> TK_SENSOR_SYMBOL
rule 22   any_symbol -> TK_MISC_SYMBOL
rule 23   variable_symbol -> TK_NEW_SYMBOL
rule 24   variable_symbol -> TK_VARNAME_SYMBOL
rule 25   action_symbol -> TK_NEW_SYMBOL
rule 26   action_symbol -> TK_ACTION_SYMBOL
rule 27   sensor_symbol -> TK_NEW_SYMBOL
rule 28   sensor_symbol -> TK_SENSOR_SYMBOL
rule 29   axiom_symbol -> TK_NEW_SYMBOL
rule 30   axiom_symbol -> TK_AXIOM_SYMBOL
rule 31   domain_requires -> TK_OPEN KW_REQS require_list TK_CLOSE
rule 32   domain_requires -> TK_OPEN KW_REQS error TK_CLOSE
rule 33   require_list -> require_list KW_TRANSLATION
rule 34   require_list -> require_list TK_KEYWORD
rule 35   require_list ->		/* empty */
rule 36   domain_predicates -> TK_OPEN KW_PREDS predicate_list TK_CLOSE
rule 37   domain_predicates -> TK_OPEN KW_PREDS error TK_CLOSE
rule 38   predicate_list -> predicate_list predicate_decl
rule 39   predicate_list -> predicate_decl
rule 40   predicate_decl -> TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE
rule 41   predicate_decl -> TK_OPEN error TK_CLOSE
rule 42   param_list -> untyped_param_list
rule 43   param_list -> typed_param_list
rule 44   param_list ->		/* empty */
rule 45   untyped_param_list -> param_sym_list
rule 46   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list
rule 47   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL
rule 48   param_sym_list -> param_sym_list new_var_symbol
rule 49   param_sym_list -> new_var_symbol
rule 50   new_var_symbol -> TK_NEW_VAR_SYMBOL
rule 51   domain_types -> TK_OPEN KW_TYPES primitive_type_list TK_CLOSE
rule 52   domain_types -> TK_OPEN KW_TYPES typed_type_list TK_CLOSE
rule 53   typed_type_list -> primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list
rule 54   typed_type_list -> primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list
rule 55   typed_type_list ->		/* empty */
rule 56   primitive_type_list -> primitive_type_list primitive_type
rule 57   primitive_type_list -> primitive_type
rule 58   primitive_type -> TK_TYPE_SYMBOL
rule 59   primitive_type -> TK_NEW_SYMBOL
rule 60   domain_constants -> TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE
rule 61   domain_constants -> TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE
rule 62   domain_constants -> TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE
rule 63   domain_constants -> TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE
rule 64   @1 ->		/* empty */
rule 65   typed_constant_list -> constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list
rule 66   typed_constant_list ->		/* empty */
rule 67   untyped_constant_list -> constant_sym_list
rule 68   constant_sym_list -> constant_sym_list TK_NEW_SYMBOL
rule 69   constant_sym_list -> TK_NEW_SYMBOL
rule 70   domain_schemas -> action_decl
rule 71   domain_schemas -> axiom_decl
rule 72   domain_schemas -> sensor_decl
rule 73   domain_schemas -> observable_decl
rule 74   domain_schemas -> sticky_decl
rule 75   domain_schemas -> multivalued_variable_decl
rule 76   @2 ->		/* empty */
rule 77   action_decl -> TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE
rule 78   action_decl -> TK_OPEN KW_ACTION error TK_CLOSE
rule 79   action_elements -> action_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 80   action_elements -> action_elements KW_PRE condition
rule 81   action_elements -> action_elements KW_EFFECT action_effect
rule 82   action_elements -> action_elements KW_OBSERVE positive_atomic_effect_list
rule 83   action_elements -> action_elements KW_SENSING_MODEL sensing_model
rule 84   action_elements ->		/* empty */
rule 85   condition -> single_condition
rule 86   condition -> TK_OPEN KW_AND condition_list TK_CLOSE
rule 87   condition -> TK_OPEN KW_OR condition_list TK_CLOSE
rule 88   condition_list -> condition_list single_condition
rule 89   condition_list -> single_condition
rule 90   single_condition -> literal
rule 91   literal -> positive_literal
rule 92   literal -> negative_literal
rule 93   positive_literal -> TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE
rule 94   positive_literal -> TK_OPEN TK_EQ argument_list TK_CLOSE
rule 95   negative_literal -> TK_OPEN KW_NOT positive_literal TK_CLOSE
rule 96   argument_list -> argument_list TK_VAR_SYMBOL
rule 97   argument_list -> argument_list TK_OBJ_SYMBOL
rule 98   argument_list ->		/* empty */
rule 99   action_effect -> single_action_effect
rule 100  action_effect -> TK_OPEN KW_AND action_effect_list TK_CLOSE
rule 101  action_effect_list -> action_effect_list single_action_effect
rule 102  action_effect_list -> single_action_effect
rule 103  single_action_effect -> atomic_effect
rule 104  single_action_effect -> conditional_effect
rule 105  single_action_effect -> forall_effect
rule 106  conditional_effect -> TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE
rule 107  @3 ->		/* empty */
rule 108  @4 ->		/* empty */
rule 109  forall_effect -> TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 action_effect TK_CLOSE
rule 110  atomic_effect_kw_list -> TK_OPEN KW_AND atomic_effect_list TK_CLOSE
rule 111  atomic_effect_kw_list -> atomic_effect
rule 112  atomic_effect_list -> atomic_effect_list atomic_effect
rule 113  atomic_effect_list -> atomic_effect
rule 114  positive_atomic_effect_list -> positive_atomic_effect_list positive_atomic_effect
rule 115  positive_atomic_effect_list -> positive_atomic_effect
rule 116  atomic_effect -> literal
rule 117  positive_atomic_effect -> positive_literal
rule 118  sensing_model -> action_effect
rule 119  sensing_model ->		/* empty */
rule 120  @5 ->		/* empty */
rule 121  axiom_decl -> TK_OPEN KW_AXIOM axiom_symbol @5 axiom_elements TK_CLOSE
rule 122  axiom_decl -> TK_OPEN KW_AXIOM error TK_CLOSE
rule 123  axiom_elements -> axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 124  axiom_elements -> axiom_elements KW_BODY condition
rule 125  axiom_elements -> axiom_elements KW_HEAD atomic_effect_kw_list
rule 126  axiom_elements ->		/* empty */
rule 127  @6 ->		/* empty */
rule 128  sensor_decl -> TK_OPEN KW_SENSOR sensor_symbol @6 sensor_elements TK_CLOSE
rule 129  sensor_decl -> TK_OPEN KW_SENSOR error TK_CLOSE
rule 130  sensor_elements -> sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 131  sensor_elements -> sensor_elements KW_COND condition
rule 132  sensor_elements -> sensor_elements KW_SENSE positive_atomic_effect_list
rule 133  sensor_elements ->		/* empty */
rule 134  @7 ->		/* empty */
rule 135  observable_decl -> TK_OPEN KW_OBSERVABLE @7 fluent_list_decl TK_CLOSE
rule 136  observable_decl -> TK_OPEN KW_OBSERVABLE error TK_CLOSE
rule 137  fluent_list_decl -> fluent_list_decl fluent_decl
rule 138  fluent_list_decl -> fluent_decl
rule 139  fluent_decl -> positive_atomic_effect
rule 140  fluent_decl -> forall_effect
rule 141  @8 ->		/* empty */
rule 142  sticky_decl -> TK_OPEN KW_STICKY @8 fluent_list_decl TK_CLOSE
rule 143  sticky_decl -> TK_OPEN KW_STICKY error TK_CLOSE
rule 144  @9 ->		/* empty */
rule 145  multivalued_variable_decl -> TK_OPEN multivalued_variable_type variable_symbol @9 optional_variable_parameters fluent_list_decl rest_variable_decl TK_CLOSE
rule 146  @10 ->		/* empty */
rule 147  multivalued_variable_decl -> TK_OPEN multivalued_variable_type TK_OPEN variable_symbol param_list TK_CLOSE @10 fluent_list_decl rest_variable_decl TK_CLOSE
rule 148  multivalued_variable_decl -> TK_OPEN KW_VARIABLE error TK_CLOSE
rule 149  multivalued_variable_type -> KW_VARIABLE
rule 150  multivalued_variable_type -> KW_OBS_VARIABLE
rule 151  optional_variable_parameters -> KW_ARGS TK_OPEN param_list TK_CLOSE
rule 152  optional_variable_parameters ->		/* empty */
rule 153  rest_variable_decl -> KW_OBSERVABLE
rule 154  rest_variable_decl ->		/* empty */
rule 155  domain_default_sensing_model -> TK_OPEN KW_DEFAULT_SENSING_MODEL sensing_model TK_CLOSE
rule 156  @11 ->		/* empty */
rule 157  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @11 problem_elements TK_CLOSE
rule 158  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE
rule 159  problem_elements -> problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE
rule 160  problem_elements -> problem_elements domain_requires
rule 161  problem_elements -> problem_elements domain_constants
rule 162  problem_elements -> problem_elements initial_state
rule 163  problem_elements -> problem_elements hidden_state
rule 164  problem_elements -> problem_elements goal_spec
rule 165  problem_elements ->		/* empty */
rule 166  initial_state -> TK_OPEN KW_INIT TK_CLOSE
rule 167  initial_state -> TK_OPEN KW_INIT init_elements TK_CLOSE
rule 168  initial_state -> TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE
rule 169  init_elements -> init_elements single_init_element
rule 170  init_elements -> single_init_element
rule 171  single_init_element -> literal
rule 172  single_init_element -> invariant
rule 173  single_init_element -> clause
rule 174  single_init_element -> oneof
rule 175  at_least_one_invariant -> TK_OPEN KW_INVARIANT condition_list TK_CLOSE
rule 176  at_least_one_invariant -> TK_OPEN KW_AT_LEAST_ONE condition_list TK_CLOSE
rule 177  at_most_one_invariant -> TK_OPEN KW_AT_MOST_ONE condition_list TK_CLOSE
rule 178  exactly_one_invariant -> TK_OPEN KW_EXACTLY_ONE condition_list TK_CLOSE
rule 179  invariant -> at_least_one_invariant
rule 180  invariant -> at_most_one_invariant
rule 181  invariant -> exactly_one_invariant
rule 182  clause -> TK_OPEN KW_OR condition_list TK_CLOSE
rule 183  oneof -> TK_OPEN KW_ONEOF condition_list TK_CLOSE
rule 184  hidden_state -> TK_OPEN KW_HIDDEN init_elements TK_CLOSE
rule 185  goal_spec -> TK_OPEN KW_GOAL single_goal TK_CLOSE
rule 186  goal_spec -> TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE
rule 187  goal_list -> goal_list single_goal
rule 188  goal_list -> single_goal
rule 189  single_goal -> positive_literal
rule 190  single_goal -> negative_literal

Terminals, with rules where they appear

$ (-1)
error (256) 5 32 37 41 78 122 129 136 143 148 158
TK_OPEN (258) 4 5 13 31 32 36 37 40 41 51 52 60 61 62 63 77 78 79 86
    87 93 94 95 100 106 109 110 121 122 123 128 129 130 135 136 142
    143 145 147 148 151 155 157 158 159 166 167 168 175 176 177 178
    182 183 184 185 186
TK_CLOSE (259) 4 5 13 31 32 36 37 40 41 51 52 60 61 62 63 77 78 79
    86 87 93 94 95 100 106 109 110 121 122 123 128 129 130 135 136
    142 143 145 147 148 151 155 157 158 159 166 167 168 175 176 177
    178 182 183 184 185 186
TK_OPEN_SQ (260)
TK_CLOSE_SQ (261)
TK_EQ (262) 94
TK_HYPHEN (263) 46 47 53 54 65
TK_NEW_SYMBOL (264) 14 23 25 27 29 40 54 59 68 69
TK_OBJ_SYMBOL (265) 15 97
TK_TYPE_SYMBOL (266) 16 46 47 53 58 65
TK_PRED_SYMBOL (267) 17 93
TK_VAR_SYMBOL (268) 18 96
TK_ACTION_SYMBOL (269) 19 26
TK_AXIOM_SYMBOL (270) 20 30
TK_SENSOR_SYMBOL (271) 21 28
TK_MISC_SYMBOL (272) 22
TK_KEYWORD (273) 34
TK_NEW_VAR_SYMBOL (274) 50
TK_VARNAME_SYMBOL (275) 24
TK_INT (276)
KW_REQS (277) 31 32
KW_TRANSLATION (278) 33
KW_CONSTANTS (279) 60 62
KW_PREDS (280) 36 37
KW_TYPES (281) 51 52
KW_DEFINE (282) 4 5 157 158
KW_DOMAIN (283) 13
KW_ACTION (284) 77 78
KW_ARGS (285) 79 123 130 151
KW_PRE (286) 80
KW_EFFECT (287) 81
KW_AND (288) 86 100 110 168 186
KW_OR (289) 87 182
KW_EXISTS (290)
KW_FORALL (291) 109
KW_NOT (292) 95
KW_WHEN (293) 106
KW_ONEOF (294) 183
KW_PROBLEM (295) 157 158
KW_FORDOMAIN (296) 159
KW_OBJECTS (297) 61 63
KW_INIT (298) 166 167 168
KW_GOAL (299) 185 186
KW_SENSOR (300) 128 129
KW_SENSE (301) 132
KW_OBSERVE (302) 82
KW_AXIOM (303) 121 122
KW_COND (304) 131
KW_OBSERVABLE (305) 135 136 153
KW_BODY (306) 124
KW_HEAD (307) 125
KW_STICKY (308) 142 143
KW_FLUENTS (309)
KW_HIDDEN (310) 184
KW_INVARIANT (311) 175
KW_AT_LEAST_ONE (312) 176
KW_AT_MOST_ONE (313) 177
KW_EXACTLY_ONE (314) 178
KW_VARIABLE (315) 148 149
KW_OBS_VARIABLE (316) 150
KW_VALUES (317)
KW_SENSING_MODEL (318) 83
KW_DEFAULT_SENSING_MODEL (319) 155

Nonterminals, with rules where they appear

pddl_decls (65)
    on left: 1 2 3, on right: 1 2
pddl_domain (66)
    on left: 4 5, on right: 1
domain_elements (67)
    on left: 6 7 8 9 10 11 12, on right: 4 6 7 8 9 10 11
domain_name (68)
    on left: 13, on right: 4 5
any_symbol (69)
    on left: 14 15 16 17 18 19 20 21 22, on right: 13 157 159
variable_symbol (70)
    on left: 23 24, on right: 145 147
action_symbol (71)
    on left: 25 26, on right: 77
sensor_symbol (72)
    on left: 27 28, on right: 128
axiom_symbol (73)
    on left: 29 30, on right: 121
domain_requires (74)
    on left: 31 32, on right: 6 160
require_list (75)
    on left: 33 34 35, on right: 31 33 34
domain_predicates (76)
    on left: 36 37, on right: 9
predicate_list (77)
    on left: 38 39, on right: 36 38
predicate_decl (78)
    on left: 40 41, on right: 38 39
param_list (79)
    on left: 42 43 44, on right: 40 79 109 123 130 147 151
untyped_param_list (80)
    on left: 45, on right: 42
typed_param_list (81)
    on left: 46 47, on right: 43 46
param_sym_list (82)
    on left: 48 49, on right: 45 46 47 48
new_var_symbol (83)
    on left: 50, on right: 48 49
domain_types (84)
    on left: 51 52, on right: 7
typed_type_list (85)
    on left: 53 54 55, on right: 52 53 54
primitive_type_list (86)
    on left: 56 57, on right: 51 53 54 56
primitive_type (87)
    on left: 58 59, on right: 56 57
domain_constants (88)
    on left: 60 61 62 63, on right: 8 161
typed_constant_list (89)
    on left: 65 66, on right: 60 61 65
@1 (90)
    on left: 64, on right: 65
untyped_constant_list (91)
    on left: 67, on right: 62 63
constant_sym_list (92)
    on left: 68 69, on right: 65 67 68
domain_schemas (93)
    on left: 70 71 72 73 74 75, on right: 10
action_decl (94)
    on left: 77 78, on right: 70
@2 (95)
    on left: 76, on right: 77
action_elements (96)
    on left: 79 80 81 82 83 84, on right: 77 79 80 81 82 83
condition (97)
    on left: 85 86 87, on right: 80 106 124 131
condition_list (98)
    on left: 88 89, on right: 86 87 88 175 176 177 178 182 183
single_condition (99)
    on left: 90, on right: 85 88 89
literal (100)
    on left: 91 92, on right: 90 116 171
positive_literal (101)
    on left: 93 94, on right: 91 95 117 189
negative_literal (102)
    on left: 95, on right: 92 190
argument_list (103)
    on left: 96 97 98, on right: 93 94 96 97
action_effect (104)
    on left: 99 100, on right: 81 109 118
action_effect_list (105)
    on left: 101 102, on right: 100 101
single_action_effect (106)
    on left: 103 104 105, on right: 99 101 102
conditional_effect (107)
    on left: 106, on right: 104
forall_effect (108)
    on left: 109, on right: 105 140
@3 (109)
    on left: 107, on right: 109
@4 (110)
    on left: 108, on right: 109
atomic_effect_kw_list (111)
    on left: 110 111, on right: 106 125
atomic_effect_list (112)
    on left: 112 113, on right: 110 112
positive_atomic_effect_list (113)
    on left: 114 115, on right: 82 114 132
atomic_effect (114)
    on left: 116, on right: 103 111 112 113
positive_atomic_effect (115)
    on left: 117, on right: 114 115 139
sensing_model (116)
    on left: 118 119, on right: 83 155
axiom_decl (117)
    on left: 121 122, on right: 71
@5 (118)
    on left: 120, on right: 121
axiom_elements (119)
    on left: 123 124 125 126, on right: 121 123 124 125
sensor_decl (120)
    on left: 128 129, on right: 72
@6 (121)
    on left: 127, on right: 128
sensor_elements (122)
    on left: 130 131 132 133, on right: 128 130 131 132
observable_decl (123)
    on left: 135 136, on right: 73
@7 (124)
    on left: 134, on right: 135
fluent_list_decl (125)
    on left: 137 138, on right: 135 137 142 145 147
fluent_decl (126)
    on left: 139 140, on right: 137 138
sticky_decl (127)
    on left: 142 143, on right: 74
@8 (128)
    on left: 141, on right: 142
multivalued_variable_decl (129)
    on left: 145 147 148, on right: 75
@9 (130)
    on left: 144, on right: 145
@10 (131)
    on left: 146, on right: 147
multivalued_variable_type (132)
    on left: 149 150, on right: 145 147
optional_variable_parameters (133)
    on left: 151 152, on right: 145
rest_variable_decl (134)
    on left: 153 154, on right: 145 147
domain_default_sensing_model (135)
    on left: 155, on right: 11
pddl_problem (136)
    on left: 157 158, on right: 2
@11 (137)
    on left: 156, on right: 157
problem_elements (138)
    on left: 159 160 161 162 163 164 165, on right: 157 159 160 161
    162 163 164
initial_state (139)
    on left: 166 167 168, on right: 162
init_elements (140)
    on left: 169 170, on right: 167 168 169 184
single_init_element (141)
    on left: 171 172 173 174, on right: 169 170
at_least_one_invariant (142)
    on left: 175 176, on right: 179
at_most_one_invariant (143)
    on left: 177, on right: 180
exactly_one_invariant (144)
    on left: 178, on right: 181
invariant (145)
    on left: 179 180 181, on right: 172
clause (146)
    on left: 182, on right: 173
oneof (147)
    on left: 183, on right: 174
hidden_state (148)
    on left: 184, on right: 163
goal_spec (149)
    on left: 185 186, on right: 164
goal_list (150)
    on left: 187 188, on right: 186 187
single_goal (151)
    on left: 189 190, on right: 185 187 188


state 0

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 332
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 1

    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @11 problem_elements TK_CLOSE   (rule 157)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 158)

    KW_DEFINE	shift, and go to state 4



state 2

    pddl_decls  ->  pddl_domain . pddl_decls   (rule 1)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 5
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 3

    pddl_decls  ->  pddl_problem . pddl_decls   (rule 2)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 6
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 4

    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @11 problem_elements TK_CLOSE   (rule 157)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 158)

    TK_OPEN	shift, and go to state 7

    domain_name	go to state 8



state 5

    pddl_decls  ->  pddl_domain pddl_decls .   (rule 1)

    $default	reduce using rule 1 (pddl_decls)



state 6

    pddl_decls  ->  pddl_problem pddl_decls .   (rule 2)

    $default	reduce using rule 2 (pddl_decls)



state 7

    domain_name  ->  TK_OPEN . KW_DOMAIN any_symbol TK_CLOSE   (rule 13)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM any_symbol TK_CLOSE @11 problem_elements TK_CLOSE   (rule 157)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM error TK_CLOSE   (rule 158)

    KW_DOMAIN	shift, and go to state 9
    KW_PROBLEM	shift, and go to state 10



state 8

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . error TK_CLOSE   (rule 5)

    error	shift, and go to state 11

    TK_OPEN	reduce using rule 12 (domain_elements)
    TK_CLOSE	reduce using rule 12 (domain_elements)
    KW_EXISTS	reduce using rule 12 (domain_elements)
    KW_FORALL	reduce using rule 12 (domain_elements)

    domain_elements	go to state 12



state 9

    domain_name  ->  TK_OPEN KW_DOMAIN . any_symbol TK_CLOSE   (rule 13)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 22



state 10

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . any_symbol TK_CLOSE @11 problem_elements TK_CLOSE   (rule 157)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . error TK_CLOSE   (rule 158)

    error	shift, and go to state 23
    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 24



state 11

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error . TK_CLOSE   (rule 5)

    TK_CLOSE	shift, and go to state 25



state 12

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements . TK_CLOSE   (rule 4)
    domain_elements  ->  domain_elements . domain_requires   (rule 6)
    domain_elements  ->  domain_elements . domain_types   (rule 7)
    domain_elements  ->  domain_elements . domain_constants   (rule 8)
    domain_elements  ->  domain_elements . domain_predicates   (rule 9)
    domain_elements  ->  domain_elements . domain_schemas   (rule 10)
    domain_elements  ->  domain_elements . domain_default_sensing_model   (rule 11)

    TK_OPEN	shift, and go to state 26
    TK_CLOSE	shift, and go to state 27

    domain_requires	go to state 28
    domain_predicates	go to state 29
    domain_types	go to state 30
    domain_constants	go to state 31
    domain_schemas	go to state 32
    action_decl	go to state 33
    axiom_decl	go to state 34
    sensor_decl	go to state 35
    observable_decl	go to state 36
    sticky_decl	go to state 37
    multivalued_variable_decl	go to state 38
    domain_default_sensing_model	go to state 39



state 13

    any_symbol  ->  TK_NEW_SYMBOL .   (rule 14)

    $default	reduce using rule 14 (any_symbol)



state 14

    any_symbol  ->  TK_OBJ_SYMBOL .   (rule 15)

    $default	reduce using rule 15 (any_symbol)



state 15

    any_symbol  ->  TK_TYPE_SYMBOL .   (rule 16)

    $default	reduce using rule 16 (any_symbol)



state 16

    any_symbol  ->  TK_PRED_SYMBOL .   (rule 17)

    $default	reduce using rule 17 (any_symbol)



state 17

    any_symbol  ->  TK_VAR_SYMBOL .   (rule 18)

    $default	reduce using rule 18 (any_symbol)



state 18

    any_symbol  ->  TK_ACTION_SYMBOL .   (rule 19)

    $default	reduce using rule 19 (any_symbol)



state 19

    any_symbol  ->  TK_AXIOM_SYMBOL .   (rule 20)

    $default	reduce using rule 20 (any_symbol)



state 20

    any_symbol  ->  TK_SENSOR_SYMBOL .   (rule 21)

    $default	reduce using rule 21 (any_symbol)



state 21

    any_symbol  ->  TK_MISC_SYMBOL .   (rule 22)

    $default	reduce using rule 22 (any_symbol)



state 22

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol . TK_CLOSE   (rule 13)

    TK_CLOSE	shift, and go to state 40



state 23

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error . TK_CLOSE   (rule 158)

    TK_CLOSE	shift, and go to state 41



state 24

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol . TK_CLOSE @11 problem_elements TK_CLOSE   (rule 157)

    TK_CLOSE	shift, and go to state 42



state 25

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error TK_CLOSE .   (rule 5)

    $default	reduce using rule 5 (pddl_domain)



state 26

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 31)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 32)
    domain_predicates  ->  TK_OPEN . KW_PREDS predicate_list TK_CLOSE   (rule 36)
    domain_predicates  ->  TK_OPEN . KW_PREDS error TK_CLOSE   (rule 37)
    domain_types  ->  TK_OPEN . KW_TYPES primitive_type_list TK_CLOSE   (rule 51)
    domain_types  ->  TK_OPEN . KW_TYPES typed_type_list TK_CLOSE   (rule 52)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 62)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 63)
    action_decl  ->  TK_OPEN . KW_ACTION action_symbol @2 action_elements TK_CLOSE   (rule 77)
    action_decl  ->  TK_OPEN . KW_ACTION error TK_CLOSE   (rule 78)
    axiom_decl  ->  TK_OPEN . KW_AXIOM axiom_symbol @5 axiom_elements TK_CLOSE   (rule 121)
    axiom_decl  ->  TK_OPEN . KW_AXIOM error TK_CLOSE   (rule 122)
    sensor_decl  ->  TK_OPEN . KW_SENSOR sensor_symbol @6 sensor_elements TK_CLOSE   (rule 128)
    sensor_decl  ->  TK_OPEN . KW_SENSOR error TK_CLOSE   (rule 129)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE @7 fluent_list_decl TK_CLOSE   (rule 135)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE error TK_CLOSE   (rule 136)
    sticky_decl  ->  TK_OPEN . KW_STICKY @8 fluent_list_decl TK_CLOSE   (rule 142)
    sticky_decl  ->  TK_OPEN . KW_STICKY error TK_CLOSE   (rule 143)
    multivalued_variable_decl  ->  TK_OPEN . multivalued_variable_type variable_symbol @9 optional_variable_parameters fluent_list_decl rest_variable_decl TK_CLOSE   (rule 145)
    multivalued_variable_decl  ->  TK_OPEN . multivalued_variable_type TK_OPEN variable_symbol param_list TK_CLOSE @10 fluent_list_decl rest_variable_decl TK_CLOSE   (rule 147)
    multivalued_variable_decl  ->  TK_OPEN . KW_VARIABLE error TK_CLOSE   (rule 148)
    domain_default_sensing_model  ->  TK_OPEN . KW_DEFAULT_SENSING_MODEL sensing_model TK_CLOSE   (rule 155)

    KW_REQS	shift, and go to state 43
    KW_CONSTANTS	shift, and go to state 44
    KW_PREDS	shift, and go to state 45
    KW_TYPES	shift, and go to state 46
    KW_ACTION	shift, and go to state 47
    KW_OBJECTS	shift, and go to state 48
    KW_SENSOR	shift, and go to state 49
    KW_AXIOM	shift, and go to state 50
    KW_OBSERVABLE	shift, and go to state 51
    KW_STICKY	shift, and go to state 52
    KW_VARIABLE	shift, and go to state 53
    KW_OBS_VARIABLE	shift, and go to state 54
    KW_DEFAULT_SENSING_MODEL	shift, and go to state 55

    multivalued_variable_type	go to state 56



state 27

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE .   (rule 4)

    $default	reduce using rule 4 (pddl_domain)



state 28

    domain_elements  ->  domain_elements domain_requires .   (rule 6)

    $default	reduce using rule 6 (domain_elements)



state 29

    domain_elements  ->  domain_elements domain_predicates .   (rule 9)

    $default	reduce using rule 9 (domain_elements)



state 30

    domain_elements  ->  domain_elements domain_types .   (rule 7)

    $default	reduce using rule 7 (domain_elements)



state 31

    domain_elements  ->  domain_elements domain_constants .   (rule 8)

    $default	reduce using rule 8 (domain_elements)



state 32

    domain_elements  ->  domain_elements domain_schemas .   (rule 10)

    $default	reduce using rule 10 (domain_elements)



state 33

    domain_schemas  ->  action_decl .   (rule 70)

    $default	reduce using rule 70 (domain_schemas)



state 34

    domain_schemas  ->  axiom_decl .   (rule 71)

    $default	reduce using rule 71 (domain_schemas)



state 35

    domain_schemas  ->  sensor_decl .   (rule 72)

    $default	reduce using rule 72 (domain_schemas)



state 36

    domain_schemas  ->  observable_decl .   (rule 73)

    $default	reduce using rule 73 (domain_schemas)



state 37

    domain_schemas  ->  sticky_decl .   (rule 74)

    $default	reduce using rule 74 (domain_schemas)



state 38

    domain_schemas  ->  multivalued_variable_decl .   (rule 75)

    $default	reduce using rule 75 (domain_schemas)



state 39

    domain_elements  ->  domain_elements domain_default_sensing_model .   (rule 11)

    $default	reduce using rule 11 (domain_elements)



state 40

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol TK_CLOSE .   (rule 13)

    $default	reduce using rule 13 (domain_name)



state 41

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE .   (rule 158)

    $default	reduce using rule 158 (pddl_problem)



state 42

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE . @11 problem_elements TK_CLOSE   (rule 157)

    $default	reduce using rule 156 (@11)

    @11 	go to state 57



state 43

    domain_requires  ->  TK_OPEN KW_REQS . require_list TK_CLOSE   (rule 31)
    domain_requires  ->  TK_OPEN KW_REQS . error TK_CLOSE   (rule 32)

    error	shift, and go to state 58

    TK_CLOSE	reduce using rule 35 (require_list)
    TK_KEYWORD	reduce using rule 35 (require_list)
    KW_TRANSLATION	reduce using rule 35 (require_list)
    KW_FORALL	reduce using rule 35 (require_list)
    KW_OBSERVABLE	reduce using rule 35 (require_list)
    KW_HIDDEN	reduce using rule 35 (require_list)

    require_list	go to state 59



state 44

    domain_constants  ->  TK_OPEN KW_CONSTANTS . typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN KW_CONSTANTS . untyped_constant_list TK_CLOSE   (rule 62)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 66 (typed_constant_list)

    typed_constant_list	go to state 61
    untyped_constant_list	go to state 62
    constant_sym_list	go to state 63



state 45

    domain_predicates  ->  TK_OPEN KW_PREDS . predicate_list TK_CLOSE   (rule 36)
    domain_predicates  ->  TK_OPEN KW_PREDS . error TK_CLOSE   (rule 37)

    error	shift, and go to state 64
    TK_OPEN	shift, and go to state 65

    predicate_list	go to state 66
    predicate_decl	go to state 67



state 46

    domain_types  ->  TK_OPEN KW_TYPES . primitive_type_list TK_CLOSE   (rule 51)
    domain_types  ->  TK_OPEN KW_TYPES . typed_type_list TK_CLOSE   (rule 52)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 55 (typed_type_list)

    typed_type_list	go to state 70
    primitive_type_list	go to state 71
    primitive_type	go to state 72



state 47

    action_decl  ->  TK_OPEN KW_ACTION . action_symbol @2 action_elements TK_CLOSE   (rule 77)
    action_decl  ->  TK_OPEN KW_ACTION . error TK_CLOSE   (rule 78)

    error	shift, and go to state 73
    TK_NEW_SYMBOL	shift, and go to state 74
    TK_ACTION_SYMBOL	shift, and go to state 75

    action_symbol	go to state 76



state 48

    domain_constants  ->  TK_OPEN KW_OBJECTS . typed_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN KW_OBJECTS . untyped_constant_list TK_CLOSE   (rule 63)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 66 (typed_constant_list)

    typed_constant_list	go to state 77
    untyped_constant_list	go to state 78
    constant_sym_list	go to state 63



state 49

    sensor_decl  ->  TK_OPEN KW_SENSOR . sensor_symbol @6 sensor_elements TK_CLOSE   (rule 128)
    sensor_decl  ->  TK_OPEN KW_SENSOR . error TK_CLOSE   (rule 129)

    error	shift, and go to state 79
    TK_NEW_SYMBOL	shift, and go to state 80
    TK_SENSOR_SYMBOL	shift, and go to state 81

    sensor_symbol	go to state 82



state 50

    axiom_decl  ->  TK_OPEN KW_AXIOM . axiom_symbol @5 axiom_elements TK_CLOSE   (rule 121)
    axiom_decl  ->  TK_OPEN KW_AXIOM . error TK_CLOSE   (rule 122)

    error	shift, and go to state 83
    TK_NEW_SYMBOL	shift, and go to state 84
    TK_AXIOM_SYMBOL	shift, and go to state 85

    axiom_symbol	go to state 86



state 51

    observable_decl  ->  TK_OPEN KW_OBSERVABLE . @7 fluent_list_decl TK_CLOSE   (rule 135)
    observable_decl  ->  TK_OPEN KW_OBSERVABLE . error TK_CLOSE   (rule 136)

    error	shift, and go to state 87

    TK_OPEN	reduce using rule 134 (@7)
    KW_EXISTS	reduce using rule 134 (@7)

    @7  	go to state 88



state 52

    sticky_decl  ->  TK_OPEN KW_STICKY . @8 fluent_list_decl TK_CLOSE   (rule 142)
    sticky_decl  ->  TK_OPEN KW_STICKY . error TK_CLOSE   (rule 143)

    error	shift, and go to state 89

    TK_OPEN	reduce using rule 141 (@8)
    KW_EXISTS	reduce using rule 141 (@8)

    @8  	go to state 90



state 53

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE . error TK_CLOSE   (rule 148)
    multivalued_variable_type  ->  KW_VARIABLE .   (rule 149)

    error	shift, and go to state 91

    TK_OPEN	reduce using rule 149 (multivalued_variable_type)
    TK_NEW_SYMBOL	reduce using rule 149 (multivalued_variable_type)
    TK_VARNAME_SYMBOL	reduce using rule 149 (multivalued_variable_type)
    KW_EXISTS	reduce using rule 149 (multivalued_variable_type)
    KW_FORDOMAIN	reduce using rule 149 (multivalued_variable_type)
    KW_HEAD	reduce using rule 149 (multivalued_variable_type)



state 54

    multivalued_variable_type  ->  KW_OBS_VARIABLE .   (rule 150)

    $default	reduce using rule 150 (multivalued_variable_type)



state 55

    domain_default_sensing_model  ->  TK_OPEN KW_DEFAULT_SENSING_MODEL . sensing_model TK_CLOSE   (rule 155)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 119 (sensing_model)

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    action_effect	go to state 96
    single_action_effect	go to state 97
    conditional_effect	go to state 98
    forall_effect	go to state 99
    atomic_effect	go to state 100
    sensing_model	go to state 101



state 56

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type . variable_symbol @9 optional_variable_parameters fluent_list_decl rest_variable_decl TK_CLOSE   (rule 145)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type . TK_OPEN variable_symbol param_list TK_CLOSE @10 fluent_list_decl rest_variable_decl TK_CLOSE   (rule 147)

    TK_OPEN	shift, and go to state 102
    TK_NEW_SYMBOL	shift, and go to state 103
    TK_VARNAME_SYMBOL	shift, and go to state 104

    variable_symbol	go to state 105



state 57

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @11 . problem_elements TK_CLOSE   (rule 157)

    $default	reduce using rule 165 (problem_elements)

    problem_elements	go to state 106



state 58

    domain_requires  ->  TK_OPEN KW_REQS error . TK_CLOSE   (rule 32)

    TK_CLOSE	shift, and go to state 107



state 59

    domain_requires  ->  TK_OPEN KW_REQS require_list . TK_CLOSE   (rule 31)
    require_list  ->  require_list . KW_TRANSLATION   (rule 33)
    require_list  ->  require_list . TK_KEYWORD   (rule 34)

    TK_CLOSE	shift, and go to state 108
    TK_KEYWORD	shift, and go to state 109
    KW_TRANSLATION	shift, and go to state 110



state 60

    constant_sym_list  ->  TK_NEW_SYMBOL .   (rule 69)

    $default	reduce using rule 69 (constant_sym_list)



state 61

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list . TK_CLOSE   (rule 60)

    TK_CLOSE	shift, and go to state 111



state 62

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list . TK_CLOSE   (rule 62)

    TK_CLOSE	shift, and go to state 112



state 63

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 65)
    untyped_constant_list  ->  constant_sym_list .   (rule 67)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 68)

    TK_HYPHEN	shift, and go to state 113
    TK_NEW_SYMBOL	shift, and go to state 114

    $default	reduce using rule 67 (untyped_constant_list)



state 64

    domain_predicates  ->  TK_OPEN KW_PREDS error . TK_CLOSE   (rule 37)

    TK_CLOSE	shift, and go to state 115



state 65

    predicate_decl  ->  TK_OPEN . TK_NEW_SYMBOL param_list TK_CLOSE   (rule 40)
    predicate_decl  ->  TK_OPEN . error TK_CLOSE   (rule 41)

    error	shift, and go to state 116
    TK_NEW_SYMBOL	shift, and go to state 117



state 66

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list . TK_CLOSE   (rule 36)
    predicate_list  ->  predicate_list . predicate_decl   (rule 38)

    TK_OPEN	shift, and go to state 65
    TK_CLOSE	shift, and go to state 118

    predicate_decl	go to state 119



state 67

    predicate_list  ->  predicate_decl .   (rule 39)

    $default	reduce using rule 39 (predicate_list)



state 68

    primitive_type  ->  TK_NEW_SYMBOL .   (rule 59)

    $default	reduce using rule 59 (primitive_type)



state 69

    primitive_type  ->  TK_TYPE_SYMBOL .   (rule 58)

    $default	reduce using rule 58 (primitive_type)



state 70

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list . TK_CLOSE   (rule 52)

    TK_CLOSE	shift, and go to state 120



state 71

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list . TK_CLOSE   (rule 51)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 53)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 54)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 56)

    TK_CLOSE	shift, and go to state 121
    TK_HYPHEN	shift, and go to state 122
    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    primitive_type	go to state 123



state 72

    primitive_type_list  ->  primitive_type .   (rule 57)

    $default	reduce using rule 57 (primitive_type_list)



state 73

    action_decl  ->  TK_OPEN KW_ACTION error . TK_CLOSE   (rule 78)

    TK_CLOSE	shift, and go to state 124



state 74

    action_symbol  ->  TK_NEW_SYMBOL .   (rule 25)

    $default	reduce using rule 25 (action_symbol)



state 75

    action_symbol  ->  TK_ACTION_SYMBOL .   (rule 26)

    $default	reduce using rule 26 (action_symbol)



state 76

    action_decl  ->  TK_OPEN KW_ACTION action_symbol . @2 action_elements TK_CLOSE   (rule 77)

    $default	reduce using rule 76 (@2)

    @2  	go to state 125



state 77

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list . TK_CLOSE   (rule 61)

    TK_CLOSE	shift, and go to state 126



state 78

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list . TK_CLOSE   (rule 63)

    TK_CLOSE	shift, and go to state 127



state 79

    sensor_decl  ->  TK_OPEN KW_SENSOR error . TK_CLOSE   (rule 129)

    TK_CLOSE	shift, and go to state 128



state 80

    sensor_symbol  ->  TK_NEW_SYMBOL .   (rule 27)

    $default	reduce using rule 27 (sensor_symbol)



state 81

    sensor_symbol  ->  TK_SENSOR_SYMBOL .   (rule 28)

    $default	reduce using rule 28 (sensor_symbol)



state 82

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol . @6 sensor_elements TK_CLOSE   (rule 128)

    $default	reduce using rule 127 (@6)

    @6  	go to state 129



state 83

    axiom_decl  ->  TK_OPEN KW_AXIOM error . TK_CLOSE   (rule 122)

    TK_CLOSE	shift, and go to state 130



state 84

    axiom_symbol  ->  TK_NEW_SYMBOL .   (rule 29)

    $default	reduce using rule 29 (axiom_symbol)



state 85

    axiom_symbol  ->  TK_AXIOM_SYMBOL .   (rule 30)

    $default	reduce using rule 30 (axiom_symbol)



state 86

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol . @5 axiom_elements TK_CLOSE   (rule 121)

    $default	reduce using rule 120 (@5)

    @5  	go to state 131



state 87

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error . TK_CLOSE   (rule 136)

    TK_CLOSE	shift, and go to state 132



state 88

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @7 . fluent_list_decl TK_CLOSE   (rule 135)

    TK_OPEN	shift, and go to state 133

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_list_decl	go to state 137
    fluent_decl	go to state 138



state 89

    sticky_decl  ->  TK_OPEN KW_STICKY error . TK_CLOSE   (rule 143)

    TK_CLOSE	shift, and go to state 139



state 90

    sticky_decl  ->  TK_OPEN KW_STICKY @8 . fluent_list_decl TK_CLOSE   (rule 142)

    TK_OPEN	shift, and go to state 133

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_list_decl	go to state 140
    fluent_decl	go to state 138



state 91

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE error . TK_CLOSE   (rule 148)

    TK_CLOSE	shift, and go to state 141



state 92

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)
    action_effect  ->  TK_OPEN . KW_AND action_effect_list TK_CLOSE   (rule 100)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 106)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 action_effect TK_CLOSE   (rule 109)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_AND	shift, and go to state 144
    KW_FORALL	shift, and go to state 145
    KW_NOT	shift, and go to state 146
    KW_WHEN	shift, and go to state 147



state 93

    atomic_effect  ->  literal .   (rule 116)

    $default	reduce using rule 116 (atomic_effect)



state 94

    literal  ->  positive_literal .   (rule 91)

    $default	reduce using rule 91 (literal)



state 95

    literal  ->  negative_literal .   (rule 92)

    $default	reduce using rule 92 (literal)



state 96

    sensing_model  ->  action_effect .   (rule 118)

    $default	reduce using rule 118 (sensing_model)



state 97

    action_effect  ->  single_action_effect .   (rule 99)

    $default	reduce using rule 99 (action_effect)



state 98

    single_action_effect  ->  conditional_effect .   (rule 104)

    $default	reduce using rule 104 (single_action_effect)



state 99

    single_action_effect  ->  forall_effect .   (rule 105)

    $default	reduce using rule 105 (single_action_effect)



state 100

    single_action_effect  ->  atomic_effect .   (rule 103)

    $default	reduce using rule 103 (single_action_effect)



state 101

    domain_default_sensing_model  ->  TK_OPEN KW_DEFAULT_SENSING_MODEL sensing_model . TK_CLOSE   (rule 155)

    TK_CLOSE	shift, and go to state 148



state 102

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN . variable_symbol param_list TK_CLOSE @10 fluent_list_decl rest_variable_decl TK_CLOSE   (rule 147)

    TK_NEW_SYMBOL	shift, and go to state 103
    TK_VARNAME_SYMBOL	shift, and go to state 104

    variable_symbol	go to state 149



state 103

    variable_symbol  ->  TK_NEW_SYMBOL .   (rule 23)

    $default	reduce using rule 23 (variable_symbol)



state 104

    variable_symbol  ->  TK_VARNAME_SYMBOL .   (rule 24)

    $default	reduce using rule 24 (variable_symbol)



state 105

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type variable_symbol . @9 optional_variable_parameters fluent_list_decl rest_variable_decl TK_CLOSE   (rule 145)

    $default	reduce using rule 144 (@9)

    @9  	go to state 150



state 106

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @11 problem_elements . TK_CLOSE   (rule 157)
    problem_elements  ->  problem_elements . TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE   (rule 159)
    problem_elements  ->  problem_elements . domain_requires   (rule 160)
    problem_elements  ->  problem_elements . domain_constants   (rule 161)
    problem_elements  ->  problem_elements . initial_state   (rule 162)
    problem_elements  ->  problem_elements . hidden_state   (rule 163)
    problem_elements  ->  problem_elements . goal_spec   (rule 164)

    TK_OPEN	shift, and go to state 151
    TK_CLOSE	shift, and go to state 152

    domain_requires	go to state 153
    domain_constants	go to state 154
    initial_state	go to state 155
    hidden_state	go to state 156
    goal_spec	go to state 157



state 107

    domain_requires  ->  TK_OPEN KW_REQS error TK_CLOSE .   (rule 32)

    $default	reduce using rule 32 (domain_requires)



state 108

    domain_requires  ->  TK_OPEN KW_REQS require_list TK_CLOSE .   (rule 31)

    $default	reduce using rule 31 (domain_requires)



state 109

    require_list  ->  require_list TK_KEYWORD .   (rule 34)

    $default	reduce using rule 34 (require_list)



state 110

    require_list  ->  require_list KW_TRANSLATION .   (rule 33)

    $default	reduce using rule 33 (require_list)



state 111

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE .   (rule 60)

    $default	reduce using rule 60 (domain_constants)



state 112

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE .   (rule 62)

    $default	reduce using rule 62 (domain_constants)



state 113

    typed_constant_list  ->  constant_sym_list TK_HYPHEN . TK_TYPE_SYMBOL @1 typed_constant_list   (rule 65)

    TK_TYPE_SYMBOL	shift, and go to state 158



state 114

    constant_sym_list  ->  constant_sym_list TK_NEW_SYMBOL .   (rule 68)

    $default	reduce using rule 68 (constant_sym_list)



state 115

    domain_predicates  ->  TK_OPEN KW_PREDS error TK_CLOSE .   (rule 37)

    $default	reduce using rule 37 (domain_predicates)



state 116

    predicate_decl  ->  TK_OPEN error . TK_CLOSE   (rule 41)

    TK_CLOSE	shift, and go to state 159



state 117

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL . param_list TK_CLOSE   (rule 40)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 44 (param_list)

    param_list	go to state 161
    untyped_param_list	go to state 162
    typed_param_list	go to state 163
    param_sym_list	go to state 164
    new_var_symbol	go to state 165



state 118

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list TK_CLOSE .   (rule 36)

    $default	reduce using rule 36 (domain_predicates)



state 119

    predicate_list  ->  predicate_list predicate_decl .   (rule 38)

    $default	reduce using rule 38 (predicate_list)



state 120

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list TK_CLOSE .   (rule 52)

    $default	reduce using rule 52 (domain_types)



state 121

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list TK_CLOSE .   (rule 51)

    $default	reduce using rule 51 (domain_types)



state 122

    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_TYPE_SYMBOL typed_type_list   (rule 53)
    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_NEW_SYMBOL typed_type_list   (rule 54)

    TK_NEW_SYMBOL	shift, and go to state 166
    TK_TYPE_SYMBOL	shift, and go to state 167



state 123

    primitive_type_list  ->  primitive_type_list primitive_type .   (rule 56)

    $default	reduce using rule 56 (primitive_type_list)



state 124

    action_decl  ->  TK_OPEN KW_ACTION error TK_CLOSE .   (rule 78)

    $default	reduce using rule 78 (action_decl)



state 125

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 . action_elements TK_CLOSE   (rule 77)

    $default	reduce using rule 84 (action_elements)

    action_elements	go to state 168



state 126

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE .   (rule 61)

    $default	reduce using rule 61 (domain_constants)



state 127

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE .   (rule 63)

    $default	reduce using rule 63 (domain_constants)



state 128

    sensor_decl  ->  TK_OPEN KW_SENSOR error TK_CLOSE .   (rule 129)

    $default	reduce using rule 129 (sensor_decl)



state 129

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @6 . sensor_elements TK_CLOSE   (rule 128)

    $default	reduce using rule 133 (sensor_elements)

    sensor_elements	go to state 169



state 130

    axiom_decl  ->  TK_OPEN KW_AXIOM error TK_CLOSE .   (rule 122)

    $default	reduce using rule 122 (axiom_decl)



state 131

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @5 . axiom_elements TK_CLOSE   (rule 121)

    $default	reduce using rule 126 (axiom_elements)

    axiom_elements	go to state 170



state 132

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error TK_CLOSE .   (rule 136)

    $default	reduce using rule 136 (observable_decl)



state 133

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 action_effect TK_CLOSE   (rule 109)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_FORALL	shift, and go to state 145



state 134

    positive_atomic_effect  ->  positive_literal .   (rule 117)

    $default	reduce using rule 117 (positive_atomic_effect)



state 135

    fluent_decl  ->  forall_effect .   (rule 140)

    $default	reduce using rule 140 (fluent_decl)



state 136

    fluent_decl  ->  positive_atomic_effect .   (rule 139)

    $default	reduce using rule 139 (fluent_decl)



state 137

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @7 fluent_list_decl . TK_CLOSE   (rule 135)
    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 137)

    TK_OPEN	shift, and go to state 133
    TK_CLOSE	shift, and go to state 171

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_decl	go to state 172



state 138

    fluent_list_decl  ->  fluent_decl .   (rule 138)

    $default	reduce using rule 138 (fluent_list_decl)



state 139

    sticky_decl  ->  TK_OPEN KW_STICKY error TK_CLOSE .   (rule 143)

    $default	reduce using rule 143 (sticky_decl)



state 140

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 137)
    sticky_decl  ->  TK_OPEN KW_STICKY @8 fluent_list_decl . TK_CLOSE   (rule 142)

    TK_OPEN	shift, and go to state 133
    TK_CLOSE	shift, and go to state 173

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_decl	go to state 172



state 141

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE error TK_CLOSE .   (rule 148)

    $default	reduce using rule 148 (multivalued_variable_decl)



state 142

    positive_literal  ->  TK_OPEN TK_EQ . argument_list TK_CLOSE   (rule 94)

    $default	reduce using rule 98 (argument_list)

    argument_list	go to state 174



state 143

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL . argument_list TK_CLOSE   (rule 93)

    $default	reduce using rule 98 (argument_list)

    argument_list	go to state 175



state 144

    action_effect  ->  TK_OPEN KW_AND . action_effect_list TK_CLOSE   (rule 100)

    TK_OPEN	shift, and go to state 176

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    action_effect_list	go to state 177
    single_action_effect	go to state 178
    conditional_effect	go to state 98
    forall_effect	go to state 99
    atomic_effect	go to state 100



state 145

    forall_effect  ->  TK_OPEN KW_FORALL . TK_OPEN @3 param_list TK_CLOSE @4 action_effect TK_CLOSE   (rule 109)

    TK_OPEN	shift, and go to state 179



state 146

    negative_literal  ->  TK_OPEN KW_NOT . positive_literal TK_CLOSE   (rule 95)

    TK_OPEN	shift, and go to state 180

    positive_literal	go to state 181



state 147

    conditional_effect  ->  TK_OPEN KW_WHEN . condition atomic_effect_kw_list TK_CLOSE   (rule 106)

    TK_OPEN	shift, and go to state 182

    condition	go to state 183
    single_condition	go to state 184
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 148

    domain_default_sensing_model  ->  TK_OPEN KW_DEFAULT_SENSING_MODEL sensing_model TK_CLOSE .   (rule 155)

    $default	reduce using rule 155 (domain_default_sensing_model)



state 149

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN variable_symbol . param_list TK_CLOSE @10 fluent_list_decl rest_variable_decl TK_CLOSE   (rule 147)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 44 (param_list)

    param_list	go to state 186
    untyped_param_list	go to state 162
    typed_param_list	go to state 163
    param_sym_list	go to state 164
    new_var_symbol	go to state 165



state 150

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type variable_symbol @9 . optional_variable_parameters fluent_list_decl rest_variable_decl TK_CLOSE   (rule 145)

    KW_ARGS	shift, and go to state 187

    $default	reduce using rule 152 (optional_variable_parameters)

    optional_variable_parameters	go to state 188



state 151

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 31)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 32)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 62)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 63)
    problem_elements  ->  problem_elements TK_OPEN . KW_FORDOMAIN any_symbol TK_CLOSE   (rule 159)
    initial_state  ->  TK_OPEN . KW_INIT TK_CLOSE   (rule 166)
    initial_state  ->  TK_OPEN . KW_INIT init_elements TK_CLOSE   (rule 167)
    initial_state  ->  TK_OPEN . KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 168)
    hidden_state  ->  TK_OPEN . KW_HIDDEN init_elements TK_CLOSE   (rule 184)
    goal_spec  ->  TK_OPEN . KW_GOAL single_goal TK_CLOSE   (rule 185)
    goal_spec  ->  TK_OPEN . KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE   (rule 186)

    KW_REQS	shift, and go to state 43
    KW_CONSTANTS	shift, and go to state 44
    KW_FORDOMAIN	shift, and go to state 189
    KW_OBJECTS	shift, and go to state 48
    KW_INIT	shift, and go to state 190
    KW_GOAL	shift, and go to state 191
    KW_HIDDEN	shift, and go to state 192



state 152

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @11 problem_elements TK_CLOSE .   (rule 157)

    $default	reduce using rule 157 (pddl_problem)



state 153

    problem_elements  ->  problem_elements domain_requires .   (rule 160)

    $default	reduce using rule 160 (problem_elements)



state 154

    problem_elements  ->  problem_elements domain_constants .   (rule 161)

    $default	reduce using rule 161 (problem_elements)



state 155

    problem_elements  ->  problem_elements initial_state .   (rule 162)

    $default	reduce using rule 162 (problem_elements)



state 156

    problem_elements  ->  problem_elements hidden_state .   (rule 163)

    $default	reduce using rule 163 (problem_elements)



state 157

    problem_elements  ->  problem_elements goal_spec .   (rule 164)

    $default	reduce using rule 164 (problem_elements)



state 158

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL . @1 typed_constant_list   (rule 65)

    $default	reduce using rule 64 (@1)

    @1  	go to state 193



state 159

    predicate_decl  ->  TK_OPEN error TK_CLOSE .   (rule 41)

    $default	reduce using rule 41 (predicate_decl)



state 160

    new_var_symbol  ->  TK_NEW_VAR_SYMBOL .   (rule 50)

    $default	reduce using rule 50 (new_var_symbol)



state 161

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list . TK_CLOSE   (rule 40)

    TK_CLOSE	shift, and go to state 194



state 162

    param_list  ->  untyped_param_list .   (rule 42)

    $default	reduce using rule 42 (param_list)



state 163

    param_list  ->  typed_param_list .   (rule 43)

    $default	reduce using rule 43 (param_list)



state 164

    untyped_param_list  ->  param_sym_list .   (rule 45)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 46)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 47)
    param_sym_list  ->  param_sym_list . new_var_symbol   (rule 48)

    TK_HYPHEN	shift, and go to state 195
    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 45 (untyped_param_list)

    new_var_symbol	go to state 196



state 165

    param_sym_list  ->  new_var_symbol .   (rule 49)

    $default	reduce using rule 49 (param_sym_list)



state 166

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL . typed_type_list   (rule 54)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 55 (typed_type_list)

    typed_type_list	go to state 197
    primitive_type_list	go to state 198
    primitive_type	go to state 72



state 167

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL . typed_type_list   (rule 53)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 55 (typed_type_list)

    typed_type_list	go to state 199
    primitive_type_list	go to state 198
    primitive_type	go to state 72



state 168

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements . TK_CLOSE   (rule 77)
    action_elements  ->  action_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 79)
    action_elements  ->  action_elements . KW_PRE condition   (rule 80)
    action_elements  ->  action_elements . KW_EFFECT action_effect   (rule 81)
    action_elements  ->  action_elements . KW_OBSERVE positive_atomic_effect_list   (rule 82)
    action_elements  ->  action_elements . KW_SENSING_MODEL sensing_model   (rule 83)

    TK_CLOSE	shift, and go to state 200
    KW_ARGS	shift, and go to state 201
    KW_PRE	shift, and go to state 202
    KW_EFFECT	shift, and go to state 203
    KW_OBSERVE	shift, and go to state 204
    KW_SENSING_MODEL	shift, and go to state 205



state 169

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @6 sensor_elements . TK_CLOSE   (rule 128)
    sensor_elements  ->  sensor_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 130)
    sensor_elements  ->  sensor_elements . KW_COND condition   (rule 131)
    sensor_elements  ->  sensor_elements . KW_SENSE positive_atomic_effect_list   (rule 132)

    TK_CLOSE	shift, and go to state 206
    KW_ARGS	shift, and go to state 207
    KW_SENSE	shift, and go to state 208
    KW_COND	shift, and go to state 209



state 170

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @5 axiom_elements . TK_CLOSE   (rule 121)
    axiom_elements  ->  axiom_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 123)
    axiom_elements  ->  axiom_elements . KW_BODY condition   (rule 124)
    axiom_elements  ->  axiom_elements . KW_HEAD atomic_effect_kw_list   (rule 125)

    TK_CLOSE	shift, and go to state 210
    KW_ARGS	shift, and go to state 211
    KW_BODY	shift, and go to state 212
    KW_HEAD	shift, and go to state 213



state 171

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @7 fluent_list_decl TK_CLOSE .   (rule 135)

    $default	reduce using rule 135 (observable_decl)



state 172

    fluent_list_decl  ->  fluent_list_decl fluent_decl .   (rule 137)

    $default	reduce using rule 137 (fluent_list_decl)



state 173

    sticky_decl  ->  TK_OPEN KW_STICKY @8 fluent_list_decl TK_CLOSE .   (rule 142)

    $default	reduce using rule 142 (sticky_decl)



state 174

    positive_literal  ->  TK_OPEN TK_EQ argument_list . TK_CLOSE   (rule 94)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 96)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 97)

    TK_CLOSE	shift, and go to state 214
    TK_OBJ_SYMBOL	shift, and go to state 215
    TK_VAR_SYMBOL	shift, and go to state 216



state 175

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list . TK_CLOSE   (rule 93)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 96)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 97)

    TK_CLOSE	shift, and go to state 217
    TK_OBJ_SYMBOL	shift, and go to state 215
    TK_VAR_SYMBOL	shift, and go to state 216



state 176

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 106)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 action_effect TK_CLOSE   (rule 109)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_FORALL	shift, and go to state 145
    KW_NOT	shift, and go to state 146
    KW_WHEN	shift, and go to state 147



state 177

    action_effect  ->  TK_OPEN KW_AND action_effect_list . TK_CLOSE   (rule 100)
    action_effect_list  ->  action_effect_list . single_action_effect   (rule 101)

    TK_OPEN	shift, and go to state 176
    TK_CLOSE	shift, and go to state 218

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    single_action_effect	go to state 219
    conditional_effect	go to state 98
    forall_effect	go to state 99
    atomic_effect	go to state 100



state 178

    action_effect_list  ->  single_action_effect .   (rule 102)

    $default	reduce using rule 102 (action_effect_list)



state 179

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN . @3 param_list TK_CLOSE @4 action_effect TK_CLOSE   (rule 109)

    $default	reduce using rule 107 (@3)

    @3  	go to state 220



state 180

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143



state 181

    negative_literal  ->  TK_OPEN KW_NOT positive_literal . TK_CLOSE   (rule 95)

    TK_CLOSE	shift, and go to state 221



state 182

    condition  ->  TK_OPEN . KW_AND condition_list TK_CLOSE   (rule 86)
    condition  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 87)
    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_AND	shift, and go to state 222
    KW_OR	shift, and go to state 223
    KW_NOT	shift, and go to state 146



state 183

    conditional_effect  ->  TK_OPEN KW_WHEN condition . atomic_effect_kw_list TK_CLOSE   (rule 106)

    TK_OPEN	shift, and go to state 224

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    atomic_effect_kw_list	go to state 225
    atomic_effect	go to state 226



state 184

    condition  ->  single_condition .   (rule 85)

    $default	reduce using rule 85 (condition)



state 185

    single_condition  ->  literal .   (rule 90)

    $default	reduce using rule 90 (single_condition)



state 186

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN variable_symbol param_list . TK_CLOSE @10 fluent_list_decl rest_variable_decl TK_CLOSE   (rule 147)

    TK_CLOSE	shift, and go to state 227



state 187

    optional_variable_parameters  ->  KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 151)

    TK_OPEN	shift, and go to state 228



state 188

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type variable_symbol @9 optional_variable_parameters . fluent_list_decl rest_variable_decl TK_CLOSE   (rule 145)

    TK_OPEN	shift, and go to state 133

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_list_decl	go to state 229
    fluent_decl	go to state 138



state 189

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN . any_symbol TK_CLOSE   (rule 159)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 230



state 190

    initial_state  ->  TK_OPEN KW_INIT . TK_CLOSE   (rule 166)
    initial_state  ->  TK_OPEN KW_INIT . init_elements TK_CLOSE   (rule 167)
    initial_state  ->  TK_OPEN KW_INIT . TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 168)

    TK_OPEN	shift, and go to state 231
    TK_CLOSE	shift, and go to state 232

    literal	go to state 233
    positive_literal	go to state 94
    negative_literal	go to state 95
    init_elements	go to state 234
    single_init_element	go to state 235
    at_least_one_invariant	go to state 236
    at_most_one_invariant	go to state 237
    exactly_one_invariant	go to state 238
    invariant	go to state 239
    clause	go to state 240
    oneof	go to state 241



state 191

    goal_spec  ->  TK_OPEN KW_GOAL . single_goal TK_CLOSE   (rule 185)
    goal_spec  ->  TK_OPEN KW_GOAL . TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE   (rule 186)

    TK_OPEN	shift, and go to state 242

    positive_literal	go to state 243
    negative_literal	go to state 244
    single_goal	go to state 245



state 192

    hidden_state  ->  TK_OPEN KW_HIDDEN . init_elements TK_CLOSE   (rule 184)

    TK_OPEN	shift, and go to state 246

    literal	go to state 233
    positive_literal	go to state 94
    negative_literal	go to state 95
    init_elements	go to state 247
    single_init_element	go to state 235
    at_least_one_invariant	go to state 236
    at_most_one_invariant	go to state 237
    exactly_one_invariant	go to state 238
    invariant	go to state 239
    clause	go to state 240
    oneof	go to state 241



state 193

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 . typed_constant_list   (rule 65)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 66 (typed_constant_list)

    typed_constant_list	go to state 248
    constant_sym_list	go to state 249



state 194

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE .   (rule 40)

    $default	reduce using rule 40 (predicate_decl)



state 195

    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL typed_param_list   (rule 46)
    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL   (rule 47)

    TK_TYPE_SYMBOL	shift, and go to state 250



state 196

    param_sym_list  ->  param_sym_list new_var_symbol .   (rule 48)

    $default	reduce using rule 48 (param_sym_list)



state 197

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list .   (rule 54)

    $default	reduce using rule 54 (typed_type_list)



state 198

    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 53)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 54)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 56)

    TK_HYPHEN	shift, and go to state 122
    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    primitive_type	go to state 123



state 199

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list .   (rule 53)

    $default	reduce using rule 53 (typed_type_list)



state 200

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE .   (rule 77)

    $default	reduce using rule 77 (action_decl)



state 201

    action_elements  ->  action_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 79)

    TK_OPEN	shift, and go to state 251



state 202

    action_elements  ->  action_elements KW_PRE . condition   (rule 80)

    TK_OPEN	shift, and go to state 182

    condition	go to state 252
    single_condition	go to state 184
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 203

    action_elements  ->  action_elements KW_EFFECT . action_effect   (rule 81)

    TK_OPEN	shift, and go to state 92

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    action_effect	go to state 253
    single_action_effect	go to state 97
    conditional_effect	go to state 98
    forall_effect	go to state 99
    atomic_effect	go to state 100



state 204

    action_elements  ->  action_elements KW_OBSERVE . positive_atomic_effect_list   (rule 82)

    TK_OPEN	shift, and go to state 180

    positive_literal	go to state 134
    positive_atomic_effect_list	go to state 254
    positive_atomic_effect	go to state 255



state 205

    action_elements  ->  action_elements KW_SENSING_MODEL . sensing_model   (rule 83)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 119 (sensing_model)

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    action_effect	go to state 96
    single_action_effect	go to state 97
    conditional_effect	go to state 98
    forall_effect	go to state 99
    atomic_effect	go to state 100
    sensing_model	go to state 256



state 206

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @6 sensor_elements TK_CLOSE .   (rule 128)

    $default	reduce using rule 128 (sensor_decl)



state 207

    sensor_elements  ->  sensor_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 130)

    TK_OPEN	shift, and go to state 257



state 208

    sensor_elements  ->  sensor_elements KW_SENSE . positive_atomic_effect_list   (rule 132)

    TK_OPEN	shift, and go to state 180

    positive_literal	go to state 134
    positive_atomic_effect_list	go to state 258
    positive_atomic_effect	go to state 255



state 209

    sensor_elements  ->  sensor_elements KW_COND . condition   (rule 131)

    TK_OPEN	shift, and go to state 182

    condition	go to state 259
    single_condition	go to state 184
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 210

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @5 axiom_elements TK_CLOSE .   (rule 121)

    $default	reduce using rule 121 (axiom_decl)



state 211

    axiom_elements  ->  axiom_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 123)

    TK_OPEN	shift, and go to state 260



state 212

    axiom_elements  ->  axiom_elements KW_BODY . condition   (rule 124)

    TK_OPEN	shift, and go to state 182

    condition	go to state 261
    single_condition	go to state 184
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 213

    axiom_elements  ->  axiom_elements KW_HEAD . atomic_effect_kw_list   (rule 125)

    TK_OPEN	shift, and go to state 224

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    atomic_effect_kw_list	go to state 262
    atomic_effect	go to state 226



state 214

    positive_literal  ->  TK_OPEN TK_EQ argument_list TK_CLOSE .   (rule 94)

    $default	reduce using rule 94 (positive_literal)



state 215

    argument_list  ->  argument_list TK_OBJ_SYMBOL .   (rule 97)

    $default	reduce using rule 97 (argument_list)



state 216

    argument_list  ->  argument_list TK_VAR_SYMBOL .   (rule 96)

    $default	reduce using rule 96 (argument_list)



state 217

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE .   (rule 93)

    $default	reduce using rule 93 (positive_literal)



state 218

    action_effect  ->  TK_OPEN KW_AND action_effect_list TK_CLOSE .   (rule 100)

    $default	reduce using rule 100 (action_effect)



state 219

    action_effect_list  ->  action_effect_list single_action_effect .   (rule 101)

    $default	reduce using rule 101 (action_effect_list)



state 220

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @3 . param_list TK_CLOSE @4 action_effect TK_CLOSE   (rule 109)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 44 (param_list)

    param_list	go to state 263
    untyped_param_list	go to state 162
    typed_param_list	go to state 163
    param_sym_list	go to state 164
    new_var_symbol	go to state 165



state 221

    negative_literal  ->  TK_OPEN KW_NOT positive_literal TK_CLOSE .   (rule 95)

    $default	reduce using rule 95 (negative_literal)



state 222

    condition  ->  TK_OPEN KW_AND . condition_list TK_CLOSE   (rule 86)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 265
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 223

    condition  ->  TK_OPEN KW_OR . condition_list TK_CLOSE   (rule 87)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 267
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 224

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)
    atomic_effect_kw_list  ->  TK_OPEN . KW_AND atomic_effect_list TK_CLOSE   (rule 110)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_AND	shift, and go to state 268
    KW_NOT	shift, and go to state 146



state 225

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list . TK_CLOSE   (rule 106)

    TK_CLOSE	shift, and go to state 269



state 226

    atomic_effect_kw_list  ->  atomic_effect .   (rule 111)

    $default	reduce using rule 111 (atomic_effect_kw_list)



state 227

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN variable_symbol param_list TK_CLOSE . @10 fluent_list_decl rest_variable_decl TK_CLOSE   (rule 147)

    $default	reduce using rule 146 (@10)

    @10 	go to state 270



state 228

    optional_variable_parameters  ->  KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 151)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 44 (param_list)

    param_list	go to state 271
    untyped_param_list	go to state 162
    typed_param_list	go to state 163
    param_sym_list	go to state 164
    new_var_symbol	go to state 165



state 229

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 137)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type variable_symbol @9 optional_variable_parameters fluent_list_decl . rest_variable_decl TK_CLOSE   (rule 145)

    TK_OPEN	shift, and go to state 133
    KW_OBSERVABLE	shift, and go to state 272

    $default	reduce using rule 154 (rest_variable_decl)

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_decl	go to state 172
    rest_variable_decl	go to state 273



state 230

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol . TK_CLOSE   (rule 159)

    TK_CLOSE	shift, and go to state 274



state 231

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)
    initial_state  ->  TK_OPEN KW_INIT TK_OPEN . KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 168)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT condition_list TK_CLOSE   (rule 175)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE condition_list TK_CLOSE   (rule 176)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE condition_list TK_CLOSE   (rule 177)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE condition_list TK_CLOSE   (rule 178)
    clause  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 182)
    oneof  ->  TK_OPEN . KW_ONEOF condition_list TK_CLOSE   (rule 183)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_AND	shift, and go to state 275
    KW_OR	shift, and go to state 276
    KW_NOT	shift, and go to state 146
    KW_ONEOF	shift, and go to state 277
    KW_INVARIANT	shift, and go to state 278
    KW_AT_LEAST_ONE	shift, and go to state 279
    KW_AT_MOST_ONE	shift, and go to state 280
    KW_EXACTLY_ONE	shift, and go to state 281



state 232

    initial_state  ->  TK_OPEN KW_INIT TK_CLOSE .   (rule 166)

    $default	reduce using rule 166 (initial_state)



state 233

    single_init_element  ->  literal .   (rule 171)

    $default	reduce using rule 171 (single_init_element)



state 234

    initial_state  ->  TK_OPEN KW_INIT init_elements . TK_CLOSE   (rule 167)
    init_elements  ->  init_elements . single_init_element   (rule 169)

    TK_OPEN	shift, and go to state 246
    TK_CLOSE	shift, and go to state 282

    literal	go to state 233
    positive_literal	go to state 94
    negative_literal	go to state 95
    single_init_element	go to state 283
    at_least_one_invariant	go to state 236
    at_most_one_invariant	go to state 237
    exactly_one_invariant	go to state 238
    invariant	go to state 239
    clause	go to state 240
    oneof	go to state 241



state 235

    init_elements  ->  single_init_element .   (rule 170)

    $default	reduce using rule 170 (init_elements)



state 236

    invariant  ->  at_least_one_invariant .   (rule 179)

    $default	reduce using rule 179 (invariant)



state 237

    invariant  ->  at_most_one_invariant .   (rule 180)

    $default	reduce using rule 180 (invariant)



state 238

    invariant  ->  exactly_one_invariant .   (rule 181)

    $default	reduce using rule 181 (invariant)



state 239

    single_init_element  ->  invariant .   (rule 172)

    $default	reduce using rule 172 (single_init_element)



state 240

    single_init_element  ->  clause .   (rule 173)

    $default	reduce using rule 173 (single_init_element)



state 241

    single_init_element  ->  oneof .   (rule 174)

    $default	reduce using rule 174 (single_init_element)



state 242

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)
    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN . KW_AND goal_list TK_CLOSE TK_CLOSE   (rule 186)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_AND	shift, and go to state 284
    KW_NOT	shift, and go to state 146



state 243

    single_goal  ->  positive_literal .   (rule 189)

    $default	reduce using rule 189 (single_goal)



state 244

    single_goal  ->  negative_literal .   (rule 190)

    $default	reduce using rule 190 (single_goal)



state 245

    goal_spec  ->  TK_OPEN KW_GOAL single_goal . TK_CLOSE   (rule 185)

    TK_CLOSE	shift, and go to state 285



state 246

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT condition_list TK_CLOSE   (rule 175)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE condition_list TK_CLOSE   (rule 176)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE condition_list TK_CLOSE   (rule 177)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE condition_list TK_CLOSE   (rule 178)
    clause  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 182)
    oneof  ->  TK_OPEN . KW_ONEOF condition_list TK_CLOSE   (rule 183)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_OR	shift, and go to state 276
    KW_NOT	shift, and go to state 146
    KW_ONEOF	shift, and go to state 277
    KW_INVARIANT	shift, and go to state 278
    KW_AT_LEAST_ONE	shift, and go to state 279
    KW_AT_MOST_ONE	shift, and go to state 280
    KW_EXACTLY_ONE	shift, and go to state 281



state 247

    init_elements  ->  init_elements . single_init_element   (rule 169)
    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements . TK_CLOSE   (rule 184)

    TK_OPEN	shift, and go to state 246
    TK_CLOSE	shift, and go to state 286

    literal	go to state 233
    positive_literal	go to state 94
    negative_literal	go to state 95
    single_init_element	go to state 283
    at_least_one_invariant	go to state 236
    at_most_one_invariant	go to state 237
    exactly_one_invariant	go to state 238
    invariant	go to state 239
    clause	go to state 240
    oneof	go to state 241



state 248

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list .   (rule 65)

    $default	reduce using rule 65 (typed_constant_list)



state 249

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 65)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 68)

    TK_HYPHEN	shift, and go to state 113
    TK_NEW_SYMBOL	shift, and go to state 114



state 250

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL . typed_param_list   (rule 46)
    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL .   (rule 47)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 47 (typed_param_list)

    typed_param_list	go to state 287
    param_sym_list	go to state 288
    new_var_symbol	go to state 165



state 251

    action_elements  ->  action_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 79)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 44 (param_list)

    param_list	go to state 289
    untyped_param_list	go to state 162
    typed_param_list	go to state 163
    param_sym_list	go to state 164
    new_var_symbol	go to state 165



state 252

    action_elements  ->  action_elements KW_PRE condition .   (rule 80)

    $default	reduce using rule 80 (action_elements)



state 253

    action_elements  ->  action_elements KW_EFFECT action_effect .   (rule 81)

    $default	reduce using rule 81 (action_elements)



state 254

    action_elements  ->  action_elements KW_OBSERVE positive_atomic_effect_list .   (rule 82)
    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 114)

    TK_OPEN	shift, and go to state 180

    $default	reduce using rule 82 (action_elements)

    positive_literal	go to state 134
    positive_atomic_effect	go to state 290



state 255

    positive_atomic_effect_list  ->  positive_atomic_effect .   (rule 115)

    $default	reduce using rule 115 (positive_atomic_effect_list)



state 256

    action_elements  ->  action_elements KW_SENSING_MODEL sensing_model .   (rule 83)

    $default	reduce using rule 83 (action_elements)



state 257

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 130)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 44 (param_list)

    param_list	go to state 291
    untyped_param_list	go to state 162
    typed_param_list	go to state 163
    param_sym_list	go to state 164
    new_var_symbol	go to state 165



state 258

    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 114)
    sensor_elements  ->  sensor_elements KW_SENSE positive_atomic_effect_list .   (rule 132)

    TK_OPEN	shift, and go to state 180

    $default	reduce using rule 132 (sensor_elements)

    positive_literal	go to state 134
    positive_atomic_effect	go to state 290



state 259

    sensor_elements  ->  sensor_elements KW_COND condition .   (rule 131)

    $default	reduce using rule 131 (sensor_elements)



state 260

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 123)

    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    $default	reduce using rule 44 (param_list)

    param_list	go to state 292
    untyped_param_list	go to state 162
    typed_param_list	go to state 163
    param_sym_list	go to state 164
    new_var_symbol	go to state 165



state 261

    axiom_elements  ->  axiom_elements KW_BODY condition .   (rule 124)

    $default	reduce using rule 124 (axiom_elements)



state 262

    axiom_elements  ->  axiom_elements KW_HEAD atomic_effect_kw_list .   (rule 125)

    $default	reduce using rule 125 (axiom_elements)



state 263

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list . TK_CLOSE @4 action_effect TK_CLOSE   (rule 109)

    TK_CLOSE	shift, and go to state 293



state 264

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 93)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 94)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 95)

    TK_EQ	shift, and go to state 142
    TK_PRED_SYMBOL	shift, and go to state 143
    KW_NOT	shift, and go to state 146



state 265

    condition  ->  TK_OPEN KW_AND condition_list . TK_CLOSE   (rule 86)
    condition_list  ->  condition_list . single_condition   (rule 88)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 294

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 266

    condition_list  ->  single_condition .   (rule 89)

    $default	reduce using rule 89 (condition_list)



state 267

    condition  ->  TK_OPEN KW_OR condition_list . TK_CLOSE   (rule 87)
    condition_list  ->  condition_list . single_condition   (rule 88)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 296

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 268

    atomic_effect_kw_list  ->  TK_OPEN KW_AND . atomic_effect_list TK_CLOSE   (rule 110)

    TK_OPEN	shift, and go to state 264

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    atomic_effect_list	go to state 297
    atomic_effect	go to state 298



state 269

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE .   (rule 106)

    $default	reduce using rule 106 (conditional_effect)



state 270

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN variable_symbol param_list TK_CLOSE @10 . fluent_list_decl rest_variable_decl TK_CLOSE   (rule 147)

    TK_OPEN	shift, and go to state 133

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_list_decl	go to state 299
    fluent_decl	go to state 138



state 271

    optional_variable_parameters  ->  KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 151)

    TK_CLOSE	shift, and go to state 300



state 272

    rest_variable_decl  ->  KW_OBSERVABLE .   (rule 153)

    $default	reduce using rule 153 (rest_variable_decl)



state 273

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type variable_symbol @9 optional_variable_parameters fluent_list_decl rest_variable_decl . TK_CLOSE   (rule 145)

    TK_CLOSE	shift, and go to state 301



state 274

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE .   (rule 159)

    $default	reduce using rule 159 (problem_elements)



state 275

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND . init_elements TK_CLOSE TK_CLOSE   (rule 168)

    TK_OPEN	shift, and go to state 246

    literal	go to state 233
    positive_literal	go to state 94
    negative_literal	go to state 95
    init_elements	go to state 302
    single_init_element	go to state 235
    at_least_one_invariant	go to state 236
    at_most_one_invariant	go to state 237
    exactly_one_invariant	go to state 238
    invariant	go to state 239
    clause	go to state 240
    oneof	go to state 241



state 276

    clause  ->  TK_OPEN KW_OR . condition_list TK_CLOSE   (rule 182)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 303
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 277

    oneof  ->  TK_OPEN KW_ONEOF . condition_list TK_CLOSE   (rule 183)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 304
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 278

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT . condition_list TK_CLOSE   (rule 175)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 305
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 279

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE . condition_list TK_CLOSE   (rule 176)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 306
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 280

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE . condition_list TK_CLOSE   (rule 177)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 307
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 281

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE . condition_list TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 264

    condition_list	go to state 308
    single_condition	go to state 266
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 282

    initial_state  ->  TK_OPEN KW_INIT init_elements TK_CLOSE .   (rule 167)

    $default	reduce using rule 167 (initial_state)



state 283

    init_elements  ->  init_elements single_init_element .   (rule 169)

    $default	reduce using rule 169 (init_elements)



state 284

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND . goal_list TK_CLOSE TK_CLOSE   (rule 186)

    TK_OPEN	shift, and go to state 264

    positive_literal	go to state 243
    negative_literal	go to state 244
    goal_list	go to state 309
    single_goal	go to state 310



state 285

    goal_spec  ->  TK_OPEN KW_GOAL single_goal TK_CLOSE .   (rule 185)

    $default	reduce using rule 185 (goal_spec)



state 286

    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements TK_CLOSE .   (rule 184)

    $default	reduce using rule 184 (hidden_state)



state 287

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list .   (rule 46)

    $default	reduce using rule 46 (typed_param_list)



state 288

    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 46)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 47)
    param_sym_list  ->  param_sym_list . new_var_symbol   (rule 48)

    TK_HYPHEN	shift, and go to state 195
    TK_NEW_VAR_SYMBOL	shift, and go to state 160

    new_var_symbol	go to state 196



state 289

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 79)

    TK_CLOSE	shift, and go to state 311



state 290

    positive_atomic_effect_list  ->  positive_atomic_effect_list positive_atomic_effect .   (rule 114)

    $default	reduce using rule 114 (positive_atomic_effect_list)



state 291

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 130)

    TK_CLOSE	shift, and go to state 312



state 292

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 123)

    TK_CLOSE	shift, and go to state 313



state 293

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE . @4 action_effect TK_CLOSE   (rule 109)

    $default	reduce using rule 108 (@4)

    @4  	go to state 314



state 294

    condition  ->  TK_OPEN KW_AND condition_list TK_CLOSE .   (rule 86)

    $default	reduce using rule 86 (condition)



state 295

    condition_list  ->  condition_list single_condition .   (rule 88)

    $default	reduce using rule 88 (condition_list)



state 296

    condition  ->  TK_OPEN KW_OR condition_list TK_CLOSE .   (rule 87)

    $default	reduce using rule 87 (condition)



state 297

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list . TK_CLOSE   (rule 110)
    atomic_effect_list  ->  atomic_effect_list . atomic_effect   (rule 112)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 315

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    atomic_effect	go to state 316



state 298

    atomic_effect_list  ->  atomic_effect .   (rule 113)

    $default	reduce using rule 113 (atomic_effect_list)



state 299

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 137)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN variable_symbol param_list TK_CLOSE @10 fluent_list_decl . rest_variable_decl TK_CLOSE   (rule 147)

    TK_OPEN	shift, and go to state 133
    KW_OBSERVABLE	shift, and go to state 272

    $default	reduce using rule 154 (rest_variable_decl)

    positive_literal	go to state 134
    forall_effect	go to state 135
    positive_atomic_effect	go to state 136
    fluent_decl	go to state 172
    rest_variable_decl	go to state 317



state 300

    optional_variable_parameters  ->  KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 151)

    $default	reduce using rule 151 (optional_variable_parameters)



state 301

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type variable_symbol @9 optional_variable_parameters fluent_list_decl rest_variable_decl TK_CLOSE .   (rule 145)

    $default	reduce using rule 145 (multivalued_variable_decl)



state 302

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements . TK_CLOSE TK_CLOSE   (rule 168)
    init_elements  ->  init_elements . single_init_element   (rule 169)

    TK_OPEN	shift, and go to state 246
    TK_CLOSE	shift, and go to state 318

    literal	go to state 233
    positive_literal	go to state 94
    negative_literal	go to state 95
    single_init_element	go to state 283
    at_least_one_invariant	go to state 236
    at_most_one_invariant	go to state 237
    exactly_one_invariant	go to state 238
    invariant	go to state 239
    clause	go to state 240
    oneof	go to state 241



state 303

    condition_list  ->  condition_list . single_condition   (rule 88)
    clause  ->  TK_OPEN KW_OR condition_list . TK_CLOSE   (rule 182)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 319

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 304

    condition_list  ->  condition_list . single_condition   (rule 88)
    oneof  ->  TK_OPEN KW_ONEOF condition_list . TK_CLOSE   (rule 183)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 320

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 305

    condition_list  ->  condition_list . single_condition   (rule 88)
    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT condition_list . TK_CLOSE   (rule 175)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 321

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 306

    condition_list  ->  condition_list . single_condition   (rule 88)
    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE condition_list . TK_CLOSE   (rule 176)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 322

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 307

    condition_list  ->  condition_list . single_condition   (rule 88)
    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE condition_list . TK_CLOSE   (rule 177)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 323

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 308

    condition_list  ->  condition_list . single_condition   (rule 88)
    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE condition_list . TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 324

    single_condition	go to state 295
    literal	go to state 185
    positive_literal	go to state 94
    negative_literal	go to state 95



state 309

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list . TK_CLOSE TK_CLOSE   (rule 186)
    goal_list  ->  goal_list . single_goal   (rule 187)

    TK_OPEN	shift, and go to state 264
    TK_CLOSE	shift, and go to state 325

    positive_literal	go to state 243
    negative_literal	go to state 244
    single_goal	go to state 326



state 310

    goal_list  ->  single_goal .   (rule 188)

    $default	reduce using rule 188 (goal_list)



state 311

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 79)

    $default	reduce using rule 79 (action_elements)



state 312

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 130)

    $default	reduce using rule 130 (sensor_elements)



state 313

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 123)

    $default	reduce using rule 123 (axiom_elements)



state 314

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 . action_effect TK_CLOSE   (rule 109)

    TK_OPEN	shift, and go to state 92

    literal	go to state 93
    positive_literal	go to state 94
    negative_literal	go to state 95
    action_effect	go to state 327
    single_action_effect	go to state 97
    conditional_effect	go to state 98
    forall_effect	go to state 99
    atomic_effect	go to state 100



state 315

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list TK_CLOSE .   (rule 110)

    $default	reduce using rule 110 (atomic_effect_kw_list)



state 316

    atomic_effect_list  ->  atomic_effect_list atomic_effect .   (rule 112)

    $default	reduce using rule 112 (atomic_effect_list)



state 317

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN variable_symbol param_list TK_CLOSE @10 fluent_list_decl rest_variable_decl . TK_CLOSE   (rule 147)

    TK_CLOSE	shift, and go to state 328



state 318

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE . TK_CLOSE   (rule 168)

    TK_CLOSE	shift, and go to state 329



state 319

    clause  ->  TK_OPEN KW_OR condition_list TK_CLOSE .   (rule 182)

    $default	reduce using rule 182 (clause)



state 320

    oneof  ->  TK_OPEN KW_ONEOF condition_list TK_CLOSE .   (rule 183)

    $default	reduce using rule 183 (oneof)



state 321

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT condition_list TK_CLOSE .   (rule 175)

    $default	reduce using rule 175 (at_least_one_invariant)



state 322

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE condition_list TK_CLOSE .   (rule 176)

    $default	reduce using rule 176 (at_least_one_invariant)



state 323

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE condition_list TK_CLOSE .   (rule 177)

    $default	reduce using rule 177 (at_most_one_invariant)



state 324

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE condition_list TK_CLOSE .   (rule 178)

    $default	reduce using rule 178 (exactly_one_invariant)



state 325

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE . TK_CLOSE   (rule 186)

    TK_CLOSE	shift, and go to state 330



state 326

    goal_list  ->  goal_list single_goal .   (rule 187)

    $default	reduce using rule 187 (goal_list)



state 327

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 action_effect . TK_CLOSE   (rule 109)

    TK_CLOSE	shift, and go to state 331



state 328

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN variable_symbol param_list TK_CLOSE @10 fluent_list_decl rest_variable_decl TK_CLOSE .   (rule 147)

    $default	reduce using rule 147 (multivalued_variable_decl)



state 329

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE .   (rule 168)

    $default	reduce using rule 168 (initial_state)



state 330

    goal_spec  ->  TK_OPEN KW_GOAL TK_OPEN KW_AND goal_list TK_CLOSE TK_CLOSE .   (rule 186)

    $default	reduce using rule 186 (goal_spec)



state 331

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 action_effect TK_CLOSE .   (rule 109)

    $default	reduce using rule 109 (forall_effect)



state 332

    $   	go to state 333



state 333

    $   	go to state 334



state 334

    $default	accept
