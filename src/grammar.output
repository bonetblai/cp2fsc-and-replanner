Useless nonterminals:

   goal_list
   single_goal


Terminals which are not used:

   TK_OPEN_SQ
   TK_CLOSE_SQ
   TK_INT
   KW_FLUENTS


Useless rules:

#230   goal_list :	 goal_list single_goal;
#231   goal_list :	 single_goal;
#232   single_goal :	 positive_literal;
#233   single_goal :	 negative_literal;



Grammar
rule 1    pddl_decls -> pddl_domain pddl_decls
rule 2    pddl_decls -> pddl_problem pddl_decls
rule 3    pddl_decls ->		/* empty */
rule 4    pddl_domain -> TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE
rule 5    pddl_domain -> TK_OPEN KW_DEFINE domain_name error TK_CLOSE
rule 6    domain_elements -> domain_elements domain_requires
rule 7    domain_elements -> domain_elements domain_types
rule 8    domain_elements -> domain_elements domain_constants
rule 9    domain_elements -> domain_elements domain_predicates
rule 10   domain_elements -> domain_elements domain_schemas
rule 11   domain_elements -> domain_elements domain_default_sensing
rule 12   domain_elements ->		/* empty */
rule 13   domain_name -> TK_OPEN KW_DOMAIN any_symbol TK_CLOSE
rule 14   any_symbol -> TK_NEW_SYMBOL
rule 15   any_symbol -> TK_OBJ_SYMBOL
rule 16   any_symbol -> TK_TYPE_SYMBOL
rule 17   any_symbol -> TK_PRED_SYMBOL
rule 18   any_symbol -> TK_VAR_SYMBOL
rule 19   any_symbol -> TK_ACTION_SYMBOL
rule 20   any_symbol -> TK_AXIOM_SYMBOL
rule 21   any_symbol -> TK_SENSOR_SYMBOL
rule 22   any_symbol -> TK_MISC_SYMBOL
rule 23   action_symbol -> TK_NEW_SYMBOL
rule 24   action_symbol -> TK_ACTION_SYMBOL
rule 25   sensor_symbol -> TK_NEW_SYMBOL
rule 26   sensor_symbol -> TK_SENSOR_SYMBOL
rule 27   axiom_symbol -> TK_NEW_SYMBOL
rule 28   axiom_symbol -> TK_AXIOM_SYMBOL
rule 29   domain_requires -> TK_OPEN KW_REQS require_list TK_CLOSE
rule 30   domain_requires -> TK_OPEN KW_REQS error TK_CLOSE
rule 31   require_list -> require_list KW_TRANSLATION
rule 32   require_list -> require_list TK_KEYWORD
rule 33   require_list ->		/* empty */
rule 34   domain_predicates -> TK_OPEN KW_PREDS predicate_list TK_CLOSE
rule 35   domain_predicates -> TK_OPEN KW_PREDS error TK_CLOSE
rule 36   predicate_list -> predicate_list predicate_decl
rule 37   predicate_list -> predicate_decl
rule 38   predicate_decl -> TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE
rule 39   predicate_decl -> TK_OPEN error TK_CLOSE
rule 40   param_list -> untyped_param_list
rule 41   param_list -> typed_param_list
rule 42   param_list ->		/* empty */
rule 43   untyped_param_list -> param_sym_list
rule 44   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list
rule 45   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL
rule 46   param_sym_list -> new_var_symbol param_sym_list
rule 47   param_sym_list -> new_var_symbol
rule 48   new_var_symbol -> TK_NEW_VAR_SYMBOL
rule 49   new_var_symbol -> TK_VAR_SYMBOL
rule 50   domain_types -> TK_OPEN KW_TYPES primitive_type_list TK_CLOSE
rule 51   domain_types -> TK_OPEN KW_TYPES typed_type_list TK_CLOSE
rule 52   typed_type_list -> primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list
rule 53   typed_type_list -> primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list
rule 54   typed_type_list ->		/* empty */
rule 55   primitive_type_list -> primitive_type_list primitive_type
rule 56   primitive_type_list -> primitive_type
rule 57   primitive_type -> TK_TYPE_SYMBOL
rule 58   primitive_type -> TK_NEW_SYMBOL
rule 59   domain_constants -> TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE
rule 60   domain_constants -> TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE
rule 61   domain_constants -> TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE
rule 62   domain_constants -> TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE
rule 63   @1 ->		/* empty */
rule 64   typed_constant_list -> constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list
rule 65   typed_constant_list ->		/* empty */
rule 66   untyped_constant_list -> constant_sym_list
rule 67   constant_sym_list -> constant_sym_list TK_NEW_SYMBOL
rule 68   constant_sym_list -> TK_NEW_SYMBOL
rule 69   domain_schemas -> action_decl
rule 70   domain_schemas -> axiom_decl
rule 71   domain_schemas -> sensor_decl
rule 72   domain_schemas -> observable_decl
rule 73   domain_schemas -> sticky_decl
rule 74   domain_schemas -> simple_variable_decl
rule 75   domain_schemas -> variable_group_decl
rule 76   @2 ->		/* empty */
rule 77   action_decl -> TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE
rule 78   action_decl -> TK_OPEN KW_ACTION error TK_CLOSE
rule 79   action_elements -> action_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 80   action_elements -> action_elements KW_PRE condition
rule 81   action_elements -> action_elements KW_EFFECT action_effect
rule 82   action_elements -> action_elements KW_OBSERVE positive_atomic_effect_list
rule 83   action_elements -> action_elements KW_SENSING sensing
rule 84   action_elements ->		/* empty */
rule 85   condition -> constant_condition
rule 86   condition -> single_condition
rule 87   condition -> and_condition
rule 88   condition -> or_condition
rule 89   condition -> forall_condition
rule 90   condition -> exists_condition
rule 91   constant_condition -> KW_TRUE
rule 92   constant_condition -> KW_FALSE
rule 93   single_condition -> literal
rule 94   literal -> positive_literal
rule 95   literal -> negative_literal
rule 96   positive_literal -> TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE
rule 97   positive_literal -> TK_OPEN TK_EQ argument_list TK_CLOSE
rule 98   negative_literal -> TK_OPEN KW_NOT positive_literal TK_CLOSE
rule 99   argument_list -> argument_list TK_VAR_SYMBOL
rule 100  argument_list -> argument_list TK_OBJ_SYMBOL
rule 101  argument_list ->		/* empty */
rule 102  and_condition -> TK_OPEN KW_AND condition_list TK_CLOSE
rule 103  or_condition -> TK_OPEN KW_OR condition_list TK_CLOSE
rule 104  @3 ->		/* empty */
rule 105  @4 ->		/* empty */
rule 106  forall_condition -> TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE
rule 107  @5 ->		/* empty */
rule 108  @6 ->		/* empty */
rule 109  exists_condition -> TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE
rule 110  single_condition_list -> single_condition_list single_condition
rule 111  single_condition_list -> single_condition
rule 112  condition_list -> condition_list condition
rule 113  condition_list -> condition
rule 114  action_effect -> single_action_effect
rule 115  action_effect -> TK_OPEN KW_AND action_effect_list TK_CLOSE
rule 116  action_effect_list -> action_effect_list single_action_effect
rule 117  action_effect_list -> single_action_effect
rule 118  single_action_effect -> atomic_effect
rule 119  single_action_effect -> conditional_effect
rule 120  single_action_effect -> forall_effect
rule 121  conditional_effect -> TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE
rule 122  @7 ->		/* empty */
rule 123  @8 ->		/* empty */
rule 124  forall_effect -> TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE
rule 125  optional_such_that -> KW_SUCH_THAT condition
rule 126  optional_such_that ->		/* empty */
rule 127  atomic_effect_kw_list -> TK_OPEN KW_AND atomic_effect_list TK_CLOSE
rule 128  atomic_effect_kw_list -> atomic_effect
rule 129  atomic_effect_list -> atomic_effect_list atomic_effect
rule 130  atomic_effect_list -> atomic_effect
rule 131  positive_atomic_effect_list -> positive_atomic_effect_list positive_atomic_effect
rule 132  positive_atomic_effect_list -> positive_atomic_effect
rule 133  atomic_effect -> literal
rule 134  positive_atomic_effect -> positive_literal
rule 135  sensing -> sensing_decl_list
rule 136  sensing ->		/* empty */
rule 137  sensing_decl_list -> sensing_decl_list sensing_decl
rule 138  sensing_decl_list -> sensing_decl
rule 139  sensing_decl -> sensing_model
rule 140  sensing_decl -> forall_sensing
rule 141  @9 ->		/* empty */
rule 142  @10 ->		/* empty */
rule 143  forall_sensing -> TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 optional_such_that sensing_decl_list TK_CLOSE
rule 144  sensing_model -> TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE
rule 145  sensing_model -> TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE
rule 146  sensing_model -> TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE
rule 147  sensing_model -> TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE
rule 148  sensing_model -> TK_OPEN KW_VARIABLE error TK_CLOSE
rule 149  sensing_model -> TK_OPEN KW_MODEL_FOR error TK_CLOSE
rule 150  @11 ->		/* empty */
rule 151  axiom_decl -> TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE
rule 152  axiom_decl -> TK_OPEN KW_AXIOM error TK_CLOSE
rule 153  axiom_elements -> axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 154  axiom_elements -> axiom_elements KW_BODY condition
rule 155  axiom_elements -> axiom_elements KW_HEAD atomic_effect_kw_list
rule 156  axiom_elements ->		/* empty */
rule 157  @12 ->		/* empty */
rule 158  sensor_decl -> TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE
rule 159  sensor_decl -> TK_OPEN KW_SENSOR error TK_CLOSE
rule 160  sensor_elements -> sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 161  sensor_elements -> sensor_elements KW_COND condition
rule 162  sensor_elements -> sensor_elements KW_SENSE positive_atomic_effect_list
rule 163  sensor_elements ->		/* empty */
rule 164  @13 ->		/* empty */
rule 165  observable_decl -> TK_OPEN KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE
rule 166  observable_decl -> TK_OPEN KW_OBSERVABLE error TK_CLOSE
rule 167  fluent_list_decl -> fluent_list_decl fluent_decl
rule 168  fluent_list_decl -> fluent_decl
rule 169  fluent_decl -> positive_atomic_effect
rule 170  fluent_decl -> forall_effect
rule 171  @14 ->		/* empty */
rule 172  sticky_decl -> TK_OPEN KW_STICKY @14 fluent_list_decl TK_CLOSE
rule 173  sticky_decl -> TK_OPEN KW_STICKY error TK_CLOSE
rule 174  @15 ->		/* empty */
rule 175  simple_variable_decl -> TK_OPEN variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE
rule 176  @16 ->		/* empty */
rule 177  @17 ->		/* empty */
rule 178  simple_variable_decl -> TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE
rule 179  simple_variable_decl -> TK_OPEN KW_VARIABLE error TK_CLOSE
rule 180  variable_type -> KW_VARIABLE
rule 181  variable_type -> KW_OBS_VARIABLE
rule 182  @18 ->		/* empty */
rule 183  variable_group_decl -> TK_OPEN KW_VGROUP TK_NEW_SYMBOL @18 state_variable_list_decl TK_CLOSE
rule 184  @19 ->		/* empty */
rule 185  @20 ->		/* empty */
rule 186  variable_group_decl -> TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE
rule 187  variable_group_decl -> TK_OPEN KW_VGROUP error TK_CLOSE
rule 188  state_variable_list_decl -> state_variable_list_decl state_variable
rule 189  state_variable_list_decl -> state_variable_list_decl forall_state_variable_list_decl
rule 190  state_variable_list_decl ->		/* empty */
rule 191  state_variable -> TK_VARNAME_SYMBOL
rule 192  state_variable -> TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE
rule 193  @21 ->		/* empty */
rule 194  @22 ->		/* empty */
rule 195  forall_state_variable_list_decl -> TK_OPEN KW_FORALL TK_OPEN @21 param_list TK_CLOSE @22 optional_such_that state_variable_list_decl TK_CLOSE
rule 196  domain_default_sensing -> TK_OPEN KW_DEFAULT_SENSING sensing TK_CLOSE
rule 197  @23 ->		/* empty */
rule 198  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @23 problem_elements TK_CLOSE
rule 199  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE
rule 200  problem_elements -> problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE
rule 201  problem_elements -> problem_elements domain_requires
rule 202  problem_elements -> problem_elements domain_constants
rule 203  problem_elements -> problem_elements initial_state
rule 204  problem_elements -> problem_elements hidden_state
rule 205  problem_elements -> problem_elements goal_spec
rule 206  problem_elements ->		/* empty */
rule 207  initial_state -> TK_OPEN KW_INIT TK_CLOSE
rule 208  initial_state -> TK_OPEN KW_INIT init_elements TK_CLOSE
rule 209  initial_state -> TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE
rule 210  init_elements -> init_elements single_init_element
rule 211  init_elements -> single_init_element
rule 212  single_init_element -> literal
rule 213  single_init_element -> invariant
rule 214  single_init_element -> clause
rule 215  single_init_element -> oneof
rule 216  single_init_element -> unknown
rule 217  at_least_one_invariant -> TK_OPEN KW_INVARIANT single_condition_list TK_CLOSE
rule 218  at_least_one_invariant -> TK_OPEN KW_AT_LEAST_ONE single_condition_list TK_CLOSE
rule 219  at_most_one_invariant -> TK_OPEN KW_AT_MOST_ONE single_condition_list TK_CLOSE
rule 220  exactly_one_invariant -> TK_OPEN KW_EXACTLY_ONE single_condition_list TK_CLOSE
rule 221  invariant -> at_least_one_invariant
rule 222  invariant -> at_most_one_invariant
rule 223  invariant -> exactly_one_invariant
rule 224  clause -> TK_OPEN KW_OR single_condition_list TK_CLOSE
rule 225  oneof -> TK_OPEN KW_ONEOF single_condition_list TK_CLOSE
rule 226  unknown -> TK_OPEN KW_UNKNOWN positive_literal TK_CLOSE
rule 227  hidden_state -> TK_OPEN KW_HIDDEN init_elements TK_CLOSE
rule 228  hidden_state -> TK_OPEN KW_HIDDEN TK_CLOSE
rule 229  goal_spec -> TK_OPEN KW_GOAL condition TK_CLOSE

Terminals, with rules where they appear

$ (-1)
error (256) 5 30 35 39 78 148 149 152 159 166 173 179 187 199
TK_OPEN (258) 4 5 13 29 30 34 35 38 39 50 51 59 60 61 62 77 78 79 96
    97 98 102 103 106 109 115 121 124 127 143 144 145 146 147 148 149
    151 152 153 158 159 160 165 166 172 173 175 178 179 183 186 187
    192 195 196 198 199 200 207 208 209 217 218 219 220 224 225 226
    227 228 229
TK_CLOSE (259) 4 5 13 29 30 34 35 38 39 50 51 59 60 61 62 77 78 79
    96 97 98 102 103 106 109 115 121 124 127 143 144 145 146 147 148
    149 151 152 153 158 159 160 165 166 172 173 175 178 179 183 186
    187 192 195 196 198 199 200 207 208 209 217 218 219 220 224 225
    226 227 228 229
TK_OPEN_SQ (260)
TK_CLOSE_SQ (261)
TK_EQ (262) 97
TK_HYPHEN (263) 44 45 52 53 64
TK_NEW_SYMBOL (264) 14 23 25 27 38 53 58 67 68 175 178 183 186
TK_OBJ_SYMBOL (265) 15 100
TK_TYPE_SYMBOL (266) 16 44 45 52 57 64
TK_PRED_SYMBOL (267) 17 96
TK_VAR_SYMBOL (268) 18 49 99
TK_ACTION_SYMBOL (269) 19 24
TK_AXIOM_SYMBOL (270) 20 28
TK_SENSOR_SYMBOL (271) 21 26
TK_MISC_SYMBOL (272) 22
TK_KEYWORD (273) 32
TK_NEW_VAR_SYMBOL (274) 48
TK_VARNAME_SYMBOL (275) 144 145 146 147 191 192
TK_INT (276)
KW_REQS (277) 29 30
KW_TRANSLATION (278) 31
KW_CONSTANTS (279) 59 61
KW_PREDS (280) 34 35
KW_TYPES (281) 50 51
KW_DEFINE (282) 4 5 198 199
KW_DOMAIN (283) 13
KW_ACTION (284) 77 78
KW_ARGS (285) 79 153 160
KW_PRE (286) 80
KW_EFFECT (287) 81
KW_AND (288) 102 115 127 209
KW_TRUE (289) 91
KW_FALSE (290) 92
KW_OR (291) 103 224
KW_EXISTS (292) 109
KW_FORALL (293) 106 124 143 195
KW_SUCH_THAT (294) 125
KW_NOT (295) 98
KW_WHEN (296) 121
KW_ONEOF (297) 225
KW_UNKNOWN (298) 226
KW_PROBLEM (299) 198 199
KW_FORDOMAIN (300) 200
KW_OBJECTS (301) 60 62
KW_INIT (302) 207 208 209
KW_GOAL (303) 229
KW_SENSOR (304) 158 159
KW_SENSE (305) 162
KW_OBSERVE (306) 82
KW_AXIOM (307) 151 152
KW_COND (308) 161
KW_OBSERVABLE (309) 165 166
KW_BODY (310) 154
KW_HEAD (311) 155
KW_STICKY (312) 172 173
KW_FLUENTS (313)
KW_HIDDEN (314) 227 228
KW_INVARIANT (315) 217
KW_AT_LEAST_ONE (316) 218
KW_AT_MOST_ONE (317) 219
KW_EXACTLY_ONE (318) 220
KW_VARIABLE (319) 146 147 148 179 180
KW_OBS_VARIABLE (320) 181
KW_VGROUP (321) 183 186 187
KW_SENSING (322) 83
KW_DEFAULT_SENSING (323) 196
KW_MODEL_FOR (324) 144 145 149

Nonterminals, with rules where they appear

pddl_decls (70)
    on left: 1 2 3, on right: 1 2
pddl_domain (71)
    on left: 4 5, on right: 1
domain_elements (72)
    on left: 6 7 8 9 10 11 12, on right: 4 6 7 8 9 10 11
domain_name (73)
    on left: 13, on right: 4 5
any_symbol (74)
    on left: 14 15 16 17 18 19 20 21 22, on right: 13 198 200
action_symbol (75)
    on left: 23 24, on right: 77
sensor_symbol (76)
    on left: 25 26, on right: 158
axiom_symbol (77)
    on left: 27 28, on right: 151
domain_requires (78)
    on left: 29 30, on right: 6 201
require_list (79)
    on left: 31 32 33, on right: 29 31 32
domain_predicates (80)
    on left: 34 35, on right: 9
predicate_list (81)
    on left: 36 37, on right: 34 36
predicate_decl (82)
    on left: 38 39, on right: 36 37
param_list (83)
    on left: 40 41 42, on right: 38 79 106 109 124 143 153 160 178
    186 195
untyped_param_list (84)
    on left: 43, on right: 40
typed_param_list (85)
    on left: 44 45, on right: 41 44
param_sym_list (86)
    on left: 46 47, on right: 43 44 45 46
new_var_symbol (87)
    on left: 48 49, on right: 46 47
domain_types (88)
    on left: 50 51, on right: 7
typed_type_list (89)
    on left: 52 53 54, on right: 51 52 53
primitive_type_list (90)
    on left: 55 56, on right: 50 52 53 55
primitive_type (91)
    on left: 57 58, on right: 55 56
domain_constants (92)
    on left: 59 60 61 62, on right: 8 202
typed_constant_list (93)
    on left: 64 65, on right: 59 60 64
@1 (94)
    on left: 63, on right: 64
untyped_constant_list (95)
    on left: 66, on right: 61 62
constant_sym_list (96)
    on left: 67 68, on right: 64 66 67
domain_schemas (97)
    on left: 69 70 71 72 73 74 75, on right: 10
action_decl (98)
    on left: 77 78, on right: 69
@2 (99)
    on left: 76, on right: 77
action_elements (100)
    on left: 79 80 81 82 83 84, on right: 77 79 80 81 82 83
condition (101)
    on left: 85 86 87 88 89 90, on right: 80 106 109 112 113 121 125
    144 145 154 161 229
constant_condition (102)
    on left: 91 92, on right: 85
single_condition (103)
    on left: 93, on right: 86 110 111
literal (104)
    on left: 94 95, on right: 93 133 144 145 212
positive_literal (105)
    on left: 96 97, on right: 94 98 134 226 232
negative_literal (106)
    on left: 98, on right: 95 233
argument_list (107)
    on left: 99 100 101, on right: 96 97 99 100 145 147 192
and_condition (108)
    on left: 102, on right: 87
or_condition (109)
    on left: 103, on right: 88
forall_condition (110)
    on left: 106, on right: 89
@3 (111)
    on left: 104, on right: 106
@4 (112)
    on left: 105, on right: 106
exists_condition (113)
    on left: 109, on right: 90
@5 (114)
    on left: 107, on right: 109
@6 (115)
    on left: 108, on right: 109
single_condition_list (116)
    on left: 110 111, on right: 110 217 218 219 220 224 225
condition_list (117)
    on left: 112 113, on right: 102 103 112
action_effect (118)
    on left: 114 115, on right: 81 124
action_effect_list (119)
    on left: 116 117, on right: 115 116
single_action_effect (120)
    on left: 118 119 120, on right: 114 116 117
conditional_effect (121)
    on left: 121, on right: 119
forall_effect (122)
    on left: 124, on right: 120 170
@7 (123)
    on left: 122, on right: 124
@8 (124)
    on left: 123, on right: 124
optional_such_that (125)
    on left: 125 126, on right: 124 143 178 186 195
atomic_effect_kw_list (126)
    on left: 127 128, on right: 121 155
atomic_effect_list (127)
    on left: 129 130, on right: 127 129
positive_atomic_effect_list (128)
    on left: 131 132, on right: 82 131 162
atomic_effect (129)
    on left: 133, on right: 118 128 129 130
positive_atomic_effect (130)
    on left: 134, on right: 131 132 169
sensing (131)
    on left: 135 136, on right: 83 196
sensing_decl_list (132)
    on left: 137 138, on right: 135 137 143
sensing_decl (133)
    on left: 139 140, on right: 137 138
forall_sensing (134)
    on left: 143, on right: 140
@9 (135)
    on left: 141, on right: 143
@10 (136)
    on left: 142, on right: 143
sensing_model (137)
    on left: 144 145 146 147 148 149, on right: 139
axiom_decl (138)
    on left: 151 152, on right: 70
@11 (139)
    on left: 150, on right: 151
axiom_elements (140)
    on left: 153 154 155 156, on right: 151 153 154 155
sensor_decl (141)
    on left: 158 159, on right: 71
@12 (142)
    on left: 157, on right: 158
sensor_elements (143)
    on left: 160 161 162 163, on right: 158 160 161 162
observable_decl (144)
    on left: 165 166, on right: 72
@13 (145)
    on left: 164, on right: 165
fluent_list_decl (146)
    on left: 167 168, on right: 165 167 172 175 178
fluent_decl (147)
    on left: 169 170, on right: 167 168
sticky_decl (148)
    on left: 172 173, on right: 73
@14 (149)
    on left: 171, on right: 172
simple_variable_decl (150)
    on left: 175 178 179, on right: 74
@15 (151)
    on left: 174, on right: 175
@16 (152)
    on left: 176, on right: 178
@17 (153)
    on left: 177, on right: 178
variable_type (154)
    on left: 180 181, on right: 175 178
variable_group_decl (155)
    on left: 183 186 187, on right: 75
@18 (156)
    on left: 182, on right: 183
@19 (157)
    on left: 184, on right: 186
@20 (158)
    on left: 185, on right: 186
state_variable_list_decl (159)
    on left: 188 189 190, on right: 183 186 188 189 195
state_variable (160)
    on left: 191 192, on right: 188
forall_state_variable_list_decl (161)
    on left: 195, on right: 189
@21 (162)
    on left: 193, on right: 195
@22 (163)
    on left: 194, on right: 195
domain_default_sensing (164)
    on left: 196, on right: 11
pddl_problem (165)
    on left: 198 199, on right: 2
@23 (166)
    on left: 197, on right: 198
problem_elements (167)
    on left: 200 201 202 203 204 205 206, on right: 198 200 201 202
    203 204 205
initial_state (168)
    on left: 207 208 209, on right: 203
init_elements (169)
    on left: 210 211, on right: 208 209 210 227
single_init_element (170)
    on left: 212 213 214 215 216, on right: 210 211
at_least_one_invariant (171)
    on left: 217 218, on right: 221
at_most_one_invariant (172)
    on left: 219, on right: 222
exactly_one_invariant (173)
    on left: 220, on right: 223
invariant (174)
    on left: 221 222 223, on right: 213
clause (175)
    on left: 224, on right: 214
oneof (176)
    on left: 225, on right: 215
unknown (177)
    on left: 226, on right: 216
hidden_state (178)
    on left: 227 228, on right: 204
goal_spec (179)
    on left: 229, on right: 205


state 0

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 420
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 1

    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @23 problem_elements TK_CLOSE   (rule 198)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 199)

    KW_DEFINE	shift, and go to state 4



state 2

    pddl_decls  ->  pddl_domain . pddl_decls   (rule 1)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 5
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 3

    pddl_decls  ->  pddl_problem . pddl_decls   (rule 2)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 6
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 4

    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @23 problem_elements TK_CLOSE   (rule 198)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 199)

    TK_OPEN	shift, and go to state 7

    domain_name	go to state 8



state 5

    pddl_decls  ->  pddl_domain pddl_decls .   (rule 1)

    $default	reduce using rule 1 (pddl_decls)



state 6

    pddl_decls  ->  pddl_problem pddl_decls .   (rule 2)

    $default	reduce using rule 2 (pddl_decls)



state 7

    domain_name  ->  TK_OPEN . KW_DOMAIN any_symbol TK_CLOSE   (rule 13)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM any_symbol TK_CLOSE @23 problem_elements TK_CLOSE   (rule 198)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM error TK_CLOSE   (rule 199)

    KW_DOMAIN	shift, and go to state 9
    KW_PROBLEM	shift, and go to state 10



state 8

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . error TK_CLOSE   (rule 5)

    error	shift, and go to state 11

    TK_OPEN	reduce using rule 12 (domain_elements)
    TK_CLOSE	reduce using rule 12 (domain_elements)
    KW_FALSE	reduce using rule 12 (domain_elements)
    KW_OR	reduce using rule 12 (domain_elements)
    KW_SENSING	reduce using rule 12 (domain_elements)
    KW_DEFAULT_SENSING	reduce using rule 12 (domain_elements)

    domain_elements	go to state 12



state 9

    domain_name  ->  TK_OPEN KW_DOMAIN . any_symbol TK_CLOSE   (rule 13)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 22



state 10

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . any_symbol TK_CLOSE @23 problem_elements TK_CLOSE   (rule 198)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . error TK_CLOSE   (rule 199)

    error	shift, and go to state 23
    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 24



state 11

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error . TK_CLOSE   (rule 5)

    TK_CLOSE	shift, and go to state 25



state 12

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements . TK_CLOSE   (rule 4)
    domain_elements  ->  domain_elements . domain_requires   (rule 6)
    domain_elements  ->  domain_elements . domain_types   (rule 7)
    domain_elements  ->  domain_elements . domain_constants   (rule 8)
    domain_elements  ->  domain_elements . domain_predicates   (rule 9)
    domain_elements  ->  domain_elements . domain_schemas   (rule 10)
    domain_elements  ->  domain_elements . domain_default_sensing   (rule 11)

    TK_OPEN	shift, and go to state 26
    TK_CLOSE	shift, and go to state 27

    domain_requires	go to state 28
    domain_predicates	go to state 29
    domain_types	go to state 30
    domain_constants	go to state 31
    domain_schemas	go to state 32
    action_decl	go to state 33
    axiom_decl	go to state 34
    sensor_decl	go to state 35
    observable_decl	go to state 36
    sticky_decl	go to state 37
    simple_variable_decl	go to state 38
    variable_group_decl	go to state 39
    domain_default_sensing	go to state 40



state 13

    any_symbol  ->  TK_NEW_SYMBOL .   (rule 14)

    $default	reduce using rule 14 (any_symbol)



state 14

    any_symbol  ->  TK_OBJ_SYMBOL .   (rule 15)

    $default	reduce using rule 15 (any_symbol)



state 15

    any_symbol  ->  TK_TYPE_SYMBOL .   (rule 16)

    $default	reduce using rule 16 (any_symbol)



state 16

    any_symbol  ->  TK_PRED_SYMBOL .   (rule 17)

    $default	reduce using rule 17 (any_symbol)



state 17

    any_symbol  ->  TK_VAR_SYMBOL .   (rule 18)

    $default	reduce using rule 18 (any_symbol)



state 18

    any_symbol  ->  TK_ACTION_SYMBOL .   (rule 19)

    $default	reduce using rule 19 (any_symbol)



state 19

    any_symbol  ->  TK_AXIOM_SYMBOL .   (rule 20)

    $default	reduce using rule 20 (any_symbol)



state 20

    any_symbol  ->  TK_SENSOR_SYMBOL .   (rule 21)

    $default	reduce using rule 21 (any_symbol)



state 21

    any_symbol  ->  TK_MISC_SYMBOL .   (rule 22)

    $default	reduce using rule 22 (any_symbol)



state 22

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol . TK_CLOSE   (rule 13)

    TK_CLOSE	shift, and go to state 41



state 23

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error . TK_CLOSE   (rule 199)

    TK_CLOSE	shift, and go to state 42



state 24

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol . TK_CLOSE @23 problem_elements TK_CLOSE   (rule 198)

    TK_CLOSE	shift, and go to state 43



state 25

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error TK_CLOSE .   (rule 5)

    $default	reduce using rule 5 (pddl_domain)



state 26

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 30)
    domain_predicates  ->  TK_OPEN . KW_PREDS predicate_list TK_CLOSE   (rule 34)
    domain_predicates  ->  TK_OPEN . KW_PREDS error TK_CLOSE   (rule 35)
    domain_types  ->  TK_OPEN . KW_TYPES primitive_type_list TK_CLOSE   (rule 50)
    domain_types  ->  TK_OPEN . KW_TYPES typed_type_list TK_CLOSE   (rule 51)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 62)
    action_decl  ->  TK_OPEN . KW_ACTION action_symbol @2 action_elements TK_CLOSE   (rule 77)
    action_decl  ->  TK_OPEN . KW_ACTION error TK_CLOSE   (rule 78)
    axiom_decl  ->  TK_OPEN . KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE   (rule 151)
    axiom_decl  ->  TK_OPEN . KW_AXIOM error TK_CLOSE   (rule 152)
    sensor_decl  ->  TK_OPEN . KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE   (rule 158)
    sensor_decl  ->  TK_OPEN . KW_SENSOR error TK_CLOSE   (rule 159)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE   (rule 165)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE error TK_CLOSE   (rule 166)
    sticky_decl  ->  TK_OPEN . KW_STICKY @14 fluent_list_decl TK_CLOSE   (rule 172)
    sticky_decl  ->  TK_OPEN . KW_STICKY error TK_CLOSE   (rule 173)
    simple_variable_decl  ->  TK_OPEN . variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE   (rule 175)
    simple_variable_decl  ->  TK_OPEN . variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE   (rule 178)
    simple_variable_decl  ->  TK_OPEN . KW_VARIABLE error TK_CLOSE   (rule 179)
    variable_group_decl  ->  TK_OPEN . KW_VGROUP TK_NEW_SYMBOL @18 state_variable_list_decl TK_CLOSE   (rule 183)
    variable_group_decl  ->  TK_OPEN . KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)
    variable_group_decl  ->  TK_OPEN . KW_VGROUP error TK_CLOSE   (rule 187)
    domain_default_sensing  ->  TK_OPEN . KW_DEFAULT_SENSING sensing TK_CLOSE   (rule 196)

    KW_REQS	shift, and go to state 44
    KW_CONSTANTS	shift, and go to state 45
    KW_PREDS	shift, and go to state 46
    KW_TYPES	shift, and go to state 47
    KW_ACTION	shift, and go to state 48
    KW_OBJECTS	shift, and go to state 49
    KW_SENSOR	shift, and go to state 50
    KW_AXIOM	shift, and go to state 51
    KW_OBSERVABLE	shift, and go to state 52
    KW_STICKY	shift, and go to state 53
    KW_VARIABLE	shift, and go to state 54
    KW_OBS_VARIABLE	shift, and go to state 55
    KW_VGROUP	shift, and go to state 56
    KW_DEFAULT_SENSING	shift, and go to state 57

    variable_type	go to state 58



state 27

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE .   (rule 4)

    $default	reduce using rule 4 (pddl_domain)



state 28

    domain_elements  ->  domain_elements domain_requires .   (rule 6)

    $default	reduce using rule 6 (domain_elements)



state 29

    domain_elements  ->  domain_elements domain_predicates .   (rule 9)

    $default	reduce using rule 9 (domain_elements)



state 30

    domain_elements  ->  domain_elements domain_types .   (rule 7)

    $default	reduce using rule 7 (domain_elements)



state 31

    domain_elements  ->  domain_elements domain_constants .   (rule 8)

    $default	reduce using rule 8 (domain_elements)



state 32

    domain_elements  ->  domain_elements domain_schemas .   (rule 10)

    $default	reduce using rule 10 (domain_elements)



state 33

    domain_schemas  ->  action_decl .   (rule 69)

    $default	reduce using rule 69 (domain_schemas)



state 34

    domain_schemas  ->  axiom_decl .   (rule 70)

    $default	reduce using rule 70 (domain_schemas)



state 35

    domain_schemas  ->  sensor_decl .   (rule 71)

    $default	reduce using rule 71 (domain_schemas)



state 36

    domain_schemas  ->  observable_decl .   (rule 72)

    $default	reduce using rule 72 (domain_schemas)



state 37

    domain_schemas  ->  sticky_decl .   (rule 73)

    $default	reduce using rule 73 (domain_schemas)



state 38

    domain_schemas  ->  simple_variable_decl .   (rule 74)

    $default	reduce using rule 74 (domain_schemas)



state 39

    domain_schemas  ->  variable_group_decl .   (rule 75)

    $default	reduce using rule 75 (domain_schemas)



state 40

    domain_elements  ->  domain_elements domain_default_sensing .   (rule 11)

    $default	reduce using rule 11 (domain_elements)



state 41

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol TK_CLOSE .   (rule 13)

    $default	reduce using rule 13 (domain_name)



state 42

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE .   (rule 199)

    $default	reduce using rule 199 (pddl_problem)



state 43

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE . @23 problem_elements TK_CLOSE   (rule 198)

    $default	reduce using rule 197 (@23)

    @23 	go to state 59



state 44

    domain_requires  ->  TK_OPEN KW_REQS . require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN KW_REQS . error TK_CLOSE   (rule 30)

    error	shift, and go to state 60

    TK_CLOSE	reduce using rule 33 (require_list)
    TK_KEYWORD	reduce using rule 33 (require_list)
    KW_TRANSLATION	reduce using rule 33 (require_list)
    KW_OR	reduce using rule 33 (require_list)
    KW_SENSE	reduce using rule 33 (require_list)
    KW_BODY	reduce using rule 33 (require_list)
    KW_DEFAULT_SENSING	reduce using rule 33 (require_list)

    require_list	go to state 61



state 45

    domain_constants  ->  TK_OPEN KW_CONSTANTS . typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN KW_CONSTANTS . untyped_constant_list TK_CLOSE   (rule 61)

    TK_NEW_SYMBOL	shift, and go to state 62

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 63
    untyped_constant_list	go to state 64
    constant_sym_list	go to state 65



state 46

    domain_predicates  ->  TK_OPEN KW_PREDS . predicate_list TK_CLOSE   (rule 34)
    domain_predicates  ->  TK_OPEN KW_PREDS . error TK_CLOSE   (rule 35)

    error	shift, and go to state 66
    TK_OPEN	shift, and go to state 67

    predicate_list	go to state 68
    predicate_decl	go to state 69



state 47

    domain_types  ->  TK_OPEN KW_TYPES . primitive_type_list TK_CLOSE   (rule 50)
    domain_types  ->  TK_OPEN KW_TYPES . typed_type_list TK_CLOSE   (rule 51)

    TK_NEW_SYMBOL	shift, and go to state 70
    TK_TYPE_SYMBOL	shift, and go to state 71

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 72
    primitive_type_list	go to state 73
    primitive_type	go to state 74



state 48

    action_decl  ->  TK_OPEN KW_ACTION . action_symbol @2 action_elements TK_CLOSE   (rule 77)
    action_decl  ->  TK_OPEN KW_ACTION . error TK_CLOSE   (rule 78)

    error	shift, and go to state 75
    TK_NEW_SYMBOL	shift, and go to state 76
    TK_ACTION_SYMBOL	shift, and go to state 77

    action_symbol	go to state 78



state 49

    domain_constants  ->  TK_OPEN KW_OBJECTS . typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN KW_OBJECTS . untyped_constant_list TK_CLOSE   (rule 62)

    TK_NEW_SYMBOL	shift, and go to state 62

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 79
    untyped_constant_list	go to state 80
    constant_sym_list	go to state 65



state 50

    sensor_decl  ->  TK_OPEN KW_SENSOR . sensor_symbol @12 sensor_elements TK_CLOSE   (rule 158)
    sensor_decl  ->  TK_OPEN KW_SENSOR . error TK_CLOSE   (rule 159)

    error	shift, and go to state 81
    TK_NEW_SYMBOL	shift, and go to state 82
    TK_SENSOR_SYMBOL	shift, and go to state 83

    sensor_symbol	go to state 84



state 51

    axiom_decl  ->  TK_OPEN KW_AXIOM . axiom_symbol @11 axiom_elements TK_CLOSE   (rule 151)
    axiom_decl  ->  TK_OPEN KW_AXIOM . error TK_CLOSE   (rule 152)

    error	shift, and go to state 85
    TK_NEW_SYMBOL	shift, and go to state 86
    TK_AXIOM_SYMBOL	shift, and go to state 87

    axiom_symbol	go to state 88



state 52

    observable_decl  ->  TK_OPEN KW_OBSERVABLE . @13 fluent_list_decl TK_CLOSE   (rule 165)
    observable_decl  ->  TK_OPEN KW_OBSERVABLE . error TK_CLOSE   (rule 166)

    error	shift, and go to state 89

    TK_OPEN	reduce using rule 164 (@13)
    KW_FALSE	reduce using rule 164 (@13)
    KW_SENSING	reduce using rule 164 (@13)

    @13 	go to state 90



state 53

    sticky_decl  ->  TK_OPEN KW_STICKY . @14 fluent_list_decl TK_CLOSE   (rule 172)
    sticky_decl  ->  TK_OPEN KW_STICKY . error TK_CLOSE   (rule 173)

    error	shift, and go to state 91

    TK_OPEN	reduce using rule 171 (@14)
    KW_FALSE	reduce using rule 171 (@14)
    KW_SENSING	reduce using rule 171 (@14)

    @14 	go to state 92



state 54

    simple_variable_decl  ->  TK_OPEN KW_VARIABLE . error TK_CLOSE   (rule 179)
    variable_type  ->  KW_VARIABLE .   (rule 180)

    error	shift, and go to state 93

    TK_OPEN	reduce using rule 180 (variable_type)
    TK_NEW_SYMBOL	reduce using rule 180 (variable_type)
    KW_FALSE	reduce using rule 180 (variable_type)
    KW_WHEN	reduce using rule 180 (variable_type)
    KW_SENSING	reduce using rule 180 (variable_type)



state 55

    variable_type  ->  KW_OBS_VARIABLE .   (rule 181)

    $default	reduce using rule 181 (variable_type)



state 56

    variable_group_decl  ->  TK_OPEN KW_VGROUP . TK_NEW_SYMBOL @18 state_variable_list_decl TK_CLOSE   (rule 183)
    variable_group_decl  ->  TK_OPEN KW_VGROUP . TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)
    variable_group_decl  ->  TK_OPEN KW_VGROUP . error TK_CLOSE   (rule 187)

    error	shift, and go to state 94
    TK_OPEN	shift, and go to state 95
    TK_NEW_SYMBOL	shift, and go to state 96



state 57

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING . sensing TK_CLOSE   (rule 196)

    TK_OPEN	shift, and go to state 97

    $default	reduce using rule 136 (sensing)

    sensing	go to state 98
    sensing_decl_list	go to state 99
    sensing_decl	go to state 100
    forall_sensing	go to state 101
    sensing_model	go to state 102



state 58

    simple_variable_decl  ->  TK_OPEN variable_type . TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE   (rule 175)
    simple_variable_decl  ->  TK_OPEN variable_type . TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 103
    TK_NEW_SYMBOL	shift, and go to state 104



state 59

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @23 . problem_elements TK_CLOSE   (rule 198)

    $default	reduce using rule 206 (problem_elements)

    problem_elements	go to state 105



state 60

    domain_requires  ->  TK_OPEN KW_REQS error . TK_CLOSE   (rule 30)

    TK_CLOSE	shift, and go to state 106



state 61

    domain_requires  ->  TK_OPEN KW_REQS require_list . TK_CLOSE   (rule 29)
    require_list  ->  require_list . KW_TRANSLATION   (rule 31)
    require_list  ->  require_list . TK_KEYWORD   (rule 32)

    TK_CLOSE	shift, and go to state 107
    TK_KEYWORD	shift, and go to state 108
    KW_TRANSLATION	shift, and go to state 109



state 62

    constant_sym_list  ->  TK_NEW_SYMBOL .   (rule 68)

    $default	reduce using rule 68 (constant_sym_list)



state 63

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list . TK_CLOSE   (rule 59)

    TK_CLOSE	shift, and go to state 110



state 64

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list . TK_CLOSE   (rule 61)

    TK_CLOSE	shift, and go to state 111



state 65

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)
    untyped_constant_list  ->  constant_sym_list .   (rule 66)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 67)

    TK_HYPHEN	shift, and go to state 112
    TK_NEW_SYMBOL	shift, and go to state 113

    $default	reduce using rule 66 (untyped_constant_list)



state 66

    domain_predicates  ->  TK_OPEN KW_PREDS error . TK_CLOSE   (rule 35)

    TK_CLOSE	shift, and go to state 114



state 67

    predicate_decl  ->  TK_OPEN . TK_NEW_SYMBOL param_list TK_CLOSE   (rule 38)
    predicate_decl  ->  TK_OPEN . error TK_CLOSE   (rule 39)

    error	shift, and go to state 115
    TK_NEW_SYMBOL	shift, and go to state 116



state 68

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list . TK_CLOSE   (rule 34)
    predicate_list  ->  predicate_list . predicate_decl   (rule 36)

    TK_OPEN	shift, and go to state 67
    TK_CLOSE	shift, and go to state 117

    predicate_decl	go to state 118



state 69

    predicate_list  ->  predicate_decl .   (rule 37)

    $default	reduce using rule 37 (predicate_list)



state 70

    primitive_type  ->  TK_NEW_SYMBOL .   (rule 58)

    $default	reduce using rule 58 (primitive_type)



state 71

    primitive_type  ->  TK_TYPE_SYMBOL .   (rule 57)

    $default	reduce using rule 57 (primitive_type)



state 72

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list . TK_CLOSE   (rule 51)

    TK_CLOSE	shift, and go to state 119



state 73

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list . TK_CLOSE   (rule 50)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 53)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 55)

    TK_CLOSE	shift, and go to state 120
    TK_HYPHEN	shift, and go to state 121
    TK_NEW_SYMBOL	shift, and go to state 70
    TK_TYPE_SYMBOL	shift, and go to state 71

    primitive_type	go to state 122



state 74

    primitive_type_list  ->  primitive_type .   (rule 56)

    $default	reduce using rule 56 (primitive_type_list)



state 75

    action_decl  ->  TK_OPEN KW_ACTION error . TK_CLOSE   (rule 78)

    TK_CLOSE	shift, and go to state 123



state 76

    action_symbol  ->  TK_NEW_SYMBOL .   (rule 23)

    $default	reduce using rule 23 (action_symbol)



state 77

    action_symbol  ->  TK_ACTION_SYMBOL .   (rule 24)

    $default	reduce using rule 24 (action_symbol)



state 78

    action_decl  ->  TK_OPEN KW_ACTION action_symbol . @2 action_elements TK_CLOSE   (rule 77)

    $default	reduce using rule 76 (@2)

    @2  	go to state 124



state 79

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list . TK_CLOSE   (rule 60)

    TK_CLOSE	shift, and go to state 125



state 80

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list . TK_CLOSE   (rule 62)

    TK_CLOSE	shift, and go to state 126



state 81

    sensor_decl  ->  TK_OPEN KW_SENSOR error . TK_CLOSE   (rule 159)

    TK_CLOSE	shift, and go to state 127



state 82

    sensor_symbol  ->  TK_NEW_SYMBOL .   (rule 25)

    $default	reduce using rule 25 (sensor_symbol)



state 83

    sensor_symbol  ->  TK_SENSOR_SYMBOL .   (rule 26)

    $default	reduce using rule 26 (sensor_symbol)



state 84

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol . @12 sensor_elements TK_CLOSE   (rule 158)

    $default	reduce using rule 157 (@12)

    @12 	go to state 128



state 85

    axiom_decl  ->  TK_OPEN KW_AXIOM error . TK_CLOSE   (rule 152)

    TK_CLOSE	shift, and go to state 129



state 86

    axiom_symbol  ->  TK_NEW_SYMBOL .   (rule 27)

    $default	reduce using rule 27 (axiom_symbol)



state 87

    axiom_symbol  ->  TK_AXIOM_SYMBOL .   (rule 28)

    $default	reduce using rule 28 (axiom_symbol)



state 88

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol . @11 axiom_elements TK_CLOSE   (rule 151)

    $default	reduce using rule 150 (@11)

    @11 	go to state 130



state 89

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error . TK_CLOSE   (rule 166)

    TK_CLOSE	shift, and go to state 131



state 90

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 . fluent_list_decl TK_CLOSE   (rule 165)

    TK_OPEN	shift, and go to state 132

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_list_decl	go to state 136
    fluent_decl	go to state 137



state 91

    sticky_decl  ->  TK_OPEN KW_STICKY error . TK_CLOSE   (rule 173)

    TK_CLOSE	shift, and go to state 138



state 92

    sticky_decl  ->  TK_OPEN KW_STICKY @14 . fluent_list_decl TK_CLOSE   (rule 172)

    TK_OPEN	shift, and go to state 132

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_list_decl	go to state 139
    fluent_decl	go to state 137



state 93

    simple_variable_decl  ->  TK_OPEN KW_VARIABLE error . TK_CLOSE   (rule 179)

    TK_CLOSE	shift, and go to state 140



state 94

    variable_group_decl  ->  TK_OPEN KW_VGROUP error . TK_CLOSE   (rule 187)

    TK_CLOSE	shift, and go to state 141



state 95

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN . TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)

    TK_NEW_SYMBOL	shift, and go to state 142



state 96

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_NEW_SYMBOL . @18 state_variable_list_decl TK_CLOSE   (rule 183)

    $default	reduce using rule 182 (@18)

    @18 	go to state 143



state 97

    forall_sensing  ->  TK_OPEN . KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 optional_such_that sensing_decl_list TK_CLOSE   (rule 143)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE   (rule 144)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 145)
    sensing_model  ->  TK_OPEN . KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE   (rule 146)
    sensing_model  ->  TK_OPEN . KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 147)
    sensing_model  ->  TK_OPEN . KW_VARIABLE error TK_CLOSE   (rule 148)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR error TK_CLOSE   (rule 149)

    KW_FORALL	shift, and go to state 144
    KW_VARIABLE	shift, and go to state 145
    KW_MODEL_FOR	shift, and go to state 146



state 98

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING sensing . TK_CLOSE   (rule 196)

    TK_CLOSE	shift, and go to state 147



state 99

    sensing  ->  sensing_decl_list .   (rule 135)
    sensing_decl_list  ->  sensing_decl_list . sensing_decl   (rule 137)

    TK_OPEN	shift, and go to state 97

    $default	reduce using rule 135 (sensing)

    sensing_decl	go to state 148
    forall_sensing	go to state 101
    sensing_model	go to state 102



state 100

    sensing_decl_list  ->  sensing_decl .   (rule 138)

    $default	reduce using rule 138 (sensing_decl_list)



state 101

    sensing_decl  ->  forall_sensing .   (rule 140)

    $default	reduce using rule 140 (sensing_decl)



state 102

    sensing_decl  ->  sensing_model .   (rule 139)

    $default	reduce using rule 139 (sensing_decl)



state 103

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN . TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE   (rule 178)

    TK_NEW_SYMBOL	shift, and go to state 149



state 104

    simple_variable_decl  ->  TK_OPEN variable_type TK_NEW_SYMBOL . @15 fluent_list_decl TK_CLOSE   (rule 175)

    $default	reduce using rule 174 (@15)

    @15 	go to state 150



state 105

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @23 problem_elements . TK_CLOSE   (rule 198)
    problem_elements  ->  problem_elements . TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE   (rule 200)
    problem_elements  ->  problem_elements . domain_requires   (rule 201)
    problem_elements  ->  problem_elements . domain_constants   (rule 202)
    problem_elements  ->  problem_elements . initial_state   (rule 203)
    problem_elements  ->  problem_elements . hidden_state   (rule 204)
    problem_elements  ->  problem_elements . goal_spec   (rule 205)

    TK_OPEN	shift, and go to state 151
    TK_CLOSE	shift, and go to state 152

    domain_requires	go to state 153
    domain_constants	go to state 154
    initial_state	go to state 155
    hidden_state	go to state 156
    goal_spec	go to state 157



state 106

    domain_requires  ->  TK_OPEN KW_REQS error TK_CLOSE .   (rule 30)

    $default	reduce using rule 30 (domain_requires)



state 107

    domain_requires  ->  TK_OPEN KW_REQS require_list TK_CLOSE .   (rule 29)

    $default	reduce using rule 29 (domain_requires)



state 108

    require_list  ->  require_list TK_KEYWORD .   (rule 32)

    $default	reduce using rule 32 (require_list)



state 109

    require_list  ->  require_list KW_TRANSLATION .   (rule 31)

    $default	reduce using rule 31 (require_list)



state 110

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE .   (rule 59)

    $default	reduce using rule 59 (domain_constants)



state 111

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE .   (rule 61)

    $default	reduce using rule 61 (domain_constants)



state 112

    typed_constant_list  ->  constant_sym_list TK_HYPHEN . TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)

    TK_TYPE_SYMBOL	shift, and go to state 158



state 113

    constant_sym_list  ->  constant_sym_list TK_NEW_SYMBOL .   (rule 67)

    $default	reduce using rule 67 (constant_sym_list)



state 114

    domain_predicates  ->  TK_OPEN KW_PREDS error TK_CLOSE .   (rule 35)

    $default	reduce using rule 35 (domain_predicates)



state 115

    predicate_decl  ->  TK_OPEN error . TK_CLOSE   (rule 39)

    TK_CLOSE	shift, and go to state 159



state 116

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL . param_list TK_CLOSE   (rule 38)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 162
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 117

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list TK_CLOSE .   (rule 34)

    $default	reduce using rule 34 (domain_predicates)



state 118

    predicate_list  ->  predicate_list predicate_decl .   (rule 36)

    $default	reduce using rule 36 (predicate_list)



state 119

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list TK_CLOSE .   (rule 51)

    $default	reduce using rule 51 (domain_types)



state 120

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list TK_CLOSE .   (rule 50)

    $default	reduce using rule 50 (domain_types)



state 121

    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_NEW_SYMBOL typed_type_list   (rule 53)

    TK_NEW_SYMBOL	shift, and go to state 167
    TK_TYPE_SYMBOL	shift, and go to state 168



state 122

    primitive_type_list  ->  primitive_type_list primitive_type .   (rule 55)

    $default	reduce using rule 55 (primitive_type_list)



state 123

    action_decl  ->  TK_OPEN KW_ACTION error TK_CLOSE .   (rule 78)

    $default	reduce using rule 78 (action_decl)



state 124

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 . action_elements TK_CLOSE   (rule 77)

    $default	reduce using rule 84 (action_elements)

    action_elements	go to state 169



state 125

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE .   (rule 60)

    $default	reduce using rule 60 (domain_constants)



state 126

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE .   (rule 62)

    $default	reduce using rule 62 (domain_constants)



state 127

    sensor_decl  ->  TK_OPEN KW_SENSOR error TK_CLOSE .   (rule 159)

    $default	reduce using rule 159 (sensor_decl)



state 128

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 . sensor_elements TK_CLOSE   (rule 158)

    $default	reduce using rule 163 (sensor_elements)

    sensor_elements	go to state 170



state 129

    axiom_decl  ->  TK_OPEN KW_AXIOM error TK_CLOSE .   (rule 152)

    $default	reduce using rule 152 (axiom_decl)



state 130

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 . axiom_elements TK_CLOSE   (rule 151)

    $default	reduce using rule 156 (axiom_elements)

    axiom_elements	go to state 171



state 131

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error TK_CLOSE .   (rule 166)

    $default	reduce using rule 166 (observable_decl)



state 132

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_FORALL	shift, and go to state 174



state 133

    positive_atomic_effect  ->  positive_literal .   (rule 134)

    $default	reduce using rule 134 (positive_atomic_effect)



state 134

    fluent_decl  ->  forall_effect .   (rule 170)

    $default	reduce using rule 170 (fluent_decl)



state 135

    fluent_decl  ->  positive_atomic_effect .   (rule 169)

    $default	reduce using rule 169 (fluent_decl)



state 136

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 fluent_list_decl . TK_CLOSE   (rule 165)
    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 167)

    TK_OPEN	shift, and go to state 132
    TK_CLOSE	shift, and go to state 175

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_decl	go to state 176



state 137

    fluent_list_decl  ->  fluent_decl .   (rule 168)

    $default	reduce using rule 168 (fluent_list_decl)



state 138

    sticky_decl  ->  TK_OPEN KW_STICKY error TK_CLOSE .   (rule 173)

    $default	reduce using rule 173 (sticky_decl)



state 139

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 167)
    sticky_decl  ->  TK_OPEN KW_STICKY @14 fluent_list_decl . TK_CLOSE   (rule 172)

    TK_OPEN	shift, and go to state 132
    TK_CLOSE	shift, and go to state 177

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_decl	go to state 176



state 140

    simple_variable_decl  ->  TK_OPEN KW_VARIABLE error TK_CLOSE .   (rule 179)

    $default	reduce using rule 179 (simple_variable_decl)



state 141

    variable_group_decl  ->  TK_OPEN KW_VGROUP error TK_CLOSE .   (rule 187)

    $default	reduce using rule 187 (variable_group_decl)



state 142

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL . @19 param_list TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)

    $default	reduce using rule 184 (@19)

    @19 	go to state 178



state 143

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_NEW_SYMBOL @18 . state_variable_list_decl TK_CLOSE   (rule 183)

    $default	reduce using rule 190 (state_variable_list_decl)

    state_variable_list_decl	go to state 179



state 144

    forall_sensing  ->  TK_OPEN KW_FORALL . TK_OPEN @9 param_list TK_CLOSE @10 optional_such_that sensing_decl_list TK_CLOSE   (rule 143)

    TK_OPEN	shift, and go to state 180



state 145

    sensing_model  ->  TK_OPEN KW_VARIABLE . TK_VARNAME_SYMBOL TK_CLOSE   (rule 146)
    sensing_model  ->  TK_OPEN KW_VARIABLE . TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 147)
    sensing_model  ->  TK_OPEN KW_VARIABLE . error TK_CLOSE   (rule 148)

    error	shift, and go to state 181
    TK_OPEN	shift, and go to state 182
    TK_VARNAME_SYMBOL	shift, and go to state 183



state 146

    sensing_model  ->  TK_OPEN KW_MODEL_FOR . TK_VARNAME_SYMBOL literal condition TK_CLOSE   (rule 144)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR . TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 145)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR . error TK_CLOSE   (rule 149)

    error	shift, and go to state 184
    TK_OPEN	shift, and go to state 185
    TK_VARNAME_SYMBOL	shift, and go to state 186



state 147

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING sensing TK_CLOSE .   (rule 196)

    $default	reduce using rule 196 (domain_default_sensing)



state 148

    sensing_decl_list  ->  sensing_decl_list sensing_decl .   (rule 137)

    $default	reduce using rule 137 (sensing_decl_list)



state 149

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL . @16 param_list TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE   (rule 178)

    $default	reduce using rule 176 (@16)

    @16 	go to state 187



state 150

    simple_variable_decl  ->  TK_OPEN variable_type TK_NEW_SYMBOL @15 . fluent_list_decl TK_CLOSE   (rule 175)

    TK_OPEN	shift, and go to state 132

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_list_decl	go to state 188
    fluent_decl	go to state 137



state 151

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 30)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 62)
    problem_elements  ->  problem_elements TK_OPEN . KW_FORDOMAIN any_symbol TK_CLOSE   (rule 200)
    initial_state  ->  TK_OPEN . KW_INIT TK_CLOSE   (rule 207)
    initial_state  ->  TK_OPEN . KW_INIT init_elements TK_CLOSE   (rule 208)
    initial_state  ->  TK_OPEN . KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 209)
    hidden_state  ->  TK_OPEN . KW_HIDDEN init_elements TK_CLOSE   (rule 227)
    hidden_state  ->  TK_OPEN . KW_HIDDEN TK_CLOSE   (rule 228)
    goal_spec  ->  TK_OPEN . KW_GOAL condition TK_CLOSE   (rule 229)

    KW_REQS	shift, and go to state 44
    KW_CONSTANTS	shift, and go to state 45
    KW_FORDOMAIN	shift, and go to state 189
    KW_OBJECTS	shift, and go to state 49
    KW_INIT	shift, and go to state 190
    KW_GOAL	shift, and go to state 191
    KW_HIDDEN	shift, and go to state 192



state 152

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @23 problem_elements TK_CLOSE .   (rule 198)

    $default	reduce using rule 198 (pddl_problem)



state 153

    problem_elements  ->  problem_elements domain_requires .   (rule 201)

    $default	reduce using rule 201 (problem_elements)



state 154

    problem_elements  ->  problem_elements domain_constants .   (rule 202)

    $default	reduce using rule 202 (problem_elements)



state 155

    problem_elements  ->  problem_elements initial_state .   (rule 203)

    $default	reduce using rule 203 (problem_elements)



state 156

    problem_elements  ->  problem_elements hidden_state .   (rule 204)

    $default	reduce using rule 204 (problem_elements)



state 157

    problem_elements  ->  problem_elements goal_spec .   (rule 205)

    $default	reduce using rule 205 (problem_elements)



state 158

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL . @1 typed_constant_list   (rule 64)

    $default	reduce using rule 63 (@1)

    @1  	go to state 193



state 159

    predicate_decl  ->  TK_OPEN error TK_CLOSE .   (rule 39)

    $default	reduce using rule 39 (predicate_decl)



state 160

    new_var_symbol  ->  TK_VAR_SYMBOL .   (rule 49)

    $default	reduce using rule 49 (new_var_symbol)



state 161

    new_var_symbol  ->  TK_NEW_VAR_SYMBOL .   (rule 48)

    $default	reduce using rule 48 (new_var_symbol)



state 162

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list . TK_CLOSE   (rule 38)

    TK_CLOSE	shift, and go to state 194



state 163

    param_list  ->  untyped_param_list .   (rule 40)

    $default	reduce using rule 40 (param_list)



state 164

    param_list  ->  typed_param_list .   (rule 41)

    $default	reduce using rule 41 (param_list)



state 165

    untyped_param_list  ->  param_sym_list .   (rule 43)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 45)

    TK_HYPHEN	shift, and go to state 195

    $default	reduce using rule 43 (untyped_param_list)



state 166

    param_sym_list  ->  new_var_symbol . param_sym_list   (rule 46)
    param_sym_list  ->  new_var_symbol .   (rule 47)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 47 (param_sym_list)

    param_sym_list	go to state 196
    new_var_symbol	go to state 166



state 167

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL . typed_type_list   (rule 53)

    TK_NEW_SYMBOL	shift, and go to state 70
    TK_TYPE_SYMBOL	shift, and go to state 71

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 197
    primitive_type_list	go to state 198
    primitive_type	go to state 74



state 168

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL . typed_type_list   (rule 52)

    TK_NEW_SYMBOL	shift, and go to state 70
    TK_TYPE_SYMBOL	shift, and go to state 71

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 199
    primitive_type_list	go to state 198
    primitive_type	go to state 74



state 169

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements . TK_CLOSE   (rule 77)
    action_elements  ->  action_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 79)
    action_elements  ->  action_elements . KW_PRE condition   (rule 80)
    action_elements  ->  action_elements . KW_EFFECT action_effect   (rule 81)
    action_elements  ->  action_elements . KW_OBSERVE positive_atomic_effect_list   (rule 82)
    action_elements  ->  action_elements . KW_SENSING sensing   (rule 83)

    TK_CLOSE	shift, and go to state 200
    KW_ARGS	shift, and go to state 201
    KW_PRE	shift, and go to state 202
    KW_EFFECT	shift, and go to state 203
    KW_OBSERVE	shift, and go to state 204
    KW_SENSING	shift, and go to state 205



state 170

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements . TK_CLOSE   (rule 158)
    sensor_elements  ->  sensor_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 160)
    sensor_elements  ->  sensor_elements . KW_COND condition   (rule 161)
    sensor_elements  ->  sensor_elements . KW_SENSE positive_atomic_effect_list   (rule 162)

    TK_CLOSE	shift, and go to state 206
    KW_ARGS	shift, and go to state 207
    KW_SENSE	shift, and go to state 208
    KW_COND	shift, and go to state 209



state 171

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements . TK_CLOSE   (rule 151)
    axiom_elements  ->  axiom_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 153)
    axiom_elements  ->  axiom_elements . KW_BODY condition   (rule 154)
    axiom_elements  ->  axiom_elements . KW_HEAD atomic_effect_kw_list   (rule 155)

    TK_CLOSE	shift, and go to state 210
    KW_ARGS	shift, and go to state 211
    KW_BODY	shift, and go to state 212
    KW_HEAD	shift, and go to state 213



state 172

    positive_literal  ->  TK_OPEN TK_EQ . argument_list TK_CLOSE   (rule 97)

    $default	reduce using rule 101 (argument_list)

    argument_list	go to state 214



state 173

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL . argument_list TK_CLOSE   (rule 96)

    $default	reduce using rule 101 (argument_list)

    argument_list	go to state 215



state 174

    forall_effect  ->  TK_OPEN KW_FORALL . TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    TK_OPEN	shift, and go to state 216



state 175

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE .   (rule 165)

    $default	reduce using rule 165 (observable_decl)



state 176

    fluent_list_decl  ->  fluent_list_decl fluent_decl .   (rule 167)

    $default	reduce using rule 167 (fluent_list_decl)



state 177

    sticky_decl  ->  TK_OPEN KW_STICKY @14 fluent_list_decl TK_CLOSE .   (rule 172)

    $default	reduce using rule 172 (sticky_decl)



state 178

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 . param_list TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 217
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 179

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_NEW_SYMBOL @18 state_variable_list_decl . TK_CLOSE   (rule 183)
    state_variable_list_decl  ->  state_variable_list_decl . state_variable   (rule 188)
    state_variable_list_decl  ->  state_variable_list_decl . forall_state_variable_list_decl   (rule 189)

    TK_OPEN	shift, and go to state 218
    TK_CLOSE	shift, and go to state 219
    TK_VARNAME_SYMBOL	shift, and go to state 220

    state_variable	go to state 221
    forall_state_variable_list_decl	go to state 222



state 180

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN . @9 param_list TK_CLOSE @10 optional_such_that sensing_decl_list TK_CLOSE   (rule 143)

    $default	reduce using rule 141 (@9)

    @9  	go to state 223



state 181

    sensing_model  ->  TK_OPEN KW_VARIABLE error . TK_CLOSE   (rule 148)

    TK_CLOSE	shift, and go to state 224



state 182

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN . TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 147)

    TK_VARNAME_SYMBOL	shift, and go to state 225



state 183

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL . TK_CLOSE   (rule 146)

    TK_CLOSE	shift, and go to state 226



state 184

    sensing_model  ->  TK_OPEN KW_MODEL_FOR error . TK_CLOSE   (rule 149)

    TK_CLOSE	shift, and go to state 227



state 185

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN . TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 145)

    TK_VARNAME_SYMBOL	shift, and go to state 228



state 186

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL . literal condition TK_CLOSE   (rule 144)

    TK_OPEN	shift, and go to state 229

    literal	go to state 230
    positive_literal	go to state 231
    negative_literal	go to state 232



state 187

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 . param_list TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE   (rule 178)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 233
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 188

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 167)
    simple_variable_decl  ->  TK_OPEN variable_type TK_NEW_SYMBOL @15 fluent_list_decl . TK_CLOSE   (rule 175)

    TK_OPEN	shift, and go to state 132
    TK_CLOSE	shift, and go to state 234

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_decl	go to state 176



state 189

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN . any_symbol TK_CLOSE   (rule 200)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 235



state 190

    initial_state  ->  TK_OPEN KW_INIT . TK_CLOSE   (rule 207)
    initial_state  ->  TK_OPEN KW_INIT . init_elements TK_CLOSE   (rule 208)
    initial_state  ->  TK_OPEN KW_INIT . TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 209)

    TK_OPEN	shift, and go to state 236
    TK_CLOSE	shift, and go to state 237

    literal	go to state 238
    positive_literal	go to state 231
    negative_literal	go to state 232
    init_elements	go to state 239
    single_init_element	go to state 240
    at_least_one_invariant	go to state 241
    at_most_one_invariant	go to state 242
    exactly_one_invariant	go to state 243
    invariant	go to state 244
    clause	go to state 245
    oneof	go to state 246
    unknown	go to state 247



state 191

    goal_spec  ->  TK_OPEN KW_GOAL . condition TK_CLOSE   (rule 229)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 251
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 192

    hidden_state  ->  TK_OPEN KW_HIDDEN . init_elements TK_CLOSE   (rule 227)
    hidden_state  ->  TK_OPEN KW_HIDDEN . TK_CLOSE   (rule 228)

    TK_OPEN	shift, and go to state 259
    TK_CLOSE	shift, and go to state 260

    literal	go to state 238
    positive_literal	go to state 231
    negative_literal	go to state 232
    init_elements	go to state 261
    single_init_element	go to state 240
    at_least_one_invariant	go to state 241
    at_most_one_invariant	go to state 242
    exactly_one_invariant	go to state 243
    invariant	go to state 244
    clause	go to state 245
    oneof	go to state 246
    unknown	go to state 247



state 193

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 . typed_constant_list   (rule 64)

    TK_NEW_SYMBOL	shift, and go to state 62

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 262
    constant_sym_list	go to state 263



state 194

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE .   (rule 38)

    $default	reduce using rule 38 (predicate_decl)



state 195

    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL   (rule 45)

    TK_TYPE_SYMBOL	shift, and go to state 264



state 196

    param_sym_list  ->  new_var_symbol param_sym_list .   (rule 46)

    $default	reduce using rule 46 (param_sym_list)



state 197

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list .   (rule 53)

    $default	reduce using rule 53 (typed_type_list)



state 198

    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 53)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 55)

    TK_HYPHEN	shift, and go to state 121
    TK_NEW_SYMBOL	shift, and go to state 70
    TK_TYPE_SYMBOL	shift, and go to state 71

    primitive_type	go to state 122



state 199

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list .   (rule 52)

    $default	reduce using rule 52 (typed_type_list)



state 200

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE .   (rule 77)

    $default	reduce using rule 77 (action_decl)



state 201

    action_elements  ->  action_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 79)

    TK_OPEN	shift, and go to state 265



state 202

    action_elements  ->  action_elements KW_PRE . condition   (rule 80)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 266
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 203

    action_elements  ->  action_elements KW_EFFECT . action_effect   (rule 81)

    TK_OPEN	shift, and go to state 267

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    action_effect	go to state 269
    single_action_effect	go to state 270
    conditional_effect	go to state 271
    forall_effect	go to state 272
    atomic_effect	go to state 273



state 204

    action_elements  ->  action_elements KW_OBSERVE . positive_atomic_effect_list   (rule 82)

    TK_OPEN	shift, and go to state 274

    positive_literal	go to state 133
    positive_atomic_effect_list	go to state 275
    positive_atomic_effect	go to state 276



state 205

    action_elements  ->  action_elements KW_SENSING . sensing   (rule 83)

    TK_OPEN	shift, and go to state 97

    $default	reduce using rule 136 (sensing)

    sensing	go to state 277
    sensing_decl_list	go to state 99
    sensing_decl	go to state 100
    forall_sensing	go to state 101
    sensing_model	go to state 102



state 206

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE .   (rule 158)

    $default	reduce using rule 158 (sensor_decl)



state 207

    sensor_elements  ->  sensor_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 160)

    TK_OPEN	shift, and go to state 278



state 208

    sensor_elements  ->  sensor_elements KW_SENSE . positive_atomic_effect_list   (rule 162)

    TK_OPEN	shift, and go to state 274

    positive_literal	go to state 133
    positive_atomic_effect_list	go to state 279
    positive_atomic_effect	go to state 276



state 209

    sensor_elements  ->  sensor_elements KW_COND . condition   (rule 161)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 280
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 210

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE .   (rule 151)

    $default	reduce using rule 151 (axiom_decl)



state 211

    axiom_elements  ->  axiom_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 153)

    TK_OPEN	shift, and go to state 281



state 212

    axiom_elements  ->  axiom_elements KW_BODY . condition   (rule 154)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 282
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 213

    axiom_elements  ->  axiom_elements KW_HEAD . atomic_effect_kw_list   (rule 155)

    TK_OPEN	shift, and go to state 283

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    atomic_effect_kw_list	go to state 284
    atomic_effect	go to state 285



state 214

    positive_literal  ->  TK_OPEN TK_EQ argument_list . TK_CLOSE   (rule 97)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 99)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 100)

    TK_CLOSE	shift, and go to state 286
    TK_OBJ_SYMBOL	shift, and go to state 287
    TK_VAR_SYMBOL	shift, and go to state 288



state 215

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list . TK_CLOSE   (rule 96)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 99)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 100)

    TK_CLOSE	shift, and go to state 289
    TK_OBJ_SYMBOL	shift, and go to state 287
    TK_VAR_SYMBOL	shift, and go to state 288



state 216

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN . @7 param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    $default	reduce using rule 122 (@7)

    @7  	go to state 290



state 217

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list . TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)

    TK_CLOSE	shift, and go to state 291



state 218

    state_variable  ->  TK_OPEN . TK_VARNAME_SYMBOL argument_list TK_CLOSE   (rule 192)
    forall_state_variable_list_decl  ->  TK_OPEN . KW_FORALL TK_OPEN @21 param_list TK_CLOSE @22 optional_such_that state_variable_list_decl TK_CLOSE   (rule 195)

    TK_VARNAME_SYMBOL	shift, and go to state 292
    KW_FORALL	shift, and go to state 293



state 219

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_NEW_SYMBOL @18 state_variable_list_decl TK_CLOSE .   (rule 183)

    $default	reduce using rule 183 (variable_group_decl)



state 220

    state_variable  ->  TK_VARNAME_SYMBOL .   (rule 191)

    $default	reduce using rule 191 (state_variable)



state 221

    state_variable_list_decl  ->  state_variable_list_decl state_variable .   (rule 188)

    $default	reduce using rule 188 (state_variable_list_decl)



state 222

    state_variable_list_decl  ->  state_variable_list_decl forall_state_variable_list_decl .   (rule 189)

    $default	reduce using rule 189 (state_variable_list_decl)



state 223

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 . param_list TK_CLOSE @10 optional_such_that sensing_decl_list TK_CLOSE   (rule 143)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 294
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 224

    sensing_model  ->  TK_OPEN KW_VARIABLE error TK_CLOSE .   (rule 148)

    $default	reduce using rule 148 (sensing_model)



state 225

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL . argument_list TK_CLOSE TK_CLOSE   (rule 147)

    $default	reduce using rule 101 (argument_list)

    argument_list	go to state 295



state 226

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE .   (rule 146)

    $default	reduce using rule 146 (sensing_model)



state 227

    sensing_model  ->  TK_OPEN KW_MODEL_FOR error TK_CLOSE .   (rule 149)

    $default	reduce using rule 149 (sensing_model)



state 228

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL . argument_list TK_CLOSE literal condition TK_CLOSE   (rule 145)

    $default	reduce using rule 101 (argument_list)

    argument_list	go to state 296



state 229

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 98)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_NOT	shift, and go to state 297



state 230

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal . condition TK_CLOSE   (rule 144)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 298
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 231

    literal  ->  positive_literal .   (rule 94)

    $default	reduce using rule 94 (literal)



state 232

    literal  ->  negative_literal .   (rule 95)

    $default	reduce using rule 95 (literal)



state 233

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list . TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE   (rule 178)

    TK_CLOSE	shift, and go to state 299



state 234

    simple_variable_decl  ->  TK_OPEN variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE .   (rule 175)

    $default	reduce using rule 175 (simple_variable_decl)



state 235

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol . TK_CLOSE   (rule 200)

    TK_CLOSE	shift, and go to state 300



state 236

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 98)
    initial_state  ->  TK_OPEN KW_INIT TK_OPEN . KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 209)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT single_condition_list TK_CLOSE   (rule 217)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE single_condition_list TK_CLOSE   (rule 218)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE single_condition_list TK_CLOSE   (rule 219)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE single_condition_list TK_CLOSE   (rule 220)
    clause  ->  TK_OPEN . KW_OR single_condition_list TK_CLOSE   (rule 224)
    oneof  ->  TK_OPEN . KW_ONEOF single_condition_list TK_CLOSE   (rule 225)
    unknown  ->  TK_OPEN . KW_UNKNOWN positive_literal TK_CLOSE   (rule 226)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_AND	shift, and go to state 301
    KW_OR	shift, and go to state 302
    KW_NOT	shift, and go to state 297
    KW_ONEOF	shift, and go to state 303
    KW_UNKNOWN	shift, and go to state 304
    KW_INVARIANT	shift, and go to state 305
    KW_AT_LEAST_ONE	shift, and go to state 306
    KW_AT_MOST_ONE	shift, and go to state 307
    KW_EXACTLY_ONE	shift, and go to state 308



state 237

    initial_state  ->  TK_OPEN KW_INIT TK_CLOSE .   (rule 207)

    $default	reduce using rule 207 (initial_state)



state 238

    single_init_element  ->  literal .   (rule 212)

    $default	reduce using rule 212 (single_init_element)



state 239

    initial_state  ->  TK_OPEN KW_INIT init_elements . TK_CLOSE   (rule 208)
    init_elements  ->  init_elements . single_init_element   (rule 210)

    TK_OPEN	shift, and go to state 259
    TK_CLOSE	shift, and go to state 309

    literal	go to state 238
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_init_element	go to state 310
    at_least_one_invariant	go to state 241
    at_most_one_invariant	go to state 242
    exactly_one_invariant	go to state 243
    invariant	go to state 244
    clause	go to state 245
    oneof	go to state 246
    unknown	go to state 247



state 240

    init_elements  ->  single_init_element .   (rule 211)

    $default	reduce using rule 211 (init_elements)



state 241

    invariant  ->  at_least_one_invariant .   (rule 221)

    $default	reduce using rule 221 (invariant)



state 242

    invariant  ->  at_most_one_invariant .   (rule 222)

    $default	reduce using rule 222 (invariant)



state 243

    invariant  ->  exactly_one_invariant .   (rule 223)

    $default	reduce using rule 223 (invariant)



state 244

    single_init_element  ->  invariant .   (rule 213)

    $default	reduce using rule 213 (single_init_element)



state 245

    single_init_element  ->  clause .   (rule 214)

    $default	reduce using rule 214 (single_init_element)



state 246

    single_init_element  ->  oneof .   (rule 215)

    $default	reduce using rule 215 (single_init_element)



state 247

    single_init_element  ->  unknown .   (rule 216)

    $default	reduce using rule 216 (single_init_element)



state 248

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 98)
    and_condition  ->  TK_OPEN . KW_AND condition_list TK_CLOSE   (rule 102)
    or_condition  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 103)
    forall_condition  ->  TK_OPEN . KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 106)
    exists_condition  ->  TK_OPEN . KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 109)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_AND	shift, and go to state 311
    KW_OR	shift, and go to state 312
    KW_EXISTS	shift, and go to state 313
    KW_FORALL	shift, and go to state 314
    KW_NOT	shift, and go to state 297



state 249

    constant_condition  ->  KW_TRUE .   (rule 91)

    $default	reduce using rule 91 (constant_condition)



state 250

    constant_condition  ->  KW_FALSE .   (rule 92)

    $default	reduce using rule 92 (constant_condition)



state 251

    goal_spec  ->  TK_OPEN KW_GOAL condition . TK_CLOSE   (rule 229)

    TK_CLOSE	shift, and go to state 315



state 252

    condition  ->  constant_condition .   (rule 85)

    $default	reduce using rule 85 (condition)



state 253

    condition  ->  single_condition .   (rule 86)

    $default	reduce using rule 86 (condition)



state 254

    single_condition  ->  literal .   (rule 93)

    $default	reduce using rule 93 (single_condition)



state 255

    condition  ->  and_condition .   (rule 87)

    $default	reduce using rule 87 (condition)



state 256

    condition  ->  or_condition .   (rule 88)

    $default	reduce using rule 88 (condition)



state 257

    condition  ->  forall_condition .   (rule 89)

    $default	reduce using rule 89 (condition)



state 258

    condition  ->  exists_condition .   (rule 90)

    $default	reduce using rule 90 (condition)



state 259

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 98)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT single_condition_list TK_CLOSE   (rule 217)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE single_condition_list TK_CLOSE   (rule 218)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE single_condition_list TK_CLOSE   (rule 219)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE single_condition_list TK_CLOSE   (rule 220)
    clause  ->  TK_OPEN . KW_OR single_condition_list TK_CLOSE   (rule 224)
    oneof  ->  TK_OPEN . KW_ONEOF single_condition_list TK_CLOSE   (rule 225)
    unknown  ->  TK_OPEN . KW_UNKNOWN positive_literal TK_CLOSE   (rule 226)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_OR	shift, and go to state 302
    KW_NOT	shift, and go to state 297
    KW_ONEOF	shift, and go to state 303
    KW_UNKNOWN	shift, and go to state 304
    KW_INVARIANT	shift, and go to state 305
    KW_AT_LEAST_ONE	shift, and go to state 306
    KW_AT_MOST_ONE	shift, and go to state 307
    KW_EXACTLY_ONE	shift, and go to state 308



state 260

    hidden_state  ->  TK_OPEN KW_HIDDEN TK_CLOSE .   (rule 228)

    $default	reduce using rule 228 (hidden_state)



state 261

    init_elements  ->  init_elements . single_init_element   (rule 210)
    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements . TK_CLOSE   (rule 227)

    TK_OPEN	shift, and go to state 259
    TK_CLOSE	shift, and go to state 316

    literal	go to state 238
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_init_element	go to state 310
    at_least_one_invariant	go to state 241
    at_most_one_invariant	go to state 242
    exactly_one_invariant	go to state 243
    invariant	go to state 244
    clause	go to state 245
    oneof	go to state 246
    unknown	go to state 247



state 262

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list .   (rule 64)

    $default	reduce using rule 64 (typed_constant_list)



state 263

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 67)

    TK_HYPHEN	shift, and go to state 112
    TK_NEW_SYMBOL	shift, and go to state 113



state 264

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL . typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL .   (rule 45)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 45 (typed_param_list)

    typed_param_list	go to state 317
    param_sym_list	go to state 318
    new_var_symbol	go to state 166



state 265

    action_elements  ->  action_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 79)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 319
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 266

    action_elements  ->  action_elements KW_PRE condition .   (rule 80)

    $default	reduce using rule 80 (action_elements)



state 267

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 98)
    action_effect  ->  TK_OPEN . KW_AND action_effect_list TK_CLOSE   (rule 115)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 121)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_AND	shift, and go to state 320
    KW_FORALL	shift, and go to state 174
    KW_NOT	shift, and go to state 297
    KW_WHEN	shift, and go to state 321



state 268

    atomic_effect  ->  literal .   (rule 133)

    $default	reduce using rule 133 (atomic_effect)



state 269

    action_elements  ->  action_elements KW_EFFECT action_effect .   (rule 81)

    $default	reduce using rule 81 (action_elements)



state 270

    action_effect  ->  single_action_effect .   (rule 114)

    $default	reduce using rule 114 (action_effect)



state 271

    single_action_effect  ->  conditional_effect .   (rule 119)

    $default	reduce using rule 119 (single_action_effect)



state 272

    single_action_effect  ->  forall_effect .   (rule 120)

    $default	reduce using rule 120 (single_action_effect)



state 273

    single_action_effect  ->  atomic_effect .   (rule 118)

    $default	reduce using rule 118 (single_action_effect)



state 274

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173



state 275

    action_elements  ->  action_elements KW_OBSERVE positive_atomic_effect_list .   (rule 82)
    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 131)

    TK_OPEN	shift, and go to state 274

    $default	reduce using rule 82 (action_elements)

    positive_literal	go to state 133
    positive_atomic_effect	go to state 322



state 276

    positive_atomic_effect_list  ->  positive_atomic_effect .   (rule 132)

    $default	reduce using rule 132 (positive_atomic_effect_list)



state 277

    action_elements  ->  action_elements KW_SENSING sensing .   (rule 83)

    $default	reduce using rule 83 (action_elements)



state 278

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 160)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 323
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 279

    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 131)
    sensor_elements  ->  sensor_elements KW_SENSE positive_atomic_effect_list .   (rule 162)

    TK_OPEN	shift, and go to state 274

    $default	reduce using rule 162 (sensor_elements)

    positive_literal	go to state 133
    positive_atomic_effect	go to state 322



state 280

    sensor_elements  ->  sensor_elements KW_COND condition .   (rule 161)

    $default	reduce using rule 161 (sensor_elements)



state 281

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 153)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 324
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 282

    axiom_elements  ->  axiom_elements KW_BODY condition .   (rule 154)

    $default	reduce using rule 154 (axiom_elements)



state 283

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 98)
    atomic_effect_kw_list  ->  TK_OPEN . KW_AND atomic_effect_list TK_CLOSE   (rule 127)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_AND	shift, and go to state 325
    KW_NOT	shift, and go to state 297



state 284

    axiom_elements  ->  axiom_elements KW_HEAD atomic_effect_kw_list .   (rule 155)

    $default	reduce using rule 155 (axiom_elements)



state 285

    atomic_effect_kw_list  ->  atomic_effect .   (rule 128)

    $default	reduce using rule 128 (atomic_effect_kw_list)



state 286

    positive_literal  ->  TK_OPEN TK_EQ argument_list TK_CLOSE .   (rule 97)

    $default	reduce using rule 97 (positive_literal)



state 287

    argument_list  ->  argument_list TK_OBJ_SYMBOL .   (rule 100)

    $default	reduce using rule 100 (argument_list)



state 288

    argument_list  ->  argument_list TK_VAR_SYMBOL .   (rule 99)

    $default	reduce using rule 99 (argument_list)



state 289

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE .   (rule 96)

    $default	reduce using rule 96 (positive_literal)



state 290

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 . param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 326
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 291

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE . @20 optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)

    $default	reduce using rule 185 (@20)

    @20 	go to state 327



state 292

    state_variable  ->  TK_OPEN TK_VARNAME_SYMBOL . argument_list TK_CLOSE   (rule 192)

    $default	reduce using rule 101 (argument_list)

    argument_list	go to state 328



state 293

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL . TK_OPEN @21 param_list TK_CLOSE @22 optional_such_that state_variable_list_decl TK_CLOSE   (rule 195)

    TK_OPEN	shift, and go to state 329



state 294

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list . TK_CLOSE @10 optional_such_that sensing_decl_list TK_CLOSE   (rule 143)

    TK_CLOSE	shift, and go to state 330



state 295

    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 99)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 100)
    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list . TK_CLOSE TK_CLOSE   (rule 147)

    TK_CLOSE	shift, and go to state 331
    TK_OBJ_SYMBOL	shift, and go to state 287
    TK_VAR_SYMBOL	shift, and go to state 288



state 296

    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 99)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 100)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list . TK_CLOSE literal condition TK_CLOSE   (rule 145)

    TK_CLOSE	shift, and go to state 332
    TK_OBJ_SYMBOL	shift, and go to state 287
    TK_VAR_SYMBOL	shift, and go to state 288



state 297

    negative_literal  ->  TK_OPEN KW_NOT . positive_literal TK_CLOSE   (rule 98)

    TK_OPEN	shift, and go to state 274

    positive_literal	go to state 333



state 298

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition . TK_CLOSE   (rule 144)

    TK_CLOSE	shift, and go to state 334



state 299

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE . @17 optional_such_that fluent_list_decl TK_CLOSE   (rule 178)

    $default	reduce using rule 177 (@17)

    @17 	go to state 335



state 300

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE .   (rule 200)

    $default	reduce using rule 200 (problem_elements)



state 301

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND . init_elements TK_CLOSE TK_CLOSE   (rule 209)

    TK_OPEN	shift, and go to state 259

    literal	go to state 238
    positive_literal	go to state 231
    negative_literal	go to state 232
    init_elements	go to state 336
    single_init_element	go to state 240
    at_least_one_invariant	go to state 241
    at_most_one_invariant	go to state 242
    exactly_one_invariant	go to state 243
    invariant	go to state 244
    clause	go to state 245
    oneof	go to state 246
    unknown	go to state 247



state 302

    clause  ->  TK_OPEN KW_OR . single_condition_list TK_CLOSE   (rule 224)

    TK_OPEN	shift, and go to state 229

    single_condition	go to state 337
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_condition_list	go to state 338



state 303

    oneof  ->  TK_OPEN KW_ONEOF . single_condition_list TK_CLOSE   (rule 225)

    TK_OPEN	shift, and go to state 229

    single_condition	go to state 337
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_condition_list	go to state 339



state 304

    unknown  ->  TK_OPEN KW_UNKNOWN . positive_literal TK_CLOSE   (rule 226)

    TK_OPEN	shift, and go to state 274

    positive_literal	go to state 340



state 305

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT . single_condition_list TK_CLOSE   (rule 217)

    TK_OPEN	shift, and go to state 229

    single_condition	go to state 337
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_condition_list	go to state 341



state 306

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE . single_condition_list TK_CLOSE   (rule 218)

    TK_OPEN	shift, and go to state 229

    single_condition	go to state 337
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_condition_list	go to state 342



state 307

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE . single_condition_list TK_CLOSE   (rule 219)

    TK_OPEN	shift, and go to state 229

    single_condition	go to state 337
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_condition_list	go to state 343



state 308

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE . single_condition_list TK_CLOSE   (rule 220)

    TK_OPEN	shift, and go to state 229

    single_condition	go to state 337
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_condition_list	go to state 344



state 309

    initial_state  ->  TK_OPEN KW_INIT init_elements TK_CLOSE .   (rule 208)

    $default	reduce using rule 208 (initial_state)



state 310

    init_elements  ->  init_elements single_init_element .   (rule 210)

    $default	reduce using rule 210 (init_elements)



state 311

    and_condition  ->  TK_OPEN KW_AND . condition_list TK_CLOSE   (rule 102)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 345
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258
    condition_list	go to state 346



state 312

    or_condition  ->  TK_OPEN KW_OR . condition_list TK_CLOSE   (rule 103)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 345
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258
    condition_list	go to state 347



state 313

    exists_condition  ->  TK_OPEN KW_EXISTS . TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 109)

    TK_OPEN	shift, and go to state 348



state 314

    forall_condition  ->  TK_OPEN KW_FORALL . TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 106)

    TK_OPEN	shift, and go to state 349



state 315

    goal_spec  ->  TK_OPEN KW_GOAL condition TK_CLOSE .   (rule 229)

    $default	reduce using rule 229 (goal_spec)



state 316

    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements TK_CLOSE .   (rule 227)

    $default	reduce using rule 227 (hidden_state)



state 317

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list .   (rule 44)

    $default	reduce using rule 44 (typed_param_list)



state 318

    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 45)

    TK_HYPHEN	shift, and go to state 195



state 319

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 79)

    TK_CLOSE	shift, and go to state 350



state 320

    action_effect  ->  TK_OPEN KW_AND . action_effect_list TK_CLOSE   (rule 115)

    TK_OPEN	shift, and go to state 351

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    action_effect_list	go to state 352
    single_action_effect	go to state 353
    conditional_effect	go to state 271
    forall_effect	go to state 272
    atomic_effect	go to state 273



state 321

    conditional_effect  ->  TK_OPEN KW_WHEN . condition atomic_effect_kw_list TK_CLOSE   (rule 121)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 354
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 322

    positive_atomic_effect_list  ->  positive_atomic_effect_list positive_atomic_effect .   (rule 131)

    $default	reduce using rule 131 (positive_atomic_effect_list)



state 323

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 160)

    TK_CLOSE	shift, and go to state 355



state 324

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 153)

    TK_CLOSE	shift, and go to state 356



state 325

    atomic_effect_kw_list  ->  TK_OPEN KW_AND . atomic_effect_list TK_CLOSE   (rule 127)

    TK_OPEN	shift, and go to state 229

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    atomic_effect_list	go to state 357
    atomic_effect	go to state 358



state 326

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list . TK_CLOSE @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    TK_CLOSE	shift, and go to state 359



state 327

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 . optional_such_that state_variable_list_decl TK_CLOSE   (rule 186)

    KW_SUCH_THAT	shift, and go to state 360

    $default	reduce using rule 126 (optional_such_that)

    optional_such_that	go to state 361



state 328

    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 99)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 100)
    state_variable  ->  TK_OPEN TK_VARNAME_SYMBOL argument_list . TK_CLOSE   (rule 192)

    TK_CLOSE	shift, and go to state 362
    TK_OBJ_SYMBOL	shift, and go to state 287
    TK_VAR_SYMBOL	shift, and go to state 288



state 329

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN . @21 param_list TK_CLOSE @22 optional_such_that state_variable_list_decl TK_CLOSE   (rule 195)

    $default	reduce using rule 193 (@21)

    @21 	go to state 363



state 330

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE . @10 optional_such_that sensing_decl_list TK_CLOSE   (rule 143)

    $default	reduce using rule 142 (@10)

    @10 	go to state 364



state 331

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE . TK_CLOSE   (rule 147)

    TK_CLOSE	shift, and go to state 365



state 332

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE . literal condition TK_CLOSE   (rule 145)

    TK_OPEN	shift, and go to state 229

    literal	go to state 366
    positive_literal	go to state 231
    negative_literal	go to state 232



state 333

    negative_literal  ->  TK_OPEN KW_NOT positive_literal . TK_CLOSE   (rule 98)

    TK_CLOSE	shift, and go to state 367



state 334

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE .   (rule 144)

    $default	reduce using rule 144 (sensing_model)



state 335

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 . optional_such_that fluent_list_decl TK_CLOSE   (rule 178)

    KW_SUCH_THAT	shift, and go to state 360

    $default	reduce using rule 126 (optional_such_that)

    optional_such_that	go to state 368



state 336

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements . TK_CLOSE TK_CLOSE   (rule 209)
    init_elements  ->  init_elements . single_init_element   (rule 210)

    TK_OPEN	shift, and go to state 259
    TK_CLOSE	shift, and go to state 369

    literal	go to state 238
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_init_element	go to state 310
    at_least_one_invariant	go to state 241
    at_most_one_invariant	go to state 242
    exactly_one_invariant	go to state 243
    invariant	go to state 244
    clause	go to state 245
    oneof	go to state 246
    unknown	go to state 247



state 337

    single_condition_list  ->  single_condition .   (rule 111)

    $default	reduce using rule 111 (single_condition_list)



state 338

    single_condition_list  ->  single_condition_list . single_condition   (rule 110)
    clause  ->  TK_OPEN KW_OR single_condition_list . TK_CLOSE   (rule 224)

    TK_OPEN	shift, and go to state 229
    TK_CLOSE	shift, and go to state 370

    single_condition	go to state 371
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232



state 339

    single_condition_list  ->  single_condition_list . single_condition   (rule 110)
    oneof  ->  TK_OPEN KW_ONEOF single_condition_list . TK_CLOSE   (rule 225)

    TK_OPEN	shift, and go to state 229
    TK_CLOSE	shift, and go to state 372

    single_condition	go to state 371
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232



state 340

    unknown  ->  TK_OPEN KW_UNKNOWN positive_literal . TK_CLOSE   (rule 226)

    TK_CLOSE	shift, and go to state 373



state 341

    single_condition_list  ->  single_condition_list . single_condition   (rule 110)
    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT single_condition_list . TK_CLOSE   (rule 217)

    TK_OPEN	shift, and go to state 229
    TK_CLOSE	shift, and go to state 374

    single_condition	go to state 371
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232



state 342

    single_condition_list  ->  single_condition_list . single_condition   (rule 110)
    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE single_condition_list . TK_CLOSE   (rule 218)

    TK_OPEN	shift, and go to state 229
    TK_CLOSE	shift, and go to state 375

    single_condition	go to state 371
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232



state 343

    single_condition_list  ->  single_condition_list . single_condition   (rule 110)
    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE single_condition_list . TK_CLOSE   (rule 219)

    TK_OPEN	shift, and go to state 229
    TK_CLOSE	shift, and go to state 376

    single_condition	go to state 371
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232



state 344

    single_condition_list  ->  single_condition_list . single_condition   (rule 110)
    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE single_condition_list . TK_CLOSE   (rule 220)

    TK_OPEN	shift, and go to state 229
    TK_CLOSE	shift, and go to state 377

    single_condition	go to state 371
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232



state 345

    condition_list  ->  condition .   (rule 113)

    $default	reduce using rule 113 (condition_list)



state 346

    and_condition  ->  TK_OPEN KW_AND condition_list . TK_CLOSE   (rule 102)
    condition_list  ->  condition_list . condition   (rule 112)

    TK_OPEN	shift, and go to state 248
    TK_CLOSE	shift, and go to state 378
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 379
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 347

    or_condition  ->  TK_OPEN KW_OR condition_list . TK_CLOSE   (rule 103)
    condition_list  ->  condition_list . condition   (rule 112)

    TK_OPEN	shift, and go to state 248
    TK_CLOSE	shift, and go to state 380
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 379
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 348

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN . @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 109)

    $default	reduce using rule 107 (@5)

    @5  	go to state 381



state 349

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN . @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 106)

    $default	reduce using rule 104 (@3)

    @3  	go to state 382



state 350

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 79)

    $default	reduce using rule 79 (action_elements)



state 351

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 96)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 97)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 98)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 121)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    TK_EQ	shift, and go to state 172
    TK_PRED_SYMBOL	shift, and go to state 173
    KW_FORALL	shift, and go to state 174
    KW_NOT	shift, and go to state 297
    KW_WHEN	shift, and go to state 321



state 352

    action_effect  ->  TK_OPEN KW_AND action_effect_list . TK_CLOSE   (rule 115)
    action_effect_list  ->  action_effect_list . single_action_effect   (rule 116)

    TK_OPEN	shift, and go to state 351
    TK_CLOSE	shift, and go to state 383

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    single_action_effect	go to state 384
    conditional_effect	go to state 271
    forall_effect	go to state 272
    atomic_effect	go to state 273



state 353

    action_effect_list  ->  single_action_effect .   (rule 117)

    $default	reduce using rule 117 (action_effect_list)



state 354

    conditional_effect  ->  TK_OPEN KW_WHEN condition . atomic_effect_kw_list TK_CLOSE   (rule 121)

    TK_OPEN	shift, and go to state 283

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    atomic_effect_kw_list	go to state 385
    atomic_effect	go to state 285



state 355

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 160)

    $default	reduce using rule 160 (sensor_elements)



state 356

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 153)

    $default	reduce using rule 153 (axiom_elements)



state 357

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list . TK_CLOSE   (rule 127)
    atomic_effect_list  ->  atomic_effect_list . atomic_effect   (rule 129)

    TK_OPEN	shift, and go to state 229
    TK_CLOSE	shift, and go to state 386

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    atomic_effect	go to state 387



state 358

    atomic_effect_list  ->  atomic_effect .   (rule 130)

    $default	reduce using rule 130 (atomic_effect_list)



state 359

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE . @8 optional_such_that action_effect TK_CLOSE   (rule 124)

    $default	reduce using rule 123 (@8)

    @8  	go to state 388



state 360

    optional_such_that  ->  KW_SUCH_THAT . condition   (rule 125)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 389
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 361

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 optional_such_that . state_variable_list_decl TK_CLOSE   (rule 186)

    $default	reduce using rule 190 (state_variable_list_decl)

    state_variable_list_decl	go to state 390



state 362

    state_variable  ->  TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE .   (rule 192)

    $default	reduce using rule 192 (state_variable)



state 363

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN @21 . param_list TK_CLOSE @22 optional_such_that state_variable_list_decl TK_CLOSE   (rule 195)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 391
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 364

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 . optional_such_that sensing_decl_list TK_CLOSE   (rule 143)

    KW_SUCH_THAT	shift, and go to state 360

    $default	reduce using rule 126 (optional_such_that)

    optional_such_that	go to state 392



state 365

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE .   (rule 147)

    $default	reduce using rule 147 (sensing_model)



state 366

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal . condition TK_CLOSE   (rule 145)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 393
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 367

    negative_literal  ->  TK_OPEN KW_NOT positive_literal TK_CLOSE .   (rule 98)

    $default	reduce using rule 98 (negative_literal)



state 368

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 optional_such_that . fluent_list_decl TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 132

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_list_decl	go to state 394
    fluent_decl	go to state 137



state 369

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE . TK_CLOSE   (rule 209)

    TK_CLOSE	shift, and go to state 395



state 370

    clause  ->  TK_OPEN KW_OR single_condition_list TK_CLOSE .   (rule 224)

    $default	reduce using rule 224 (clause)



state 371

    single_condition_list  ->  single_condition_list single_condition .   (rule 110)

    $default	reduce using rule 110 (single_condition_list)



state 372

    oneof  ->  TK_OPEN KW_ONEOF single_condition_list TK_CLOSE .   (rule 225)

    $default	reduce using rule 225 (oneof)



state 373

    unknown  ->  TK_OPEN KW_UNKNOWN positive_literal TK_CLOSE .   (rule 226)

    $default	reduce using rule 226 (unknown)



state 374

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT single_condition_list TK_CLOSE .   (rule 217)

    $default	reduce using rule 217 (at_least_one_invariant)



state 375

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE single_condition_list TK_CLOSE .   (rule 218)

    $default	reduce using rule 218 (at_least_one_invariant)



state 376

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE single_condition_list TK_CLOSE .   (rule 219)

    $default	reduce using rule 219 (at_most_one_invariant)



state 377

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE single_condition_list TK_CLOSE .   (rule 220)

    $default	reduce using rule 220 (exactly_one_invariant)



state 378

    and_condition  ->  TK_OPEN KW_AND condition_list TK_CLOSE .   (rule 102)

    $default	reduce using rule 102 (and_condition)



state 379

    condition_list  ->  condition_list condition .   (rule 112)

    $default	reduce using rule 112 (condition_list)



state 380

    or_condition  ->  TK_OPEN KW_OR condition_list TK_CLOSE .   (rule 103)

    $default	reduce using rule 103 (or_condition)



state 381

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 . param_list TK_CLOSE @6 condition TK_CLOSE   (rule 109)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 396
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 382

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 . param_list TK_CLOSE @4 condition TK_CLOSE   (rule 106)

    TK_VAR_SYMBOL	shift, and go to state 160
    TK_NEW_VAR_SYMBOL	shift, and go to state 161

    $default	reduce using rule 42 (param_list)

    param_list	go to state 397
    untyped_param_list	go to state 163
    typed_param_list	go to state 164
    param_sym_list	go to state 165
    new_var_symbol	go to state 166



state 383

    action_effect  ->  TK_OPEN KW_AND action_effect_list TK_CLOSE .   (rule 115)

    $default	reduce using rule 115 (action_effect)



state 384

    action_effect_list  ->  action_effect_list single_action_effect .   (rule 116)

    $default	reduce using rule 116 (action_effect_list)



state 385

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list . TK_CLOSE   (rule 121)

    TK_CLOSE	shift, and go to state 398



state 386

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list TK_CLOSE .   (rule 127)

    $default	reduce using rule 127 (atomic_effect_kw_list)



state 387

    atomic_effect_list  ->  atomic_effect_list atomic_effect .   (rule 129)

    $default	reduce using rule 129 (atomic_effect_list)



state 388

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 . optional_such_that action_effect TK_CLOSE   (rule 124)

    KW_SUCH_THAT	shift, and go to state 360

    $default	reduce using rule 126 (optional_such_that)

    optional_such_that	go to state 399



state 389

    optional_such_that  ->  KW_SUCH_THAT condition .   (rule 125)

    $default	reduce using rule 125 (optional_such_that)



state 390

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 optional_such_that state_variable_list_decl . TK_CLOSE   (rule 186)
    state_variable_list_decl  ->  state_variable_list_decl . state_variable   (rule 188)
    state_variable_list_decl  ->  state_variable_list_decl . forall_state_variable_list_decl   (rule 189)

    TK_OPEN	shift, and go to state 218
    TK_CLOSE	shift, and go to state 400
    TK_VARNAME_SYMBOL	shift, and go to state 220

    state_variable	go to state 221
    forall_state_variable_list_decl	go to state 222



state 391

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN @21 param_list . TK_CLOSE @22 optional_such_that state_variable_list_decl TK_CLOSE   (rule 195)

    TK_CLOSE	shift, and go to state 401



state 392

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 optional_such_that . sensing_decl_list TK_CLOSE   (rule 143)

    TK_OPEN	shift, and go to state 97

    sensing_decl_list	go to state 402
    sensing_decl	go to state 100
    forall_sensing	go to state 101
    sensing_model	go to state 102



state 393

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition . TK_CLOSE   (rule 145)

    TK_CLOSE	shift, and go to state 403



state 394

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 167)
    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 optional_such_that fluent_list_decl . TK_CLOSE   (rule 178)

    TK_OPEN	shift, and go to state 132
    TK_CLOSE	shift, and go to state 404

    positive_literal	go to state 133
    forall_effect	go to state 134
    positive_atomic_effect	go to state 135
    fluent_decl	go to state 176



state 395

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE .   (rule 209)

    $default	reduce using rule 209 (initial_state)



state 396

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list . TK_CLOSE @6 condition TK_CLOSE   (rule 109)

    TK_CLOSE	shift, and go to state 405



state 397

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list . TK_CLOSE @4 condition TK_CLOSE   (rule 106)

    TK_CLOSE	shift, and go to state 406



state 398

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE .   (rule 121)

    $default	reduce using rule 121 (conditional_effect)



state 399

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that . action_effect TK_CLOSE   (rule 124)

    TK_OPEN	shift, and go to state 267

    literal	go to state 268
    positive_literal	go to state 231
    negative_literal	go to state 232
    action_effect	go to state 407
    single_action_effect	go to state 270
    conditional_effect	go to state 271
    forall_effect	go to state 272
    atomic_effect	go to state 273



state 400

    variable_group_decl  ->  TK_OPEN KW_VGROUP TK_OPEN TK_NEW_SYMBOL @19 param_list TK_CLOSE @20 optional_such_that state_variable_list_decl TK_CLOSE .   (rule 186)

    $default	reduce using rule 186 (variable_group_decl)



state 401

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN @21 param_list TK_CLOSE . @22 optional_such_that state_variable_list_decl TK_CLOSE   (rule 195)

    $default	reduce using rule 194 (@22)

    @22 	go to state 408



state 402

    sensing_decl_list  ->  sensing_decl_list . sensing_decl   (rule 137)
    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 optional_such_that sensing_decl_list . TK_CLOSE   (rule 143)

    TK_OPEN	shift, and go to state 97
    TK_CLOSE	shift, and go to state 409

    sensing_decl	go to state 148
    forall_sensing	go to state 101
    sensing_model	go to state 102



state 403

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE .   (rule 145)

    $default	reduce using rule 145 (sensing_model)



state 404

    simple_variable_decl  ->  TK_OPEN variable_type TK_OPEN TK_NEW_SYMBOL @16 param_list TK_CLOSE @17 optional_such_that fluent_list_decl TK_CLOSE .   (rule 178)

    $default	reduce using rule 178 (simple_variable_decl)



state 405

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE . @6 condition TK_CLOSE   (rule 109)

    $default	reduce using rule 108 (@6)

    @6  	go to state 410



state 406

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE . @4 condition TK_CLOSE   (rule 106)

    $default	reduce using rule 105 (@4)

    @4  	go to state 411



state 407

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that action_effect . TK_CLOSE   (rule 124)

    TK_CLOSE	shift, and go to state 412



state 408

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN @21 param_list TK_CLOSE @22 . optional_such_that state_variable_list_decl TK_CLOSE   (rule 195)

    KW_SUCH_THAT	shift, and go to state 360

    $default	reduce using rule 126 (optional_such_that)

    optional_such_that	go to state 413



state 409

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 optional_such_that sensing_decl_list TK_CLOSE .   (rule 143)

    $default	reduce using rule 143 (forall_sensing)



state 410

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 . condition TK_CLOSE   (rule 109)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 414
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 411

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 . condition TK_CLOSE   (rule 106)

    TK_OPEN	shift, and go to state 248
    KW_TRUE	shift, and go to state 249
    KW_FALSE	shift, and go to state 250

    condition	go to state 415
    constant_condition	go to state 252
    single_condition	go to state 253
    literal	go to state 254
    positive_literal	go to state 231
    negative_literal	go to state 232
    and_condition	go to state 255
    or_condition	go to state 256
    forall_condition	go to state 257
    exists_condition	go to state 258



state 412

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 optional_such_that action_effect TK_CLOSE .   (rule 124)

    $default	reduce using rule 124 (forall_effect)



state 413

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN @21 param_list TK_CLOSE @22 optional_such_that . state_variable_list_decl TK_CLOSE   (rule 195)

    $default	reduce using rule 190 (state_variable_list_decl)

    state_variable_list_decl	go to state 416



state 414

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition . TK_CLOSE   (rule 109)

    TK_CLOSE	shift, and go to state 417



state 415

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition . TK_CLOSE   (rule 106)

    TK_CLOSE	shift, and go to state 418



state 416

    state_variable_list_decl  ->  state_variable_list_decl . state_variable   (rule 188)
    state_variable_list_decl  ->  state_variable_list_decl . forall_state_variable_list_decl   (rule 189)
    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN @21 param_list TK_CLOSE @22 optional_such_that state_variable_list_decl . TK_CLOSE   (rule 195)

    TK_OPEN	shift, and go to state 218
    TK_CLOSE	shift, and go to state 419
    TK_VARNAME_SYMBOL	shift, and go to state 220

    state_variable	go to state 221
    forall_state_variable_list_decl	go to state 222



state 417

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE .   (rule 109)

    $default	reduce using rule 109 (exists_condition)



state 418

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE .   (rule 106)

    $default	reduce using rule 106 (forall_condition)



state 419

    forall_state_variable_list_decl  ->  TK_OPEN KW_FORALL TK_OPEN @21 param_list TK_CLOSE @22 optional_such_that state_variable_list_decl TK_CLOSE .   (rule 195)

    $default	reduce using rule 195 (forall_state_variable_list_decl)



state 420

    $   	go to state 421



state 421

    $   	go to state 422



state 422

    $default	accept
