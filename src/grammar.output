Useless nonterminals:

   term
   goal_list
   single_goal


Terminals which are not used:

   TK_OPEN_SQ
   TK_CLOSE_SQ
   TK_INT
   KW_FLUENTS
   KW_VALUES


Useless rules:

#209   term :	 TK_OPEN KW_AND single_condition_list TK_CLOSE;
#215   goal_list :	 goal_list single_goal;
#216   goal_list :	 single_goal;
#217   single_goal :	 positive_literal;
#218   single_goal :	 negative_literal;



Grammar
rule 1    pddl_decls -> pddl_domain pddl_decls
rule 2    pddl_decls -> pddl_problem pddl_decls
rule 3    pddl_decls ->		/* empty */
rule 4    pddl_domain -> TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE
rule 5    pddl_domain -> TK_OPEN KW_DEFINE domain_name error TK_CLOSE
rule 6    domain_elements -> domain_elements domain_requires
rule 7    domain_elements -> domain_elements domain_types
rule 8    domain_elements -> domain_elements domain_constants
rule 9    domain_elements -> domain_elements domain_predicates
rule 10   domain_elements -> domain_elements domain_schemas
rule 11   domain_elements -> domain_elements domain_default_sensing
rule 12   domain_elements ->		/* empty */
rule 13   domain_name -> TK_OPEN KW_DOMAIN any_symbol TK_CLOSE
rule 14   any_symbol -> TK_NEW_SYMBOL
rule 15   any_symbol -> TK_OBJ_SYMBOL
rule 16   any_symbol -> TK_TYPE_SYMBOL
rule 17   any_symbol -> TK_PRED_SYMBOL
rule 18   any_symbol -> TK_VAR_SYMBOL
rule 19   any_symbol -> TK_ACTION_SYMBOL
rule 20   any_symbol -> TK_AXIOM_SYMBOL
rule 21   any_symbol -> TK_SENSOR_SYMBOL
rule 22   any_symbol -> TK_MISC_SYMBOL
rule 23   action_symbol -> TK_NEW_SYMBOL
rule 24   action_symbol -> TK_ACTION_SYMBOL
rule 25   sensor_symbol -> TK_NEW_SYMBOL
rule 26   sensor_symbol -> TK_SENSOR_SYMBOL
rule 27   axiom_symbol -> TK_NEW_SYMBOL
rule 28   axiom_symbol -> TK_AXIOM_SYMBOL
rule 29   domain_requires -> TK_OPEN KW_REQS require_list TK_CLOSE
rule 30   domain_requires -> TK_OPEN KW_REQS error TK_CLOSE
rule 31   require_list -> require_list KW_TRANSLATION
rule 32   require_list -> require_list TK_KEYWORD
rule 33   require_list ->		/* empty */
rule 34   domain_predicates -> TK_OPEN KW_PREDS predicate_list TK_CLOSE
rule 35   domain_predicates -> TK_OPEN KW_PREDS error TK_CLOSE
rule 36   predicate_list -> predicate_list predicate_decl
rule 37   predicate_list -> predicate_decl
rule 38   predicate_decl -> TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE
rule 39   predicate_decl -> TK_OPEN error TK_CLOSE
rule 40   param_list -> untyped_param_list
rule 41   param_list -> typed_param_list
rule 42   param_list ->		/* empty */
rule 43   untyped_param_list -> param_sym_list
rule 44   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list
rule 45   typed_param_list -> param_sym_list TK_HYPHEN TK_TYPE_SYMBOL
rule 46   param_sym_list -> new_var_symbol param_sym_list
rule 47   param_sym_list -> new_var_symbol
rule 48   new_var_symbol -> TK_NEW_VAR_SYMBOL
rule 49   new_var_symbol -> TK_VAR_SYMBOL
rule 50   domain_types -> TK_OPEN KW_TYPES primitive_type_list TK_CLOSE
rule 51   domain_types -> TK_OPEN KW_TYPES typed_type_list TK_CLOSE
rule 52   typed_type_list -> primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list
rule 53   typed_type_list -> primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list
rule 54   typed_type_list ->		/* empty */
rule 55   primitive_type_list -> primitive_type_list primitive_type
rule 56   primitive_type_list -> primitive_type
rule 57   primitive_type -> TK_TYPE_SYMBOL
rule 58   primitive_type -> TK_NEW_SYMBOL
rule 59   domain_constants -> TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE
rule 60   domain_constants -> TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE
rule 61   domain_constants -> TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE
rule 62   domain_constants -> TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE
rule 63   @1 ->		/* empty */
rule 64   typed_constant_list -> constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list
rule 65   typed_constant_list ->		/* empty */
rule 66   untyped_constant_list -> constant_sym_list
rule 67   constant_sym_list -> constant_sym_list TK_NEW_SYMBOL
rule 68   constant_sym_list -> TK_NEW_SYMBOL
rule 69   domain_schemas -> action_decl
rule 70   domain_schemas -> axiom_decl
rule 71   domain_schemas -> sensor_decl
rule 72   domain_schemas -> observable_decl
rule 73   domain_schemas -> sticky_decl
rule 74   domain_schemas -> multivalued_variable_decl
rule 75   @2 ->		/* empty */
rule 76   action_decl -> TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE
rule 77   action_decl -> TK_OPEN KW_ACTION error TK_CLOSE
rule 78   action_elements -> action_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 79   action_elements -> action_elements KW_PRE condition
rule 80   action_elements -> action_elements KW_EFFECT action_effect
rule 81   action_elements -> action_elements KW_OBSERVE positive_atomic_effect_list
rule 82   action_elements -> action_elements KW_SENSING sensing
rule 83   action_elements ->		/* empty */
rule 84   condition -> constant_condition
rule 85   condition -> single_condition
rule 86   condition -> and_condition
rule 87   condition -> or_condition
rule 88   condition -> forall_condition
rule 89   condition -> exists_condition
rule 90   constant_condition -> KW_TRUE
rule 91   constant_condition -> KW_FALSE
rule 92   single_condition -> literal
rule 93   literal -> positive_literal
rule 94   literal -> negative_literal
rule 95   positive_literal -> TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE
rule 96   positive_literal -> TK_OPEN TK_EQ argument_list TK_CLOSE
rule 97   negative_literal -> TK_OPEN KW_NOT positive_literal TK_CLOSE
rule 98   argument_list -> argument_list TK_VAR_SYMBOL
rule 99   argument_list -> argument_list TK_OBJ_SYMBOL
rule 100  argument_list ->		/* empty */
rule 101  and_condition -> TK_OPEN KW_AND condition_list TK_CLOSE
rule 102  or_condition -> TK_OPEN KW_OR condition_list TK_CLOSE
rule 103  @3 ->		/* empty */
rule 104  @4 ->		/* empty */
rule 105  forall_condition -> TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE
rule 106  @5 ->		/* empty */
rule 107  @6 ->		/* empty */
rule 108  exists_condition -> TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE
rule 109  single_condition_list -> single_condition_list single_condition
rule 110  single_condition_list -> single_condition
rule 111  condition_list -> condition_list condition
rule 112  condition_list -> condition
rule 113  action_effect -> single_action_effect
rule 114  action_effect -> TK_OPEN KW_AND action_effect_list TK_CLOSE
rule 115  action_effect_list -> action_effect_list single_action_effect
rule 116  action_effect_list -> single_action_effect
rule 117  single_action_effect -> atomic_effect
rule 118  single_action_effect -> conditional_effect
rule 119  single_action_effect -> forall_effect
rule 120  conditional_effect -> TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE
rule 121  @7 ->		/* empty */
rule 122  @8 ->		/* empty */
rule 123  forall_effect -> TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE
rule 124  atomic_effect_kw_list -> TK_OPEN KW_AND atomic_effect_list TK_CLOSE
rule 125  atomic_effect_kw_list -> atomic_effect
rule 126  atomic_effect_list -> atomic_effect_list atomic_effect
rule 127  atomic_effect_list -> atomic_effect
rule 128  positive_atomic_effect_list -> positive_atomic_effect_list positive_atomic_effect
rule 129  positive_atomic_effect_list -> positive_atomic_effect
rule 130  atomic_effect -> literal
rule 131  positive_atomic_effect -> positive_literal
rule 132  sensing -> sensing_decl_list
rule 133  sensing ->		/* empty */
rule 134  sensing_decl_list -> sensing_decl_list sensing_decl
rule 135  sensing_decl_list -> sensing_decl
rule 136  sensing_decl -> sensing_model
rule 137  sensing_decl -> forall_sensing
rule 138  sensing_decl -> such_that_sensing
rule 139  @9 ->		/* empty */
rule 140  @10 ->		/* empty */
rule 141  forall_sensing -> TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE
rule 142  such_that_sensing -> TK_OPEN KW_SUCH_THAT condition sensing_decl_list TK_CLOSE
rule 143  sensing_model -> TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE
rule 144  sensing_model -> TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE
rule 145  sensing_model -> TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE
rule 146  sensing_model -> TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE
rule 147  sensing_model -> TK_OPEN KW_VARIABLE error TK_CLOSE
rule 148  sensing_model -> TK_OPEN KW_MODEL_FOR error TK_CLOSE
rule 149  @11 ->		/* empty */
rule 150  axiom_decl -> TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE
rule 151  axiom_decl -> TK_OPEN KW_AXIOM error TK_CLOSE
rule 152  axiom_elements -> axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 153  axiom_elements -> axiom_elements KW_BODY condition
rule 154  axiom_elements -> axiom_elements KW_HEAD atomic_effect_kw_list
rule 155  axiom_elements ->		/* empty */
rule 156  @12 ->		/* empty */
rule 157  sensor_decl -> TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE
rule 158  sensor_decl -> TK_OPEN KW_SENSOR error TK_CLOSE
rule 159  sensor_elements -> sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE
rule 160  sensor_elements -> sensor_elements KW_COND condition
rule 161  sensor_elements -> sensor_elements KW_SENSE positive_atomic_effect_list
rule 162  sensor_elements ->		/* empty */
rule 163  @13 ->		/* empty */
rule 164  observable_decl -> TK_OPEN KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE
rule 165  observable_decl -> TK_OPEN KW_OBSERVABLE error TK_CLOSE
rule 166  fluent_list_decl -> fluent_list_decl fluent_decl
rule 167  fluent_list_decl -> fluent_decl
rule 168  fluent_decl -> positive_atomic_effect
rule 169  fluent_decl -> forall_effect
rule 170  @14 ->		/* empty */
rule 171  sticky_decl -> TK_OPEN KW_STICKY @14 fluent_list_decl TK_CLOSE
rule 172  sticky_decl -> TK_OPEN KW_STICKY error TK_CLOSE
rule 173  @15 ->		/* empty */
rule 174  multivalued_variable_decl -> TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE
rule 175  @16 ->		/* empty */
rule 176  multivalued_variable_decl -> TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE
rule 177  multivalued_variable_decl -> TK_OPEN KW_VARIABLE error TK_CLOSE
rule 178  multivalued_variable_type -> KW_VARIABLE
rule 179  multivalued_variable_type -> KW_OBS_VARIABLE
rule 180  domain_default_sensing -> TK_OPEN KW_DEFAULT_SENSING sensing TK_CLOSE
rule 181  @17 ->		/* empty */
rule 182  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE
rule 183  pddl_problem -> TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE
rule 184  problem_elements -> problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE
rule 185  problem_elements -> problem_elements domain_requires
rule 186  problem_elements -> problem_elements domain_constants
rule 187  problem_elements -> problem_elements initial_state
rule 188  problem_elements -> problem_elements hidden_state
rule 189  problem_elements -> problem_elements goal_spec
rule 190  problem_elements ->		/* empty */
rule 191  initial_state -> TK_OPEN KW_INIT TK_CLOSE
rule 192  initial_state -> TK_OPEN KW_INIT init_elements TK_CLOSE
rule 193  initial_state -> TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE
rule 194  init_elements -> init_elements single_init_element
rule 195  init_elements -> single_init_element
rule 196  single_init_element -> literal
rule 197  single_init_element -> invariant
rule 198  single_init_element -> clause
rule 199  single_init_element -> oneof
rule 200  single_init_element -> unknown
rule 201  at_least_one_invariant -> TK_OPEN KW_INVARIANT single_condition_list TK_CLOSE
rule 202  at_least_one_invariant -> TK_OPEN KW_AT_LEAST_ONE single_condition_list TK_CLOSE
rule 203  at_most_one_invariant -> TK_OPEN KW_AT_MOST_ONE single_condition_list TK_CLOSE
rule 204  exactly_one_invariant -> TK_OPEN KW_EXACTLY_ONE single_condition_list TK_CLOSE
rule 205  invariant -> at_least_one_invariant
rule 206  invariant -> at_most_one_invariant
rule 207  invariant -> exactly_one_invariant
rule 208  clause -> TK_OPEN KW_OR single_condition_list TK_CLOSE
rule 210  oneof -> TK_OPEN KW_ONEOF single_condition_list TK_CLOSE
rule 211  unknown -> TK_OPEN KW_UNKNOWN positive_literal TK_CLOSE
rule 212  hidden_state -> TK_OPEN KW_HIDDEN init_elements TK_CLOSE
rule 213  hidden_state -> TK_OPEN KW_HIDDEN TK_CLOSE
rule 214  goal_spec -> TK_OPEN KW_GOAL condition TK_CLOSE

Terminals, with rules where they appear

$ (-1)
error (256) 5 30 35 39 77 147 148 151 158 165 172 177 183
TK_OPEN (258) 4 5 13 29 30 34 35 38 39 50 51 59 60 61 62 76 77 78 95
    96 97 101 102 105 108 114 120 123 124 141 142 143 144 145 146 147
    148 150 151 152 157 158 159 164 165 171 172 174 176 177 180 182
    183 184 191 192 193 201 202 203 204 208 209 210 211 212 213 214
TK_CLOSE (259) 4 5 13 29 30 34 35 38 39 50 51 59 60 61 62 76 77 78
    95 96 97 101 102 105 108 114 120 123 124 141 142 143 144 145 146
    147 148 150 151 152 157 158 159 164 165 171 172 174 176 177 180
    182 183 184 191 192 193 201 202 203 204 208 209 210 211 212 213
    214
TK_OPEN_SQ (260)
TK_CLOSE_SQ (261)
TK_EQ (262) 96
TK_HYPHEN (263) 44 45 52 53 64
TK_NEW_SYMBOL (264) 14 23 25 27 38 53 58 67 68 174 176
TK_OBJ_SYMBOL (265) 15 99
TK_TYPE_SYMBOL (266) 16 44 45 52 57 64
TK_PRED_SYMBOL (267) 17 95
TK_VAR_SYMBOL (268) 18 49 98
TK_ACTION_SYMBOL (269) 19 24
TK_AXIOM_SYMBOL (270) 20 28
TK_SENSOR_SYMBOL (271) 21 26
TK_MISC_SYMBOL (272) 22
TK_KEYWORD (273) 32
TK_NEW_VAR_SYMBOL (274) 48
TK_VARNAME_SYMBOL (275) 143 144 145 146
TK_INT (276)
KW_REQS (277) 29 30
KW_TRANSLATION (278) 31
KW_CONSTANTS (279) 59 61
KW_PREDS (280) 34 35
KW_TYPES (281) 50 51
KW_DEFINE (282) 4 5 182 183
KW_DOMAIN (283) 13
KW_ACTION (284) 76 77
KW_ARGS (285) 78 152 159
KW_PRE (286) 79
KW_EFFECT (287) 80
KW_AND (288) 101 114 124 193 209
KW_TRUE (289) 90
KW_FALSE (290) 91
KW_OR (291) 102 208
KW_EXISTS (292) 108
KW_FORALL (293) 105 123 141
KW_SUCH_THAT (294) 142
KW_NOT (295) 97
KW_WHEN (296) 120
KW_ONEOF (297) 210
KW_UNKNOWN (298) 211
KW_PROBLEM (299) 182 183
KW_FORDOMAIN (300) 184
KW_OBJECTS (301) 60 62
KW_INIT (302) 191 192 193
KW_GOAL (303) 214
KW_SENSOR (304) 157 158
KW_SENSE (305) 161
KW_OBSERVE (306) 81
KW_AXIOM (307) 150 151
KW_COND (308) 160
KW_OBSERVABLE (309) 164 165
KW_BODY (310) 153
KW_HEAD (311) 154
KW_STICKY (312) 171 172
KW_FLUENTS (313)
KW_HIDDEN (314) 212 213
KW_INVARIANT (315) 201
KW_AT_LEAST_ONE (316) 202
KW_AT_MOST_ONE (317) 203
KW_EXACTLY_ONE (318) 204
KW_VARIABLE (319) 145 146 147 177 178
KW_OBS_VARIABLE (320) 179
KW_VALUES (321)
KW_SENSING (322) 82
KW_DEFAULT_SENSING (323) 180
KW_MODEL_FOR (324) 143 144 148

Nonterminals, with rules where they appear

pddl_decls (70)
    on left: 1 2 3, on right: 1 2
pddl_domain (71)
    on left: 4 5, on right: 1
domain_elements (72)
    on left: 6 7 8 9 10 11 12, on right: 4 6 7 8 9 10 11
domain_name (73)
    on left: 13, on right: 4 5
any_symbol (74)
    on left: 14 15 16 17 18 19 20 21 22, on right: 13 182 184
action_symbol (75)
    on left: 23 24, on right: 76
sensor_symbol (76)
    on left: 25 26, on right: 157
axiom_symbol (77)
    on left: 27 28, on right: 150
domain_requires (78)
    on left: 29 30, on right: 6 185
require_list (79)
    on left: 31 32 33, on right: 29 31 32
domain_predicates (80)
    on left: 34 35, on right: 9
predicate_list (81)
    on left: 36 37, on right: 34 36
predicate_decl (82)
    on left: 38 39, on right: 36 37
param_list (83)
    on left: 40 41 42, on right: 38 78 105 108 123 141 152 159 176
untyped_param_list (84)
    on left: 43, on right: 40
typed_param_list (85)
    on left: 44 45, on right: 41 44
param_sym_list (86)
    on left: 46 47, on right: 43 44 45 46
new_var_symbol (87)
    on left: 48 49, on right: 46 47
domain_types (88)
    on left: 50 51, on right: 7
typed_type_list (89)
    on left: 52 53 54, on right: 51 52 53
primitive_type_list (90)
    on left: 55 56, on right: 50 52 53 55
primitive_type (91)
    on left: 57 58, on right: 55 56
domain_constants (92)
    on left: 59 60 61 62, on right: 8 186
typed_constant_list (93)
    on left: 64 65, on right: 59 60 64
@1 (94)
    on left: 63, on right: 64
untyped_constant_list (95)
    on left: 66, on right: 61 62
constant_sym_list (96)
    on left: 67 68, on right: 64 66 67
domain_schemas (97)
    on left: 69 70 71 72 73 74, on right: 10
action_decl (98)
    on left: 76 77, on right: 69
@2 (99)
    on left: 75, on right: 76
action_elements (100)
    on left: 78 79 80 81 82 83, on right: 76 78 79 80 81 82
condition (101)
    on left: 84 85 86 87 88 89, on right: 79 105 108 111 112 120 142
    143 144 153 160 214
constant_condition (102)
    on left: 90 91, on right: 84
single_condition (103)
    on left: 92, on right: 85 109 110
literal (104)
    on left: 93 94, on right: 92 130 143 144 196
positive_literal (105)
    on left: 95 96, on right: 93 97 131 211 217
negative_literal (106)
    on left: 97, on right: 94 218
argument_list (107)
    on left: 98 99 100, on right: 95 96 98 99 144 146
and_condition (108)
    on left: 101, on right: 86
or_condition (109)
    on left: 102, on right: 87
forall_condition (110)
    on left: 105, on right: 88
@3 (111)
    on left: 103, on right: 105
@4 (112)
    on left: 104, on right: 105
exists_condition (113)
    on left: 108, on right: 89
@5 (114)
    on left: 106, on right: 108
@6 (115)
    on left: 107, on right: 108
single_condition_list (116)
    on left: 109 110, on right: 109 201 202 203 204 208 209 210
condition_list (117)
    on left: 111 112, on right: 101 102 111
action_effect (118)
    on left: 113 114, on right: 80 123
action_effect_list (119)
    on left: 115 116, on right: 114 115
single_action_effect (120)
    on left: 117 118 119, on right: 113 115 116
conditional_effect (121)
    on left: 120, on right: 118
forall_effect (122)
    on left: 123, on right: 119 169
@7 (123)
    on left: 121, on right: 123
@8 (124)
    on left: 122, on right: 123
atomic_effect_kw_list (125)
    on left: 124 125, on right: 120 154
atomic_effect_list (126)
    on left: 126 127, on right: 124 126
positive_atomic_effect_list (127)
    on left: 128 129, on right: 81 128 161
atomic_effect (128)
    on left: 130, on right: 117 125 126 127
positive_atomic_effect (129)
    on left: 131, on right: 128 129 168
sensing (130)
    on left: 132 133, on right: 82 180
sensing_decl_list (131)
    on left: 134 135, on right: 132 134 141 142
sensing_decl (132)
    on left: 136 137 138, on right: 134 135
forall_sensing (133)
    on left: 141, on right: 137
@9 (134)
    on left: 139, on right: 141
@10 (135)
    on left: 140, on right: 141
such_that_sensing (136)
    on left: 142, on right: 138
sensing_model (137)
    on left: 143 144 145 146 147 148, on right: 136
axiom_decl (138)
    on left: 150 151, on right: 70
@11 (139)
    on left: 149, on right: 150
axiom_elements (140)
    on left: 152 153 154 155, on right: 150 152 153 154
sensor_decl (141)
    on left: 157 158, on right: 71
@12 (142)
    on left: 156, on right: 157
sensor_elements (143)
    on left: 159 160 161 162, on right: 157 159 160 161
observable_decl (144)
    on left: 164 165, on right: 72
@13 (145)
    on left: 163, on right: 164
fluent_list_decl (146)
    on left: 166 167, on right: 164 166 171 174 176
fluent_decl (147)
    on left: 168 169, on right: 166 167
sticky_decl (148)
    on left: 171 172, on right: 73
@14 (149)
    on left: 170, on right: 171
multivalued_variable_decl (150)
    on left: 174 176 177, on right: 74
@15 (151)
    on left: 173, on right: 174
@16 (152)
    on left: 175, on right: 176
multivalued_variable_type (153)
    on left: 178 179, on right: 174 176
domain_default_sensing (154)
    on left: 180, on right: 11
pddl_problem (155)
    on left: 182 183, on right: 2
@17 (156)
    on left: 181, on right: 182
problem_elements (157)
    on left: 184 185 186 187 188 189 190, on right: 182 184 185 186
    187 188 189
initial_state (158)
    on left: 191 192 193, on right: 187
init_elements (159)
    on left: 194 195, on right: 192 193 194 212
single_init_element (160)
    on left: 196 197 198 199 200, on right: 194 195
at_least_one_invariant (161)
    on left: 201 202, on right: 205
at_most_one_invariant (162)
    on left: 203, on right: 206
exactly_one_invariant (163)
    on left: 204, on right: 207
invariant (164)
    on left: 205 206 207, on right: 197
clause (165)
    on left: 208, on right: 198
oneof (166)
    on left: 210, on right: 199
unknown (167)
    on left: 211, on right: 200
hidden_state (168)
    on left: 212 213, on right: 188
goal_spec (169)
    on left: 214, on right: 189


state 0

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 386
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 1

    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN . KW_DEFINE domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 182)
    pddl_problem  ->  TK_OPEN . KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 183)

    KW_DEFINE	shift, and go to state 4



state 2

    pddl_decls  ->  pddl_domain . pddl_decls   (rule 1)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 5
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 3

    pddl_decls  ->  pddl_problem . pddl_decls   (rule 2)

    TK_OPEN	shift, and go to state 1

    $default	reduce using rule 3 (pddl_decls)

    pddl_decls	go to state 6
    pddl_domain	go to state 2
    pddl_problem	go to state 3



state 4

    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE . domain_name error TK_CLOSE   (rule 5)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 182)
    pddl_problem  ->  TK_OPEN KW_DEFINE . TK_OPEN KW_PROBLEM error TK_CLOSE   (rule 183)

    TK_OPEN	shift, and go to state 7

    domain_name	go to state 8



state 5

    pddl_decls  ->  pddl_domain pddl_decls .   (rule 1)

    $default	reduce using rule 1 (pddl_decls)



state 6

    pddl_decls  ->  pddl_problem pddl_decls .   (rule 2)

    $default	reduce using rule 2 (pddl_decls)



state 7

    domain_name  ->  TK_OPEN . KW_DOMAIN any_symbol TK_CLOSE   (rule 13)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 182)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN . KW_PROBLEM error TK_CLOSE   (rule 183)

    KW_DOMAIN	shift, and go to state 9
    KW_PROBLEM	shift, and go to state 10



state 8

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . domain_elements TK_CLOSE   (rule 4)
    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name . error TK_CLOSE   (rule 5)

    error	shift, and go to state 11

    TK_OPEN	reduce using rule 12 (domain_elements)
    TK_CLOSE	reduce using rule 12 (domain_elements)
    KW_FALSE	reduce using rule 12 (domain_elements)
    KW_OR	reduce using rule 12 (domain_elements)
    KW_SENSING	reduce using rule 12 (domain_elements)
    KW_DEFAULT_SENSING	reduce using rule 12 (domain_elements)

    domain_elements	go to state 12



state 9

    domain_name  ->  TK_OPEN KW_DOMAIN . any_symbol TK_CLOSE   (rule 13)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 22



state 10

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . any_symbol TK_CLOSE @17 problem_elements TK_CLOSE   (rule 182)
    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM . error TK_CLOSE   (rule 183)

    error	shift, and go to state 23
    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 24



state 11

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error . TK_CLOSE   (rule 5)

    TK_CLOSE	shift, and go to state 25



state 12

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements . TK_CLOSE   (rule 4)
    domain_elements  ->  domain_elements . domain_requires   (rule 6)
    domain_elements  ->  domain_elements . domain_types   (rule 7)
    domain_elements  ->  domain_elements . domain_constants   (rule 8)
    domain_elements  ->  domain_elements . domain_predicates   (rule 9)
    domain_elements  ->  domain_elements . domain_schemas   (rule 10)
    domain_elements  ->  domain_elements . domain_default_sensing   (rule 11)

    TK_OPEN	shift, and go to state 26
    TK_CLOSE	shift, and go to state 27

    domain_requires	go to state 28
    domain_predicates	go to state 29
    domain_types	go to state 30
    domain_constants	go to state 31
    domain_schemas	go to state 32
    action_decl	go to state 33
    axiom_decl	go to state 34
    sensor_decl	go to state 35
    observable_decl	go to state 36
    sticky_decl	go to state 37
    multivalued_variable_decl	go to state 38
    domain_default_sensing	go to state 39



state 13

    any_symbol  ->  TK_NEW_SYMBOL .   (rule 14)

    $default	reduce using rule 14 (any_symbol)



state 14

    any_symbol  ->  TK_OBJ_SYMBOL .   (rule 15)

    $default	reduce using rule 15 (any_symbol)



state 15

    any_symbol  ->  TK_TYPE_SYMBOL .   (rule 16)

    $default	reduce using rule 16 (any_symbol)



state 16

    any_symbol  ->  TK_PRED_SYMBOL .   (rule 17)

    $default	reduce using rule 17 (any_symbol)



state 17

    any_symbol  ->  TK_VAR_SYMBOL .   (rule 18)

    $default	reduce using rule 18 (any_symbol)



state 18

    any_symbol  ->  TK_ACTION_SYMBOL .   (rule 19)

    $default	reduce using rule 19 (any_symbol)



state 19

    any_symbol  ->  TK_AXIOM_SYMBOL .   (rule 20)

    $default	reduce using rule 20 (any_symbol)



state 20

    any_symbol  ->  TK_SENSOR_SYMBOL .   (rule 21)

    $default	reduce using rule 21 (any_symbol)



state 21

    any_symbol  ->  TK_MISC_SYMBOL .   (rule 22)

    $default	reduce using rule 22 (any_symbol)



state 22

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol . TK_CLOSE   (rule 13)

    TK_CLOSE	shift, and go to state 40



state 23

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error . TK_CLOSE   (rule 183)

    TK_CLOSE	shift, and go to state 41



state 24

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol . TK_CLOSE @17 problem_elements TK_CLOSE   (rule 182)

    TK_CLOSE	shift, and go to state 42



state 25

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name error TK_CLOSE .   (rule 5)

    $default	reduce using rule 5 (pddl_domain)



state 26

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 30)
    domain_predicates  ->  TK_OPEN . KW_PREDS predicate_list TK_CLOSE   (rule 34)
    domain_predicates  ->  TK_OPEN . KW_PREDS error TK_CLOSE   (rule 35)
    domain_types  ->  TK_OPEN . KW_TYPES primitive_type_list TK_CLOSE   (rule 50)
    domain_types  ->  TK_OPEN . KW_TYPES typed_type_list TK_CLOSE   (rule 51)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 62)
    action_decl  ->  TK_OPEN . KW_ACTION action_symbol @2 action_elements TK_CLOSE   (rule 76)
    action_decl  ->  TK_OPEN . KW_ACTION error TK_CLOSE   (rule 77)
    axiom_decl  ->  TK_OPEN . KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE   (rule 150)
    axiom_decl  ->  TK_OPEN . KW_AXIOM error TK_CLOSE   (rule 151)
    sensor_decl  ->  TK_OPEN . KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE   (rule 157)
    sensor_decl  ->  TK_OPEN . KW_SENSOR error TK_CLOSE   (rule 158)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE   (rule 164)
    observable_decl  ->  TK_OPEN . KW_OBSERVABLE error TK_CLOSE   (rule 165)
    sticky_decl  ->  TK_OPEN . KW_STICKY @14 fluent_list_decl TK_CLOSE   (rule 171)
    sticky_decl  ->  TK_OPEN . KW_STICKY error TK_CLOSE   (rule 172)
    multivalued_variable_decl  ->  TK_OPEN . multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE   (rule 174)
    multivalued_variable_decl  ->  TK_OPEN . multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 176)
    multivalued_variable_decl  ->  TK_OPEN . KW_VARIABLE error TK_CLOSE   (rule 177)
    domain_default_sensing  ->  TK_OPEN . KW_DEFAULT_SENSING sensing TK_CLOSE   (rule 180)

    KW_REQS	shift, and go to state 43
    KW_CONSTANTS	shift, and go to state 44
    KW_PREDS	shift, and go to state 45
    KW_TYPES	shift, and go to state 46
    KW_ACTION	shift, and go to state 47
    KW_OBJECTS	shift, and go to state 48
    KW_SENSOR	shift, and go to state 49
    KW_AXIOM	shift, and go to state 50
    KW_OBSERVABLE	shift, and go to state 51
    KW_STICKY	shift, and go to state 52
    KW_VARIABLE	shift, and go to state 53
    KW_OBS_VARIABLE	shift, and go to state 54
    KW_DEFAULT_SENSING	shift, and go to state 55

    multivalued_variable_type	go to state 56



state 27

    pddl_domain  ->  TK_OPEN KW_DEFINE domain_name domain_elements TK_CLOSE .   (rule 4)

    $default	reduce using rule 4 (pddl_domain)



state 28

    domain_elements  ->  domain_elements domain_requires .   (rule 6)

    $default	reduce using rule 6 (domain_elements)



state 29

    domain_elements  ->  domain_elements domain_predicates .   (rule 9)

    $default	reduce using rule 9 (domain_elements)



state 30

    domain_elements  ->  domain_elements domain_types .   (rule 7)

    $default	reduce using rule 7 (domain_elements)



state 31

    domain_elements  ->  domain_elements domain_constants .   (rule 8)

    $default	reduce using rule 8 (domain_elements)



state 32

    domain_elements  ->  domain_elements domain_schemas .   (rule 10)

    $default	reduce using rule 10 (domain_elements)



state 33

    domain_schemas  ->  action_decl .   (rule 69)

    $default	reduce using rule 69 (domain_schemas)



state 34

    domain_schemas  ->  axiom_decl .   (rule 70)

    $default	reduce using rule 70 (domain_schemas)



state 35

    domain_schemas  ->  sensor_decl .   (rule 71)

    $default	reduce using rule 71 (domain_schemas)



state 36

    domain_schemas  ->  observable_decl .   (rule 72)

    $default	reduce using rule 72 (domain_schemas)



state 37

    domain_schemas  ->  sticky_decl .   (rule 73)

    $default	reduce using rule 73 (domain_schemas)



state 38

    domain_schemas  ->  multivalued_variable_decl .   (rule 74)

    $default	reduce using rule 74 (domain_schemas)



state 39

    domain_elements  ->  domain_elements domain_default_sensing .   (rule 11)

    $default	reduce using rule 11 (domain_elements)



state 40

    domain_name  ->  TK_OPEN KW_DOMAIN any_symbol TK_CLOSE .   (rule 13)

    $default	reduce using rule 13 (domain_name)



state 41

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM error TK_CLOSE .   (rule 183)

    $default	reduce using rule 183 (pddl_problem)



state 42

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE . @17 problem_elements TK_CLOSE   (rule 182)

    $default	reduce using rule 181 (@17)

    @17 	go to state 57



state 43

    domain_requires  ->  TK_OPEN KW_REQS . require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN KW_REQS . error TK_CLOSE   (rule 30)

    error	shift, and go to state 58

    TK_CLOSE	reduce using rule 33 (require_list)
    TK_KEYWORD	reduce using rule 33 (require_list)
    KW_TRANSLATION	reduce using rule 33 (require_list)
    KW_OR	reduce using rule 33 (require_list)
    KW_SENSE	reduce using rule 33 (require_list)
    KW_BODY	reduce using rule 33 (require_list)
    KW_DEFAULT_SENSING	reduce using rule 33 (require_list)

    require_list	go to state 59



state 44

    domain_constants  ->  TK_OPEN KW_CONSTANTS . typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN KW_CONSTANTS . untyped_constant_list TK_CLOSE   (rule 61)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 61
    untyped_constant_list	go to state 62
    constant_sym_list	go to state 63



state 45

    domain_predicates  ->  TK_OPEN KW_PREDS . predicate_list TK_CLOSE   (rule 34)
    domain_predicates  ->  TK_OPEN KW_PREDS . error TK_CLOSE   (rule 35)

    error	shift, and go to state 64
    TK_OPEN	shift, and go to state 65

    predicate_list	go to state 66
    predicate_decl	go to state 67



state 46

    domain_types  ->  TK_OPEN KW_TYPES . primitive_type_list TK_CLOSE   (rule 50)
    domain_types  ->  TK_OPEN KW_TYPES . typed_type_list TK_CLOSE   (rule 51)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 70
    primitive_type_list	go to state 71
    primitive_type	go to state 72



state 47

    action_decl  ->  TK_OPEN KW_ACTION . action_symbol @2 action_elements TK_CLOSE   (rule 76)
    action_decl  ->  TK_OPEN KW_ACTION . error TK_CLOSE   (rule 77)

    error	shift, and go to state 73
    TK_NEW_SYMBOL	shift, and go to state 74
    TK_ACTION_SYMBOL	shift, and go to state 75

    action_symbol	go to state 76



state 48

    domain_constants  ->  TK_OPEN KW_OBJECTS . typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN KW_OBJECTS . untyped_constant_list TK_CLOSE   (rule 62)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 77
    untyped_constant_list	go to state 78
    constant_sym_list	go to state 63



state 49

    sensor_decl  ->  TK_OPEN KW_SENSOR . sensor_symbol @12 sensor_elements TK_CLOSE   (rule 157)
    sensor_decl  ->  TK_OPEN KW_SENSOR . error TK_CLOSE   (rule 158)

    error	shift, and go to state 79
    TK_NEW_SYMBOL	shift, and go to state 80
    TK_SENSOR_SYMBOL	shift, and go to state 81

    sensor_symbol	go to state 82



state 50

    axiom_decl  ->  TK_OPEN KW_AXIOM . axiom_symbol @11 axiom_elements TK_CLOSE   (rule 150)
    axiom_decl  ->  TK_OPEN KW_AXIOM . error TK_CLOSE   (rule 151)

    error	shift, and go to state 83
    TK_NEW_SYMBOL	shift, and go to state 84
    TK_AXIOM_SYMBOL	shift, and go to state 85

    axiom_symbol	go to state 86



state 51

    observable_decl  ->  TK_OPEN KW_OBSERVABLE . @13 fluent_list_decl TK_CLOSE   (rule 164)
    observable_decl  ->  TK_OPEN KW_OBSERVABLE . error TK_CLOSE   (rule 165)

    error	shift, and go to state 87

    TK_OPEN	reduce using rule 163 (@13)
    KW_FALSE	reduce using rule 163 (@13)
    KW_SENSING	reduce using rule 163 (@13)

    @13 	go to state 88



state 52

    sticky_decl  ->  TK_OPEN KW_STICKY . @14 fluent_list_decl TK_CLOSE   (rule 171)
    sticky_decl  ->  TK_OPEN KW_STICKY . error TK_CLOSE   (rule 172)

    error	shift, and go to state 89

    TK_OPEN	reduce using rule 170 (@14)
    KW_FALSE	reduce using rule 170 (@14)
    KW_SENSING	reduce using rule 170 (@14)

    @14 	go to state 90



state 53

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE . error TK_CLOSE   (rule 177)
    multivalued_variable_type  ->  KW_VARIABLE .   (rule 178)

    error	shift, and go to state 91

    TK_OPEN	reduce using rule 178 (multivalued_variable_type)
    TK_NEW_SYMBOL	reduce using rule 178 (multivalued_variable_type)
    KW_FALSE	reduce using rule 178 (multivalued_variable_type)
    KW_WHEN	reduce using rule 178 (multivalued_variable_type)
    KW_SENSING	reduce using rule 178 (multivalued_variable_type)



state 54

    multivalued_variable_type  ->  KW_OBS_VARIABLE .   (rule 179)

    $default	reduce using rule 179 (multivalued_variable_type)



state 55

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING . sensing TK_CLOSE   (rule 180)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 133 (sensing)

    sensing	go to state 93
    sensing_decl_list	go to state 94
    sensing_decl	go to state 95
    forall_sensing	go to state 96
    such_that_sensing	go to state 97
    sensing_model	go to state 98



state 56

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type . TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE   (rule 174)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type . TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 176)

    TK_OPEN	shift, and go to state 99
    TK_NEW_SYMBOL	shift, and go to state 100



state 57

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 . problem_elements TK_CLOSE   (rule 182)

    $default	reduce using rule 190 (problem_elements)

    problem_elements	go to state 101



state 58

    domain_requires  ->  TK_OPEN KW_REQS error . TK_CLOSE   (rule 30)

    TK_CLOSE	shift, and go to state 102



state 59

    domain_requires  ->  TK_OPEN KW_REQS require_list . TK_CLOSE   (rule 29)
    require_list  ->  require_list . KW_TRANSLATION   (rule 31)
    require_list  ->  require_list . TK_KEYWORD   (rule 32)

    TK_CLOSE	shift, and go to state 103
    TK_KEYWORD	shift, and go to state 104
    KW_TRANSLATION	shift, and go to state 105



state 60

    constant_sym_list  ->  TK_NEW_SYMBOL .   (rule 68)

    $default	reduce using rule 68 (constant_sym_list)



state 61

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list . TK_CLOSE   (rule 59)

    TK_CLOSE	shift, and go to state 106



state 62

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list . TK_CLOSE   (rule 61)

    TK_CLOSE	shift, and go to state 107



state 63

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)
    untyped_constant_list  ->  constant_sym_list .   (rule 66)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 67)

    TK_HYPHEN	shift, and go to state 108
    TK_NEW_SYMBOL	shift, and go to state 109

    $default	reduce using rule 66 (untyped_constant_list)



state 64

    domain_predicates  ->  TK_OPEN KW_PREDS error . TK_CLOSE   (rule 35)

    TK_CLOSE	shift, and go to state 110



state 65

    predicate_decl  ->  TK_OPEN . TK_NEW_SYMBOL param_list TK_CLOSE   (rule 38)
    predicate_decl  ->  TK_OPEN . error TK_CLOSE   (rule 39)

    error	shift, and go to state 111
    TK_NEW_SYMBOL	shift, and go to state 112



state 66

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list . TK_CLOSE   (rule 34)
    predicate_list  ->  predicate_list . predicate_decl   (rule 36)

    TK_OPEN	shift, and go to state 65
    TK_CLOSE	shift, and go to state 113

    predicate_decl	go to state 114



state 67

    predicate_list  ->  predicate_decl .   (rule 37)

    $default	reduce using rule 37 (predicate_list)



state 68

    primitive_type  ->  TK_NEW_SYMBOL .   (rule 58)

    $default	reduce using rule 58 (primitive_type)



state 69

    primitive_type  ->  TK_TYPE_SYMBOL .   (rule 57)

    $default	reduce using rule 57 (primitive_type)



state 70

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list . TK_CLOSE   (rule 51)

    TK_CLOSE	shift, and go to state 115



state 71

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list . TK_CLOSE   (rule 50)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 53)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 55)

    TK_CLOSE	shift, and go to state 116
    TK_HYPHEN	shift, and go to state 117
    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    primitive_type	go to state 118



state 72

    primitive_type_list  ->  primitive_type .   (rule 56)

    $default	reduce using rule 56 (primitive_type_list)



state 73

    action_decl  ->  TK_OPEN KW_ACTION error . TK_CLOSE   (rule 77)

    TK_CLOSE	shift, and go to state 119



state 74

    action_symbol  ->  TK_NEW_SYMBOL .   (rule 23)

    $default	reduce using rule 23 (action_symbol)



state 75

    action_symbol  ->  TK_ACTION_SYMBOL .   (rule 24)

    $default	reduce using rule 24 (action_symbol)



state 76

    action_decl  ->  TK_OPEN KW_ACTION action_symbol . @2 action_elements TK_CLOSE   (rule 76)

    $default	reduce using rule 75 (@2)

    @2  	go to state 120



state 77

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list . TK_CLOSE   (rule 60)

    TK_CLOSE	shift, and go to state 121



state 78

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list . TK_CLOSE   (rule 62)

    TK_CLOSE	shift, and go to state 122



state 79

    sensor_decl  ->  TK_OPEN KW_SENSOR error . TK_CLOSE   (rule 158)

    TK_CLOSE	shift, and go to state 123



state 80

    sensor_symbol  ->  TK_NEW_SYMBOL .   (rule 25)

    $default	reduce using rule 25 (sensor_symbol)



state 81

    sensor_symbol  ->  TK_SENSOR_SYMBOL .   (rule 26)

    $default	reduce using rule 26 (sensor_symbol)



state 82

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol . @12 sensor_elements TK_CLOSE   (rule 157)

    $default	reduce using rule 156 (@12)

    @12 	go to state 124



state 83

    axiom_decl  ->  TK_OPEN KW_AXIOM error . TK_CLOSE   (rule 151)

    TK_CLOSE	shift, and go to state 125



state 84

    axiom_symbol  ->  TK_NEW_SYMBOL .   (rule 27)

    $default	reduce using rule 27 (axiom_symbol)



state 85

    axiom_symbol  ->  TK_AXIOM_SYMBOL .   (rule 28)

    $default	reduce using rule 28 (axiom_symbol)



state 86

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol . @11 axiom_elements TK_CLOSE   (rule 150)

    $default	reduce using rule 149 (@11)

    @11 	go to state 126



state 87

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error . TK_CLOSE   (rule 165)

    TK_CLOSE	shift, and go to state 127



state 88

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 . fluent_list_decl TK_CLOSE   (rule 164)

    TK_OPEN	shift, and go to state 128

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_list_decl	go to state 132
    fluent_decl	go to state 133



state 89

    sticky_decl  ->  TK_OPEN KW_STICKY error . TK_CLOSE   (rule 172)

    TK_CLOSE	shift, and go to state 134



state 90

    sticky_decl  ->  TK_OPEN KW_STICKY @14 . fluent_list_decl TK_CLOSE   (rule 171)

    TK_OPEN	shift, and go to state 128

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_list_decl	go to state 135
    fluent_decl	go to state 133



state 91

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE error . TK_CLOSE   (rule 177)

    TK_CLOSE	shift, and go to state 136



state 92

    forall_sensing  ->  TK_OPEN . KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 141)
    such_that_sensing  ->  TK_OPEN . KW_SUCH_THAT condition sensing_decl_list TK_CLOSE   (rule 142)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE   (rule 143)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 144)
    sensing_model  ->  TK_OPEN . KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE   (rule 145)
    sensing_model  ->  TK_OPEN . KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 146)
    sensing_model  ->  TK_OPEN . KW_VARIABLE error TK_CLOSE   (rule 147)
    sensing_model  ->  TK_OPEN . KW_MODEL_FOR error TK_CLOSE   (rule 148)

    KW_FORALL	shift, and go to state 137
    KW_SUCH_THAT	shift, and go to state 138
    KW_VARIABLE	shift, and go to state 139
    KW_MODEL_FOR	shift, and go to state 140



state 93

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING sensing . TK_CLOSE   (rule 180)

    TK_CLOSE	shift, and go to state 141



state 94

    sensing  ->  sensing_decl_list .   (rule 132)
    sensing_decl_list  ->  sensing_decl_list . sensing_decl   (rule 134)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 132 (sensing)

    sensing_decl	go to state 142
    forall_sensing	go to state 96
    such_that_sensing	go to state 97
    sensing_model	go to state 98



state 95

    sensing_decl_list  ->  sensing_decl .   (rule 135)

    $default	reduce using rule 135 (sensing_decl_list)



state 96

    sensing_decl  ->  forall_sensing .   (rule 137)

    $default	reduce using rule 137 (sensing_decl)



state 97

    sensing_decl  ->  such_that_sensing .   (rule 138)

    $default	reduce using rule 138 (sensing_decl)



state 98

    sensing_decl  ->  sensing_model .   (rule 136)

    $default	reduce using rule 136 (sensing_decl)



state 99

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN . TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 176)

    TK_NEW_SYMBOL	shift, and go to state 143



state 100

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL . @15 fluent_list_decl TK_CLOSE   (rule 174)

    $default	reduce using rule 173 (@15)

    @15 	go to state 144



state 101

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements . TK_CLOSE   (rule 182)
    problem_elements  ->  problem_elements . TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE   (rule 184)
    problem_elements  ->  problem_elements . domain_requires   (rule 185)
    problem_elements  ->  problem_elements . domain_constants   (rule 186)
    problem_elements  ->  problem_elements . initial_state   (rule 187)
    problem_elements  ->  problem_elements . hidden_state   (rule 188)
    problem_elements  ->  problem_elements . goal_spec   (rule 189)

    TK_OPEN	shift, and go to state 145
    TK_CLOSE	shift, and go to state 146

    domain_requires	go to state 147
    domain_constants	go to state 148
    initial_state	go to state 149
    hidden_state	go to state 150
    goal_spec	go to state 151



state 102

    domain_requires  ->  TK_OPEN KW_REQS error TK_CLOSE .   (rule 30)

    $default	reduce using rule 30 (domain_requires)



state 103

    domain_requires  ->  TK_OPEN KW_REQS require_list TK_CLOSE .   (rule 29)

    $default	reduce using rule 29 (domain_requires)



state 104

    require_list  ->  require_list TK_KEYWORD .   (rule 32)

    $default	reduce using rule 32 (require_list)



state 105

    require_list  ->  require_list KW_TRANSLATION .   (rule 31)

    $default	reduce using rule 31 (require_list)



state 106

    domain_constants  ->  TK_OPEN KW_CONSTANTS typed_constant_list TK_CLOSE .   (rule 59)

    $default	reduce using rule 59 (domain_constants)



state 107

    domain_constants  ->  TK_OPEN KW_CONSTANTS untyped_constant_list TK_CLOSE .   (rule 61)

    $default	reduce using rule 61 (domain_constants)



state 108

    typed_constant_list  ->  constant_sym_list TK_HYPHEN . TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)

    TK_TYPE_SYMBOL	shift, and go to state 152



state 109

    constant_sym_list  ->  constant_sym_list TK_NEW_SYMBOL .   (rule 67)

    $default	reduce using rule 67 (constant_sym_list)



state 110

    domain_predicates  ->  TK_OPEN KW_PREDS error TK_CLOSE .   (rule 35)

    $default	reduce using rule 35 (domain_predicates)



state 111

    predicate_decl  ->  TK_OPEN error . TK_CLOSE   (rule 39)

    TK_CLOSE	shift, and go to state 153



state 112

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL . param_list TK_CLOSE   (rule 38)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 156
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 113

    domain_predicates  ->  TK_OPEN KW_PREDS predicate_list TK_CLOSE .   (rule 34)

    $default	reduce using rule 34 (domain_predicates)



state 114

    predicate_list  ->  predicate_list predicate_decl .   (rule 36)

    $default	reduce using rule 36 (predicate_list)



state 115

    domain_types  ->  TK_OPEN KW_TYPES typed_type_list TK_CLOSE .   (rule 51)

    $default	reduce using rule 51 (domain_types)



state 116

    domain_types  ->  TK_OPEN KW_TYPES primitive_type_list TK_CLOSE .   (rule 50)

    $default	reduce using rule 50 (domain_types)



state 117

    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list TK_HYPHEN . TK_NEW_SYMBOL typed_type_list   (rule 53)

    TK_NEW_SYMBOL	shift, and go to state 161
    TK_TYPE_SYMBOL	shift, and go to state 162



state 118

    primitive_type_list  ->  primitive_type_list primitive_type .   (rule 55)

    $default	reduce using rule 55 (primitive_type_list)



state 119

    action_decl  ->  TK_OPEN KW_ACTION error TK_CLOSE .   (rule 77)

    $default	reduce using rule 77 (action_decl)



state 120

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 . action_elements TK_CLOSE   (rule 76)

    $default	reduce using rule 83 (action_elements)

    action_elements	go to state 163



state 121

    domain_constants  ->  TK_OPEN KW_OBJECTS typed_constant_list TK_CLOSE .   (rule 60)

    $default	reduce using rule 60 (domain_constants)



state 122

    domain_constants  ->  TK_OPEN KW_OBJECTS untyped_constant_list TK_CLOSE .   (rule 62)

    $default	reduce using rule 62 (domain_constants)



state 123

    sensor_decl  ->  TK_OPEN KW_SENSOR error TK_CLOSE .   (rule 158)

    $default	reduce using rule 158 (sensor_decl)



state 124

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 . sensor_elements TK_CLOSE   (rule 157)

    $default	reduce using rule 162 (sensor_elements)

    sensor_elements	go to state 164



state 125

    axiom_decl  ->  TK_OPEN KW_AXIOM error TK_CLOSE .   (rule 151)

    $default	reduce using rule 151 (axiom_decl)



state 126

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 . axiom_elements TK_CLOSE   (rule 150)

    $default	reduce using rule 155 (axiom_elements)

    axiom_elements	go to state 165



state 127

    observable_decl  ->  TK_OPEN KW_OBSERVABLE error TK_CLOSE .   (rule 165)

    $default	reduce using rule 165 (observable_decl)



state 128

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 123)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_FORALL	shift, and go to state 168



state 129

    positive_atomic_effect  ->  positive_literal .   (rule 131)

    $default	reduce using rule 131 (positive_atomic_effect)



state 130

    fluent_decl  ->  forall_effect .   (rule 169)

    $default	reduce using rule 169 (fluent_decl)



state 131

    fluent_decl  ->  positive_atomic_effect .   (rule 168)

    $default	reduce using rule 168 (fluent_decl)



state 132

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 fluent_list_decl . TK_CLOSE   (rule 164)
    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 166)

    TK_OPEN	shift, and go to state 128
    TK_CLOSE	shift, and go to state 169

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_decl	go to state 170



state 133

    fluent_list_decl  ->  fluent_decl .   (rule 167)

    $default	reduce using rule 167 (fluent_list_decl)



state 134

    sticky_decl  ->  TK_OPEN KW_STICKY error TK_CLOSE .   (rule 172)

    $default	reduce using rule 172 (sticky_decl)



state 135

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 166)
    sticky_decl  ->  TK_OPEN KW_STICKY @14 fluent_list_decl . TK_CLOSE   (rule 171)

    TK_OPEN	shift, and go to state 128
    TK_CLOSE	shift, and go to state 171

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_decl	go to state 170



state 136

    multivalued_variable_decl  ->  TK_OPEN KW_VARIABLE error TK_CLOSE .   (rule 177)

    $default	reduce using rule 177 (multivalued_variable_decl)



state 137

    forall_sensing  ->  TK_OPEN KW_FORALL . TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 141)

    TK_OPEN	shift, and go to state 172



state 138

    such_that_sensing  ->  TK_OPEN KW_SUCH_THAT . condition sensing_decl_list TK_CLOSE   (rule 142)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 176
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 139

    sensing_model  ->  TK_OPEN KW_VARIABLE . TK_VARNAME_SYMBOL TK_CLOSE   (rule 145)
    sensing_model  ->  TK_OPEN KW_VARIABLE . TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 146)
    sensing_model  ->  TK_OPEN KW_VARIABLE . error TK_CLOSE   (rule 147)

    error	shift, and go to state 186
    TK_OPEN	shift, and go to state 187
    TK_VARNAME_SYMBOL	shift, and go to state 188



state 140

    sensing_model  ->  TK_OPEN KW_MODEL_FOR . TK_VARNAME_SYMBOL literal condition TK_CLOSE   (rule 143)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR . TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 144)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR . error TK_CLOSE   (rule 148)

    error	shift, and go to state 189
    TK_OPEN	shift, and go to state 190
    TK_VARNAME_SYMBOL	shift, and go to state 191



state 141

    domain_default_sensing  ->  TK_OPEN KW_DEFAULT_SENSING sensing TK_CLOSE .   (rule 180)

    $default	reduce using rule 180 (domain_default_sensing)



state 142

    sensing_decl_list  ->  sensing_decl_list sensing_decl .   (rule 134)

    $default	reduce using rule 134 (sensing_decl_list)



state 143

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL . param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 176)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 192
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 144

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 . fluent_list_decl TK_CLOSE   (rule 174)

    TK_OPEN	shift, and go to state 128

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_list_decl	go to state 193
    fluent_decl	go to state 133



state 145

    domain_requires  ->  TK_OPEN . KW_REQS require_list TK_CLOSE   (rule 29)
    domain_requires  ->  TK_OPEN . KW_REQS error TK_CLOSE   (rule 30)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS typed_constant_list TK_CLOSE   (rule 59)
    domain_constants  ->  TK_OPEN . KW_OBJECTS typed_constant_list TK_CLOSE   (rule 60)
    domain_constants  ->  TK_OPEN . KW_CONSTANTS untyped_constant_list TK_CLOSE   (rule 61)
    domain_constants  ->  TK_OPEN . KW_OBJECTS untyped_constant_list TK_CLOSE   (rule 62)
    problem_elements  ->  problem_elements TK_OPEN . KW_FORDOMAIN any_symbol TK_CLOSE   (rule 184)
    initial_state  ->  TK_OPEN . KW_INIT TK_CLOSE   (rule 191)
    initial_state  ->  TK_OPEN . KW_INIT init_elements TK_CLOSE   (rule 192)
    initial_state  ->  TK_OPEN . KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 193)
    hidden_state  ->  TK_OPEN . KW_HIDDEN init_elements TK_CLOSE   (rule 212)
    hidden_state  ->  TK_OPEN . KW_HIDDEN TK_CLOSE   (rule 213)
    goal_spec  ->  TK_OPEN . KW_GOAL condition TK_CLOSE   (rule 214)

    KW_REQS	shift, and go to state 43
    KW_CONSTANTS	shift, and go to state 44
    KW_FORDOMAIN	shift, and go to state 194
    KW_OBJECTS	shift, and go to state 48
    KW_INIT	shift, and go to state 195
    KW_GOAL	shift, and go to state 196
    KW_HIDDEN	shift, and go to state 197



state 146

    pddl_problem  ->  TK_OPEN KW_DEFINE TK_OPEN KW_PROBLEM any_symbol TK_CLOSE @17 problem_elements TK_CLOSE .   (rule 182)

    $default	reduce using rule 182 (pddl_problem)



state 147

    problem_elements  ->  problem_elements domain_requires .   (rule 185)

    $default	reduce using rule 185 (problem_elements)



state 148

    problem_elements  ->  problem_elements domain_constants .   (rule 186)

    $default	reduce using rule 186 (problem_elements)



state 149

    problem_elements  ->  problem_elements initial_state .   (rule 187)

    $default	reduce using rule 187 (problem_elements)



state 150

    problem_elements  ->  problem_elements hidden_state .   (rule 188)

    $default	reduce using rule 188 (problem_elements)



state 151

    problem_elements  ->  problem_elements goal_spec .   (rule 189)

    $default	reduce using rule 189 (problem_elements)



state 152

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL . @1 typed_constant_list   (rule 64)

    $default	reduce using rule 63 (@1)

    @1  	go to state 198



state 153

    predicate_decl  ->  TK_OPEN error TK_CLOSE .   (rule 39)

    $default	reduce using rule 39 (predicate_decl)



state 154

    new_var_symbol  ->  TK_VAR_SYMBOL .   (rule 49)

    $default	reduce using rule 49 (new_var_symbol)



state 155

    new_var_symbol  ->  TK_NEW_VAR_SYMBOL .   (rule 48)

    $default	reduce using rule 48 (new_var_symbol)



state 156

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list . TK_CLOSE   (rule 38)

    TK_CLOSE	shift, and go to state 199



state 157

    param_list  ->  untyped_param_list .   (rule 40)

    $default	reduce using rule 40 (param_list)



state 158

    param_list  ->  typed_param_list .   (rule 41)

    $default	reduce using rule 41 (param_list)



state 159

    untyped_param_list  ->  param_sym_list .   (rule 43)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 45)

    TK_HYPHEN	shift, and go to state 200

    $default	reduce using rule 43 (untyped_param_list)



state 160

    param_sym_list  ->  new_var_symbol . param_sym_list   (rule 46)
    param_sym_list  ->  new_var_symbol .   (rule 47)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 47 (param_sym_list)

    param_sym_list	go to state 201
    new_var_symbol	go to state 160



state 161

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL . typed_type_list   (rule 53)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 202
    primitive_type_list	go to state 203
    primitive_type	go to state 72



state 162

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL . typed_type_list   (rule 52)

    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    $default	reduce using rule 54 (typed_type_list)

    typed_type_list	go to state 204
    primitive_type_list	go to state 203
    primitive_type	go to state 72



state 163

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements . TK_CLOSE   (rule 76)
    action_elements  ->  action_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 78)
    action_elements  ->  action_elements . KW_PRE condition   (rule 79)
    action_elements  ->  action_elements . KW_EFFECT action_effect   (rule 80)
    action_elements  ->  action_elements . KW_OBSERVE positive_atomic_effect_list   (rule 81)
    action_elements  ->  action_elements . KW_SENSING sensing   (rule 82)

    TK_CLOSE	shift, and go to state 205
    KW_ARGS	shift, and go to state 206
    KW_PRE	shift, and go to state 207
    KW_EFFECT	shift, and go to state 208
    KW_OBSERVE	shift, and go to state 209
    KW_SENSING	shift, and go to state 210



state 164

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements . TK_CLOSE   (rule 157)
    sensor_elements  ->  sensor_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 159)
    sensor_elements  ->  sensor_elements . KW_COND condition   (rule 160)
    sensor_elements  ->  sensor_elements . KW_SENSE positive_atomic_effect_list   (rule 161)

    TK_CLOSE	shift, and go to state 211
    KW_ARGS	shift, and go to state 212
    KW_SENSE	shift, and go to state 213
    KW_COND	shift, and go to state 214



state 165

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements . TK_CLOSE   (rule 150)
    axiom_elements  ->  axiom_elements . KW_ARGS TK_OPEN param_list TK_CLOSE   (rule 152)
    axiom_elements  ->  axiom_elements . KW_BODY condition   (rule 153)
    axiom_elements  ->  axiom_elements . KW_HEAD atomic_effect_kw_list   (rule 154)

    TK_CLOSE	shift, and go to state 215
    KW_ARGS	shift, and go to state 216
    KW_BODY	shift, and go to state 217
    KW_HEAD	shift, and go to state 218



state 166

    positive_literal  ->  TK_OPEN TK_EQ . argument_list TK_CLOSE   (rule 96)

    $default	reduce using rule 100 (argument_list)

    argument_list	go to state 219



state 167

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL . argument_list TK_CLOSE   (rule 95)

    $default	reduce using rule 100 (argument_list)

    argument_list	go to state 220



state 168

    forall_effect  ->  TK_OPEN KW_FORALL . TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 123)

    TK_OPEN	shift, and go to state 221



state 169

    observable_decl  ->  TK_OPEN KW_OBSERVABLE @13 fluent_list_decl TK_CLOSE .   (rule 164)

    $default	reduce using rule 164 (observable_decl)



state 170

    fluent_list_decl  ->  fluent_list_decl fluent_decl .   (rule 166)

    $default	reduce using rule 166 (fluent_list_decl)



state 171

    sticky_decl  ->  TK_OPEN KW_STICKY @14 fluent_list_decl TK_CLOSE .   (rule 171)

    $default	reduce using rule 171 (sticky_decl)



state 172

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN . @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 141)

    $default	reduce using rule 139 (@9)

    @9  	go to state 222



state 173

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 97)
    and_condition  ->  TK_OPEN . KW_AND condition_list TK_CLOSE   (rule 101)
    or_condition  ->  TK_OPEN . KW_OR condition_list TK_CLOSE   (rule 102)
    forall_condition  ->  TK_OPEN . KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 105)
    exists_condition  ->  TK_OPEN . KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 108)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_AND	shift, and go to state 223
    KW_OR	shift, and go to state 224
    KW_EXISTS	shift, and go to state 225
    KW_FORALL	shift, and go to state 226
    KW_NOT	shift, and go to state 227



state 174

    constant_condition  ->  KW_TRUE .   (rule 90)

    $default	reduce using rule 90 (constant_condition)



state 175

    constant_condition  ->  KW_FALSE .   (rule 91)

    $default	reduce using rule 91 (constant_condition)



state 176

    such_that_sensing  ->  TK_OPEN KW_SUCH_THAT condition . sensing_decl_list TK_CLOSE   (rule 142)

    TK_OPEN	shift, and go to state 92

    sensing_decl_list	go to state 228
    sensing_decl	go to state 95
    forall_sensing	go to state 96
    such_that_sensing	go to state 97
    sensing_model	go to state 98



state 177

    condition  ->  constant_condition .   (rule 84)

    $default	reduce using rule 84 (condition)



state 178

    condition  ->  single_condition .   (rule 85)

    $default	reduce using rule 85 (condition)



state 179

    single_condition  ->  literal .   (rule 92)

    $default	reduce using rule 92 (single_condition)



state 180

    literal  ->  positive_literal .   (rule 93)

    $default	reduce using rule 93 (literal)



state 181

    literal  ->  negative_literal .   (rule 94)

    $default	reduce using rule 94 (literal)



state 182

    condition  ->  and_condition .   (rule 86)

    $default	reduce using rule 86 (condition)



state 183

    condition  ->  or_condition .   (rule 87)

    $default	reduce using rule 87 (condition)



state 184

    condition  ->  forall_condition .   (rule 88)

    $default	reduce using rule 88 (condition)



state 185

    condition  ->  exists_condition .   (rule 89)

    $default	reduce using rule 89 (condition)



state 186

    sensing_model  ->  TK_OPEN KW_VARIABLE error . TK_CLOSE   (rule 147)

    TK_CLOSE	shift, and go to state 229



state 187

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN . TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE   (rule 146)

    TK_VARNAME_SYMBOL	shift, and go to state 230



state 188

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL . TK_CLOSE   (rule 145)

    TK_CLOSE	shift, and go to state 231



state 189

    sensing_model  ->  TK_OPEN KW_MODEL_FOR error . TK_CLOSE   (rule 148)

    TK_CLOSE	shift, and go to state 232



state 190

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN . TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE   (rule 144)

    TK_VARNAME_SYMBOL	shift, and go to state 233



state 191

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL . literal condition TK_CLOSE   (rule 143)

    TK_OPEN	shift, and go to state 234

    literal	go to state 235
    positive_literal	go to state 180
    negative_literal	go to state 181



state 192

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list . TK_CLOSE @16 fluent_list_decl TK_CLOSE   (rule 176)

    TK_CLOSE	shift, and go to state 236



state 193

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 166)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl . TK_CLOSE   (rule 174)

    TK_OPEN	shift, and go to state 128
    TK_CLOSE	shift, and go to state 237

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_decl	go to state 170



state 194

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN . any_symbol TK_CLOSE   (rule 184)

    TK_NEW_SYMBOL	shift, and go to state 13
    TK_OBJ_SYMBOL	shift, and go to state 14
    TK_TYPE_SYMBOL	shift, and go to state 15
    TK_PRED_SYMBOL	shift, and go to state 16
    TK_VAR_SYMBOL	shift, and go to state 17
    TK_ACTION_SYMBOL	shift, and go to state 18
    TK_AXIOM_SYMBOL	shift, and go to state 19
    TK_SENSOR_SYMBOL	shift, and go to state 20
    TK_MISC_SYMBOL	shift, and go to state 21

    any_symbol	go to state 238



state 195

    initial_state  ->  TK_OPEN KW_INIT . TK_CLOSE   (rule 191)
    initial_state  ->  TK_OPEN KW_INIT . init_elements TK_CLOSE   (rule 192)
    initial_state  ->  TK_OPEN KW_INIT . TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 193)

    TK_OPEN	shift, and go to state 239
    TK_CLOSE	shift, and go to state 240

    literal	go to state 241
    positive_literal	go to state 180
    negative_literal	go to state 181
    init_elements	go to state 242
    single_init_element	go to state 243
    at_least_one_invariant	go to state 244
    at_most_one_invariant	go to state 245
    exactly_one_invariant	go to state 246
    invariant	go to state 247
    clause	go to state 248
    oneof	go to state 249
    unknown	go to state 250



state 196

    goal_spec  ->  TK_OPEN KW_GOAL . condition TK_CLOSE   (rule 214)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 251
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 197

    hidden_state  ->  TK_OPEN KW_HIDDEN . init_elements TK_CLOSE   (rule 212)
    hidden_state  ->  TK_OPEN KW_HIDDEN . TK_CLOSE   (rule 213)

    TK_OPEN	shift, and go to state 252
    TK_CLOSE	shift, and go to state 253

    literal	go to state 241
    positive_literal	go to state 180
    negative_literal	go to state 181
    init_elements	go to state 254
    single_init_element	go to state 243
    at_least_one_invariant	go to state 244
    at_most_one_invariant	go to state 245
    exactly_one_invariant	go to state 246
    invariant	go to state 247
    clause	go to state 248
    oneof	go to state 249
    unknown	go to state 250



state 198

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 . typed_constant_list   (rule 64)

    TK_NEW_SYMBOL	shift, and go to state 60

    $default	reduce using rule 65 (typed_constant_list)

    typed_constant_list	go to state 255
    constant_sym_list	go to state 256



state 199

    predicate_decl  ->  TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE .   (rule 38)

    $default	reduce using rule 38 (predicate_decl)



state 200

    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list TK_HYPHEN . TK_TYPE_SYMBOL   (rule 45)

    TK_TYPE_SYMBOL	shift, and go to state 257



state 201

    param_sym_list  ->  new_var_symbol param_sym_list .   (rule 46)

    $default	reduce using rule 46 (param_sym_list)



state 202

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_NEW_SYMBOL typed_type_list .   (rule 53)

    $default	reduce using rule 53 (typed_type_list)



state 203

    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_TYPE_SYMBOL typed_type_list   (rule 52)
    typed_type_list  ->  primitive_type_list . TK_HYPHEN TK_NEW_SYMBOL typed_type_list   (rule 53)
    primitive_type_list  ->  primitive_type_list . primitive_type   (rule 55)

    TK_HYPHEN	shift, and go to state 117
    TK_NEW_SYMBOL	shift, and go to state 68
    TK_TYPE_SYMBOL	shift, and go to state 69

    primitive_type	go to state 118



state 204

    typed_type_list  ->  primitive_type_list TK_HYPHEN TK_TYPE_SYMBOL typed_type_list .   (rule 52)

    $default	reduce using rule 52 (typed_type_list)



state 205

    action_decl  ->  TK_OPEN KW_ACTION action_symbol @2 action_elements TK_CLOSE .   (rule 76)

    $default	reduce using rule 76 (action_decl)



state 206

    action_elements  ->  action_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 78)

    TK_OPEN	shift, and go to state 258



state 207

    action_elements  ->  action_elements KW_PRE . condition   (rule 79)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 259
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 208

    action_elements  ->  action_elements KW_EFFECT . action_effect   (rule 80)

    TK_OPEN	shift, and go to state 260

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    action_effect	go to state 262
    single_action_effect	go to state 263
    conditional_effect	go to state 264
    forall_effect	go to state 265
    atomic_effect	go to state 266



state 209

    action_elements  ->  action_elements KW_OBSERVE . positive_atomic_effect_list   (rule 81)

    TK_OPEN	shift, and go to state 267

    positive_literal	go to state 129
    positive_atomic_effect_list	go to state 268
    positive_atomic_effect	go to state 269



state 210

    action_elements  ->  action_elements KW_SENSING . sensing   (rule 82)

    TK_OPEN	shift, and go to state 92

    $default	reduce using rule 133 (sensing)

    sensing	go to state 270
    sensing_decl_list	go to state 94
    sensing_decl	go to state 95
    forall_sensing	go to state 96
    such_that_sensing	go to state 97
    sensing_model	go to state 98



state 211

    sensor_decl  ->  TK_OPEN KW_SENSOR sensor_symbol @12 sensor_elements TK_CLOSE .   (rule 157)

    $default	reduce using rule 157 (sensor_decl)



state 212

    sensor_elements  ->  sensor_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 159)

    TK_OPEN	shift, and go to state 271



state 213

    sensor_elements  ->  sensor_elements KW_SENSE . positive_atomic_effect_list   (rule 161)

    TK_OPEN	shift, and go to state 267

    positive_literal	go to state 129
    positive_atomic_effect_list	go to state 272
    positive_atomic_effect	go to state 269



state 214

    sensor_elements  ->  sensor_elements KW_COND . condition   (rule 160)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 273
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 215

    axiom_decl  ->  TK_OPEN KW_AXIOM axiom_symbol @11 axiom_elements TK_CLOSE .   (rule 150)

    $default	reduce using rule 150 (axiom_decl)



state 216

    axiom_elements  ->  axiom_elements KW_ARGS . TK_OPEN param_list TK_CLOSE   (rule 152)

    TK_OPEN	shift, and go to state 274



state 217

    axiom_elements  ->  axiom_elements KW_BODY . condition   (rule 153)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 275
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 218

    axiom_elements  ->  axiom_elements KW_HEAD . atomic_effect_kw_list   (rule 154)

    TK_OPEN	shift, and go to state 276

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    atomic_effect_kw_list	go to state 277
    atomic_effect	go to state 278



state 219

    positive_literal  ->  TK_OPEN TK_EQ argument_list . TK_CLOSE   (rule 96)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 98)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 99)

    TK_CLOSE	shift, and go to state 279
    TK_OBJ_SYMBOL	shift, and go to state 280
    TK_VAR_SYMBOL	shift, and go to state 281



state 220

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list . TK_CLOSE   (rule 95)
    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 98)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 99)

    TK_CLOSE	shift, and go to state 282
    TK_OBJ_SYMBOL	shift, and go to state 280
    TK_VAR_SYMBOL	shift, and go to state 281



state 221

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN . @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 123)

    $default	reduce using rule 121 (@7)

    @7  	go to state 283



state 222

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 . param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 141)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 284
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 223

    and_condition  ->  TK_OPEN KW_AND . condition_list TK_CLOSE   (rule 101)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 285
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185
    condition_list	go to state 286



state 224

    or_condition  ->  TK_OPEN KW_OR . condition_list TK_CLOSE   (rule 102)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 285
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185
    condition_list	go to state 287



state 225

    exists_condition  ->  TK_OPEN KW_EXISTS . TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 108)

    TK_OPEN	shift, and go to state 288



state 226

    forall_condition  ->  TK_OPEN KW_FORALL . TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 105)

    TK_OPEN	shift, and go to state 289



state 227

    negative_literal  ->  TK_OPEN KW_NOT . positive_literal TK_CLOSE   (rule 97)

    TK_OPEN	shift, and go to state 267

    positive_literal	go to state 290



state 228

    sensing_decl_list  ->  sensing_decl_list . sensing_decl   (rule 134)
    such_that_sensing  ->  TK_OPEN KW_SUCH_THAT condition sensing_decl_list . TK_CLOSE   (rule 142)

    TK_OPEN	shift, and go to state 92
    TK_CLOSE	shift, and go to state 291

    sensing_decl	go to state 142
    forall_sensing	go to state 96
    such_that_sensing	go to state 97
    sensing_model	go to state 98



state 229

    sensing_model  ->  TK_OPEN KW_VARIABLE error TK_CLOSE .   (rule 147)

    $default	reduce using rule 147 (sensing_model)



state 230

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL . argument_list TK_CLOSE TK_CLOSE   (rule 146)

    $default	reduce using rule 100 (argument_list)

    argument_list	go to state 292



state 231

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_VARNAME_SYMBOL TK_CLOSE .   (rule 145)

    $default	reduce using rule 145 (sensing_model)



state 232

    sensing_model  ->  TK_OPEN KW_MODEL_FOR error TK_CLOSE .   (rule 148)

    $default	reduce using rule 148 (sensing_model)



state 233

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL . argument_list TK_CLOSE literal condition TK_CLOSE   (rule 144)

    $default	reduce using rule 100 (argument_list)

    argument_list	go to state 293



state 234

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 97)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_NOT	shift, and go to state 227



state 235

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal . condition TK_CLOSE   (rule 143)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 294
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 236

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE . @16 fluent_list_decl TK_CLOSE   (rule 176)

    $default	reduce using rule 175 (@16)

    @16 	go to state 295



state 237

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_NEW_SYMBOL @15 fluent_list_decl TK_CLOSE .   (rule 174)

    $default	reduce using rule 174 (multivalued_variable_decl)



state 238

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol . TK_CLOSE   (rule 184)

    TK_CLOSE	shift, and go to state 296



state 239

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 97)
    initial_state  ->  TK_OPEN KW_INIT TK_OPEN . KW_AND init_elements TK_CLOSE TK_CLOSE   (rule 193)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT single_condition_list TK_CLOSE   (rule 201)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE single_condition_list TK_CLOSE   (rule 202)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE single_condition_list TK_CLOSE   (rule 203)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE single_condition_list TK_CLOSE   (rule 204)
    clause  ->  TK_OPEN . KW_OR single_condition_list TK_CLOSE   (rule 208)
    oneof  ->  TK_OPEN . KW_ONEOF single_condition_list TK_CLOSE   (rule 210)
    unknown  ->  TK_OPEN . KW_UNKNOWN positive_literal TK_CLOSE   (rule 211)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_AND	shift, and go to state 297
    KW_OR	shift, and go to state 298
    KW_NOT	shift, and go to state 227
    KW_ONEOF	shift, and go to state 299
    KW_UNKNOWN	shift, and go to state 300
    KW_INVARIANT	shift, and go to state 301
    KW_AT_LEAST_ONE	shift, and go to state 302
    KW_AT_MOST_ONE	shift, and go to state 303
    KW_EXACTLY_ONE	shift, and go to state 304



state 240

    initial_state  ->  TK_OPEN KW_INIT TK_CLOSE .   (rule 191)

    $default	reduce using rule 191 (initial_state)



state 241

    single_init_element  ->  literal .   (rule 196)

    $default	reduce using rule 196 (single_init_element)



state 242

    initial_state  ->  TK_OPEN KW_INIT init_elements . TK_CLOSE   (rule 192)
    init_elements  ->  init_elements . single_init_element   (rule 194)

    TK_OPEN	shift, and go to state 252
    TK_CLOSE	shift, and go to state 305

    literal	go to state 241
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_init_element	go to state 306
    at_least_one_invariant	go to state 244
    at_most_one_invariant	go to state 245
    exactly_one_invariant	go to state 246
    invariant	go to state 247
    clause	go to state 248
    oneof	go to state 249
    unknown	go to state 250



state 243

    init_elements  ->  single_init_element .   (rule 195)

    $default	reduce using rule 195 (init_elements)



state 244

    invariant  ->  at_least_one_invariant .   (rule 205)

    $default	reduce using rule 205 (invariant)



state 245

    invariant  ->  at_most_one_invariant .   (rule 206)

    $default	reduce using rule 206 (invariant)



state 246

    invariant  ->  exactly_one_invariant .   (rule 207)

    $default	reduce using rule 207 (invariant)



state 247

    single_init_element  ->  invariant .   (rule 197)

    $default	reduce using rule 197 (single_init_element)



state 248

    single_init_element  ->  clause .   (rule 198)

    $default	reduce using rule 198 (single_init_element)



state 249

    single_init_element  ->  oneof .   (rule 199)

    $default	reduce using rule 199 (single_init_element)



state 250

    single_init_element  ->  unknown .   (rule 200)

    $default	reduce using rule 200 (single_init_element)



state 251

    goal_spec  ->  TK_OPEN KW_GOAL condition . TK_CLOSE   (rule 214)

    TK_CLOSE	shift, and go to state 307



state 252

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 97)
    at_least_one_invariant  ->  TK_OPEN . KW_INVARIANT single_condition_list TK_CLOSE   (rule 201)
    at_least_one_invariant  ->  TK_OPEN . KW_AT_LEAST_ONE single_condition_list TK_CLOSE   (rule 202)
    at_most_one_invariant  ->  TK_OPEN . KW_AT_MOST_ONE single_condition_list TK_CLOSE   (rule 203)
    exactly_one_invariant  ->  TK_OPEN . KW_EXACTLY_ONE single_condition_list TK_CLOSE   (rule 204)
    clause  ->  TK_OPEN . KW_OR single_condition_list TK_CLOSE   (rule 208)
    oneof  ->  TK_OPEN . KW_ONEOF single_condition_list TK_CLOSE   (rule 210)
    unknown  ->  TK_OPEN . KW_UNKNOWN positive_literal TK_CLOSE   (rule 211)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_OR	shift, and go to state 298
    KW_NOT	shift, and go to state 227
    KW_ONEOF	shift, and go to state 299
    KW_UNKNOWN	shift, and go to state 300
    KW_INVARIANT	shift, and go to state 301
    KW_AT_LEAST_ONE	shift, and go to state 302
    KW_AT_MOST_ONE	shift, and go to state 303
    KW_EXACTLY_ONE	shift, and go to state 304



state 253

    hidden_state  ->  TK_OPEN KW_HIDDEN TK_CLOSE .   (rule 213)

    $default	reduce using rule 213 (hidden_state)



state 254

    init_elements  ->  init_elements . single_init_element   (rule 194)
    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements . TK_CLOSE   (rule 212)

    TK_OPEN	shift, and go to state 252
    TK_CLOSE	shift, and go to state 308

    literal	go to state 241
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_init_element	go to state 306
    at_least_one_invariant	go to state 244
    at_most_one_invariant	go to state 245
    exactly_one_invariant	go to state 246
    invariant	go to state 247
    clause	go to state 248
    oneof	go to state 249
    unknown	go to state 250



state 255

    typed_constant_list  ->  constant_sym_list TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list .   (rule 64)

    $default	reduce using rule 64 (typed_constant_list)



state 256

    typed_constant_list  ->  constant_sym_list . TK_HYPHEN TK_TYPE_SYMBOL @1 typed_constant_list   (rule 64)
    constant_sym_list  ->  constant_sym_list . TK_NEW_SYMBOL   (rule 67)

    TK_HYPHEN	shift, and go to state 108
    TK_NEW_SYMBOL	shift, and go to state 109



state 257

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL . typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL .   (rule 45)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 45 (typed_param_list)

    typed_param_list	go to state 309
    param_sym_list	go to state 310
    new_var_symbol	go to state 160



state 258

    action_elements  ->  action_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 78)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 311
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 259

    action_elements  ->  action_elements KW_PRE condition .   (rule 79)

    $default	reduce using rule 79 (action_elements)



state 260

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 97)
    action_effect  ->  TK_OPEN . KW_AND action_effect_list TK_CLOSE   (rule 114)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 120)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 123)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_AND	shift, and go to state 312
    KW_FORALL	shift, and go to state 168
    KW_NOT	shift, and go to state 227
    KW_WHEN	shift, and go to state 313



state 261

    atomic_effect  ->  literal .   (rule 130)

    $default	reduce using rule 130 (atomic_effect)



state 262

    action_elements  ->  action_elements KW_EFFECT action_effect .   (rule 80)

    $default	reduce using rule 80 (action_elements)



state 263

    action_effect  ->  single_action_effect .   (rule 113)

    $default	reduce using rule 113 (action_effect)



state 264

    single_action_effect  ->  conditional_effect .   (rule 118)

    $default	reduce using rule 118 (single_action_effect)



state 265

    single_action_effect  ->  forall_effect .   (rule 119)

    $default	reduce using rule 119 (single_action_effect)



state 266

    single_action_effect  ->  atomic_effect .   (rule 117)

    $default	reduce using rule 117 (single_action_effect)



state 267

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167



state 268

    action_elements  ->  action_elements KW_OBSERVE positive_atomic_effect_list .   (rule 81)
    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 128)

    TK_OPEN	shift, and go to state 267

    $default	reduce using rule 81 (action_elements)

    positive_literal	go to state 129
    positive_atomic_effect	go to state 314



state 269

    positive_atomic_effect_list  ->  positive_atomic_effect .   (rule 129)

    $default	reduce using rule 129 (positive_atomic_effect_list)



state 270

    action_elements  ->  action_elements KW_SENSING sensing .   (rule 82)

    $default	reduce using rule 82 (action_elements)



state 271

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 159)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 315
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 272

    positive_atomic_effect_list  ->  positive_atomic_effect_list . positive_atomic_effect   (rule 128)
    sensor_elements  ->  sensor_elements KW_SENSE positive_atomic_effect_list .   (rule 161)

    TK_OPEN	shift, and go to state 267

    $default	reduce using rule 161 (sensor_elements)

    positive_literal	go to state 129
    positive_atomic_effect	go to state 314



state 273

    sensor_elements  ->  sensor_elements KW_COND condition .   (rule 160)

    $default	reduce using rule 160 (sensor_elements)



state 274

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN . param_list TK_CLOSE   (rule 152)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 316
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 275

    axiom_elements  ->  axiom_elements KW_BODY condition .   (rule 153)

    $default	reduce using rule 153 (axiom_elements)



state 276

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 97)
    atomic_effect_kw_list  ->  TK_OPEN . KW_AND atomic_effect_list TK_CLOSE   (rule 124)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_AND	shift, and go to state 317
    KW_NOT	shift, and go to state 227



state 277

    axiom_elements  ->  axiom_elements KW_HEAD atomic_effect_kw_list .   (rule 154)

    $default	reduce using rule 154 (axiom_elements)



state 278

    atomic_effect_kw_list  ->  atomic_effect .   (rule 125)

    $default	reduce using rule 125 (atomic_effect_kw_list)



state 279

    positive_literal  ->  TK_OPEN TK_EQ argument_list TK_CLOSE .   (rule 96)

    $default	reduce using rule 96 (positive_literal)



state 280

    argument_list  ->  argument_list TK_OBJ_SYMBOL .   (rule 99)

    $default	reduce using rule 99 (argument_list)



state 281

    argument_list  ->  argument_list TK_VAR_SYMBOL .   (rule 98)

    $default	reduce using rule 98 (argument_list)



state 282

    positive_literal  ->  TK_OPEN TK_PRED_SYMBOL argument_list TK_CLOSE .   (rule 95)

    $default	reduce using rule 95 (positive_literal)



state 283

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 . param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 123)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 318
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 284

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list . TK_CLOSE @10 sensing_decl_list TK_CLOSE   (rule 141)

    TK_CLOSE	shift, and go to state 319



state 285

    condition_list  ->  condition .   (rule 112)

    $default	reduce using rule 112 (condition_list)



state 286

    and_condition  ->  TK_OPEN KW_AND condition_list . TK_CLOSE   (rule 101)
    condition_list  ->  condition_list . condition   (rule 111)

    TK_OPEN	shift, and go to state 173
    TK_CLOSE	shift, and go to state 320
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 321
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 287

    or_condition  ->  TK_OPEN KW_OR condition_list . TK_CLOSE   (rule 102)
    condition_list  ->  condition_list . condition   (rule 111)

    TK_OPEN	shift, and go to state 173
    TK_CLOSE	shift, and go to state 322
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 321
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 288

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN . @5 param_list TK_CLOSE @6 condition TK_CLOSE   (rule 108)

    $default	reduce using rule 106 (@5)

    @5  	go to state 323



state 289

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN . @3 param_list TK_CLOSE @4 condition TK_CLOSE   (rule 105)

    $default	reduce using rule 103 (@3)

    @3  	go to state 324



state 290

    negative_literal  ->  TK_OPEN KW_NOT positive_literal . TK_CLOSE   (rule 97)

    TK_CLOSE	shift, and go to state 325



state 291

    such_that_sensing  ->  TK_OPEN KW_SUCH_THAT condition sensing_decl_list TK_CLOSE .   (rule 142)

    $default	reduce using rule 142 (such_that_sensing)



state 292

    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 98)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 99)
    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list . TK_CLOSE TK_CLOSE   (rule 146)

    TK_CLOSE	shift, and go to state 326
    TK_OBJ_SYMBOL	shift, and go to state 280
    TK_VAR_SYMBOL	shift, and go to state 281



state 293

    argument_list  ->  argument_list . TK_VAR_SYMBOL   (rule 98)
    argument_list  ->  argument_list . TK_OBJ_SYMBOL   (rule 99)
    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list . TK_CLOSE literal condition TK_CLOSE   (rule 144)

    TK_CLOSE	shift, and go to state 327
    TK_OBJ_SYMBOL	shift, and go to state 280
    TK_VAR_SYMBOL	shift, and go to state 281



state 294

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition . TK_CLOSE   (rule 143)

    TK_CLOSE	shift, and go to state 328



state 295

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 . fluent_list_decl TK_CLOSE   (rule 176)

    TK_OPEN	shift, and go to state 128

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_list_decl	go to state 329
    fluent_decl	go to state 133



state 296

    problem_elements  ->  problem_elements TK_OPEN KW_FORDOMAIN any_symbol TK_CLOSE .   (rule 184)

    $default	reduce using rule 184 (problem_elements)



state 297

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND . init_elements TK_CLOSE TK_CLOSE   (rule 193)

    TK_OPEN	shift, and go to state 252

    literal	go to state 241
    positive_literal	go to state 180
    negative_literal	go to state 181
    init_elements	go to state 330
    single_init_element	go to state 243
    at_least_one_invariant	go to state 244
    at_most_one_invariant	go to state 245
    exactly_one_invariant	go to state 246
    invariant	go to state 247
    clause	go to state 248
    oneof	go to state 249
    unknown	go to state 250



state 298

    clause  ->  TK_OPEN KW_OR . single_condition_list TK_CLOSE   (rule 208)

    TK_OPEN	shift, and go to state 234

    single_condition	go to state 331
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_condition_list	go to state 332



state 299

    oneof  ->  TK_OPEN KW_ONEOF . single_condition_list TK_CLOSE   (rule 210)

    TK_OPEN	shift, and go to state 234

    single_condition	go to state 331
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_condition_list	go to state 333



state 300

    unknown  ->  TK_OPEN KW_UNKNOWN . positive_literal TK_CLOSE   (rule 211)

    TK_OPEN	shift, and go to state 267

    positive_literal	go to state 334



state 301

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT . single_condition_list TK_CLOSE   (rule 201)

    TK_OPEN	shift, and go to state 234

    single_condition	go to state 331
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_condition_list	go to state 335



state 302

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE . single_condition_list TK_CLOSE   (rule 202)

    TK_OPEN	shift, and go to state 234

    single_condition	go to state 331
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_condition_list	go to state 336



state 303

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE . single_condition_list TK_CLOSE   (rule 203)

    TK_OPEN	shift, and go to state 234

    single_condition	go to state 331
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_condition_list	go to state 337



state 304

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE . single_condition_list TK_CLOSE   (rule 204)

    TK_OPEN	shift, and go to state 234

    single_condition	go to state 331
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_condition_list	go to state 338



state 305

    initial_state  ->  TK_OPEN KW_INIT init_elements TK_CLOSE .   (rule 192)

    $default	reduce using rule 192 (initial_state)



state 306

    init_elements  ->  init_elements single_init_element .   (rule 194)

    $default	reduce using rule 194 (init_elements)



state 307

    goal_spec  ->  TK_OPEN KW_GOAL condition TK_CLOSE .   (rule 214)

    $default	reduce using rule 214 (goal_spec)



state 308

    hidden_state  ->  TK_OPEN KW_HIDDEN init_elements TK_CLOSE .   (rule 212)

    $default	reduce using rule 212 (hidden_state)



state 309

    typed_param_list  ->  param_sym_list TK_HYPHEN TK_TYPE_SYMBOL typed_param_list .   (rule 44)

    $default	reduce using rule 44 (typed_param_list)



state 310

    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL typed_param_list   (rule 44)
    typed_param_list  ->  param_sym_list . TK_HYPHEN TK_TYPE_SYMBOL   (rule 45)

    TK_HYPHEN	shift, and go to state 200



state 311

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 78)

    TK_CLOSE	shift, and go to state 339



state 312

    action_effect  ->  TK_OPEN KW_AND . action_effect_list TK_CLOSE   (rule 114)

    TK_OPEN	shift, and go to state 340

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    action_effect_list	go to state 341
    single_action_effect	go to state 342
    conditional_effect	go to state 264
    forall_effect	go to state 265
    atomic_effect	go to state 266



state 313

    conditional_effect  ->  TK_OPEN KW_WHEN . condition atomic_effect_kw_list TK_CLOSE   (rule 120)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 343
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 314

    positive_atomic_effect_list  ->  positive_atomic_effect_list positive_atomic_effect .   (rule 128)

    $default	reduce using rule 128 (positive_atomic_effect_list)



state 315

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 159)

    TK_CLOSE	shift, and go to state 344



state 316

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list . TK_CLOSE   (rule 152)

    TK_CLOSE	shift, and go to state 345



state 317

    atomic_effect_kw_list  ->  TK_OPEN KW_AND . atomic_effect_list TK_CLOSE   (rule 124)

    TK_OPEN	shift, and go to state 234

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    atomic_effect_list	go to state 346
    atomic_effect	go to state 347



state 318

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list . TK_CLOSE @8 action_effect TK_CLOSE   (rule 123)

    TK_CLOSE	shift, and go to state 348



state 319

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE . @10 sensing_decl_list TK_CLOSE   (rule 141)

    $default	reduce using rule 140 (@10)

    @10 	go to state 349



state 320

    and_condition  ->  TK_OPEN KW_AND condition_list TK_CLOSE .   (rule 101)

    $default	reduce using rule 101 (and_condition)



state 321

    condition_list  ->  condition_list condition .   (rule 111)

    $default	reduce using rule 111 (condition_list)



state 322

    or_condition  ->  TK_OPEN KW_OR condition_list TK_CLOSE .   (rule 102)

    $default	reduce using rule 102 (or_condition)



state 323

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 . param_list TK_CLOSE @6 condition TK_CLOSE   (rule 108)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 350
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 324

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 . param_list TK_CLOSE @4 condition TK_CLOSE   (rule 105)

    TK_VAR_SYMBOL	shift, and go to state 154
    TK_NEW_VAR_SYMBOL	shift, and go to state 155

    $default	reduce using rule 42 (param_list)

    param_list	go to state 351
    untyped_param_list	go to state 157
    typed_param_list	go to state 158
    param_sym_list	go to state 159
    new_var_symbol	go to state 160



state 325

    negative_literal  ->  TK_OPEN KW_NOT positive_literal TK_CLOSE .   (rule 97)

    $default	reduce using rule 97 (negative_literal)



state 326

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE . TK_CLOSE   (rule 146)

    TK_CLOSE	shift, and go to state 352



state 327

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE . literal condition TK_CLOSE   (rule 144)

    TK_OPEN	shift, and go to state 234

    literal	go to state 353
    positive_literal	go to state 180
    negative_literal	go to state 181



state 328

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_VARNAME_SYMBOL literal condition TK_CLOSE .   (rule 143)

    $default	reduce using rule 143 (sensing_model)



state 329

    fluent_list_decl  ->  fluent_list_decl . fluent_decl   (rule 166)
    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl . TK_CLOSE   (rule 176)

    TK_OPEN	shift, and go to state 128
    TK_CLOSE	shift, and go to state 354

    positive_literal	go to state 129
    forall_effect	go to state 130
    positive_atomic_effect	go to state 131
    fluent_decl	go to state 170



state 330

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements . TK_CLOSE TK_CLOSE   (rule 193)
    init_elements  ->  init_elements . single_init_element   (rule 194)

    TK_OPEN	shift, and go to state 252
    TK_CLOSE	shift, and go to state 355

    literal	go to state 241
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_init_element	go to state 306
    at_least_one_invariant	go to state 244
    at_most_one_invariant	go to state 245
    exactly_one_invariant	go to state 246
    invariant	go to state 247
    clause	go to state 248
    oneof	go to state 249
    unknown	go to state 250



state 331

    single_condition_list  ->  single_condition .   (rule 110)

    $default	reduce using rule 110 (single_condition_list)



state 332

    single_condition_list  ->  single_condition_list . single_condition   (rule 109)
    clause  ->  TK_OPEN KW_OR single_condition_list . TK_CLOSE   (rule 208)

    TK_OPEN	shift, and go to state 234
    TK_CLOSE	shift, and go to state 356

    single_condition	go to state 357
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181



state 333

    single_condition_list  ->  single_condition_list . single_condition   (rule 109)
    oneof  ->  TK_OPEN KW_ONEOF single_condition_list . TK_CLOSE   (rule 210)

    TK_OPEN	shift, and go to state 234
    TK_CLOSE	shift, and go to state 358

    single_condition	go to state 357
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181



state 334

    unknown  ->  TK_OPEN KW_UNKNOWN positive_literal . TK_CLOSE   (rule 211)

    TK_CLOSE	shift, and go to state 359



state 335

    single_condition_list  ->  single_condition_list . single_condition   (rule 109)
    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT single_condition_list . TK_CLOSE   (rule 201)

    TK_OPEN	shift, and go to state 234
    TK_CLOSE	shift, and go to state 360

    single_condition	go to state 357
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181



state 336

    single_condition_list  ->  single_condition_list . single_condition   (rule 109)
    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE single_condition_list . TK_CLOSE   (rule 202)

    TK_OPEN	shift, and go to state 234
    TK_CLOSE	shift, and go to state 361

    single_condition	go to state 357
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181



state 337

    single_condition_list  ->  single_condition_list . single_condition   (rule 109)
    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE single_condition_list . TK_CLOSE   (rule 203)

    TK_OPEN	shift, and go to state 234
    TK_CLOSE	shift, and go to state 362

    single_condition	go to state 357
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181



state 338

    single_condition_list  ->  single_condition_list . single_condition   (rule 109)
    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE single_condition_list . TK_CLOSE   (rule 204)

    TK_OPEN	shift, and go to state 234
    TK_CLOSE	shift, and go to state 363

    single_condition	go to state 357
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181



state 339

    action_elements  ->  action_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 78)

    $default	reduce using rule 78 (action_elements)



state 340

    positive_literal  ->  TK_OPEN . TK_PRED_SYMBOL argument_list TK_CLOSE   (rule 95)
    positive_literal  ->  TK_OPEN . TK_EQ argument_list TK_CLOSE   (rule 96)
    negative_literal  ->  TK_OPEN . KW_NOT positive_literal TK_CLOSE   (rule 97)
    conditional_effect  ->  TK_OPEN . KW_WHEN condition atomic_effect_kw_list TK_CLOSE   (rule 120)
    forall_effect  ->  TK_OPEN . KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE   (rule 123)

    TK_EQ	shift, and go to state 166
    TK_PRED_SYMBOL	shift, and go to state 167
    KW_FORALL	shift, and go to state 168
    KW_NOT	shift, and go to state 227
    KW_WHEN	shift, and go to state 313



state 341

    action_effect  ->  TK_OPEN KW_AND action_effect_list . TK_CLOSE   (rule 114)
    action_effect_list  ->  action_effect_list . single_action_effect   (rule 115)

    TK_OPEN	shift, and go to state 340
    TK_CLOSE	shift, and go to state 364

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    single_action_effect	go to state 365
    conditional_effect	go to state 264
    forall_effect	go to state 265
    atomic_effect	go to state 266



state 342

    action_effect_list  ->  single_action_effect .   (rule 116)

    $default	reduce using rule 116 (action_effect_list)



state 343

    conditional_effect  ->  TK_OPEN KW_WHEN condition . atomic_effect_kw_list TK_CLOSE   (rule 120)

    TK_OPEN	shift, and go to state 276

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    atomic_effect_kw_list	go to state 366
    atomic_effect	go to state 278



state 344

    sensor_elements  ->  sensor_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 159)

    $default	reduce using rule 159 (sensor_elements)



state 345

    axiom_elements  ->  axiom_elements KW_ARGS TK_OPEN param_list TK_CLOSE .   (rule 152)

    $default	reduce using rule 152 (axiom_elements)



state 346

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list . TK_CLOSE   (rule 124)
    atomic_effect_list  ->  atomic_effect_list . atomic_effect   (rule 126)

    TK_OPEN	shift, and go to state 234
    TK_CLOSE	shift, and go to state 367

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    atomic_effect	go to state 368



state 347

    atomic_effect_list  ->  atomic_effect .   (rule 127)

    $default	reduce using rule 127 (atomic_effect_list)



state 348

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE . @8 action_effect TK_CLOSE   (rule 123)

    $default	reduce using rule 122 (@8)

    @8  	go to state 369



state 349

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 . sensing_decl_list TK_CLOSE   (rule 141)

    TK_OPEN	shift, and go to state 92

    sensing_decl_list	go to state 370
    sensing_decl	go to state 95
    forall_sensing	go to state 96
    such_that_sensing	go to state 97
    sensing_model	go to state 98



state 350

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list . TK_CLOSE @6 condition TK_CLOSE   (rule 108)

    TK_CLOSE	shift, and go to state 371



state 351

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list . TK_CLOSE @4 condition TK_CLOSE   (rule 105)

    TK_CLOSE	shift, and go to state 372



state 352

    sensing_model  ->  TK_OPEN KW_VARIABLE TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE TK_CLOSE .   (rule 146)

    $default	reduce using rule 146 (sensing_model)



state 353

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal . condition TK_CLOSE   (rule 144)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 373
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 354

    multivalued_variable_decl  ->  TK_OPEN multivalued_variable_type TK_OPEN TK_NEW_SYMBOL param_list TK_CLOSE @16 fluent_list_decl TK_CLOSE .   (rule 176)

    $default	reduce using rule 176 (multivalued_variable_decl)



state 355

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE . TK_CLOSE   (rule 193)

    TK_CLOSE	shift, and go to state 374



state 356

    clause  ->  TK_OPEN KW_OR single_condition_list TK_CLOSE .   (rule 208)

    $default	reduce using rule 208 (clause)



state 357

    single_condition_list  ->  single_condition_list single_condition .   (rule 109)

    $default	reduce using rule 109 (single_condition_list)



state 358

    oneof  ->  TK_OPEN KW_ONEOF single_condition_list TK_CLOSE .   (rule 210)

    $default	reduce using rule 210 (oneof)



state 359

    unknown  ->  TK_OPEN KW_UNKNOWN positive_literal TK_CLOSE .   (rule 211)

    $default	reduce using rule 211 (unknown)



state 360

    at_least_one_invariant  ->  TK_OPEN KW_INVARIANT single_condition_list TK_CLOSE .   (rule 201)

    $default	reduce using rule 201 (at_least_one_invariant)



state 361

    at_least_one_invariant  ->  TK_OPEN KW_AT_LEAST_ONE single_condition_list TK_CLOSE .   (rule 202)

    $default	reduce using rule 202 (at_least_one_invariant)



state 362

    at_most_one_invariant  ->  TK_OPEN KW_AT_MOST_ONE single_condition_list TK_CLOSE .   (rule 203)

    $default	reduce using rule 203 (at_most_one_invariant)



state 363

    exactly_one_invariant  ->  TK_OPEN KW_EXACTLY_ONE single_condition_list TK_CLOSE .   (rule 204)

    $default	reduce using rule 204 (exactly_one_invariant)



state 364

    action_effect  ->  TK_OPEN KW_AND action_effect_list TK_CLOSE .   (rule 114)

    $default	reduce using rule 114 (action_effect)



state 365

    action_effect_list  ->  action_effect_list single_action_effect .   (rule 115)

    $default	reduce using rule 115 (action_effect_list)



state 366

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list . TK_CLOSE   (rule 120)

    TK_CLOSE	shift, and go to state 375



state 367

    atomic_effect_kw_list  ->  TK_OPEN KW_AND atomic_effect_list TK_CLOSE .   (rule 124)

    $default	reduce using rule 124 (atomic_effect_kw_list)



state 368

    atomic_effect_list  ->  atomic_effect_list atomic_effect .   (rule 126)

    $default	reduce using rule 126 (atomic_effect_list)



state 369

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 . action_effect TK_CLOSE   (rule 123)

    TK_OPEN	shift, and go to state 260

    literal	go to state 261
    positive_literal	go to state 180
    negative_literal	go to state 181
    action_effect	go to state 376
    single_action_effect	go to state 263
    conditional_effect	go to state 264
    forall_effect	go to state 265
    atomic_effect	go to state 266



state 370

    sensing_decl_list  ->  sensing_decl_list . sensing_decl   (rule 134)
    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list . TK_CLOSE   (rule 141)

    TK_OPEN	shift, and go to state 92
    TK_CLOSE	shift, and go to state 377

    sensing_decl	go to state 142
    forall_sensing	go to state 96
    such_that_sensing	go to state 97
    sensing_model	go to state 98



state 371

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE . @6 condition TK_CLOSE   (rule 108)

    $default	reduce using rule 107 (@6)

    @6  	go to state 378



state 372

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE . @4 condition TK_CLOSE   (rule 105)

    $default	reduce using rule 104 (@4)

    @4  	go to state 379



state 373

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition . TK_CLOSE   (rule 144)

    TK_CLOSE	shift, and go to state 380



state 374

    initial_state  ->  TK_OPEN KW_INIT TK_OPEN KW_AND init_elements TK_CLOSE TK_CLOSE .   (rule 193)

    $default	reduce using rule 193 (initial_state)



state 375

    conditional_effect  ->  TK_OPEN KW_WHEN condition atomic_effect_kw_list TK_CLOSE .   (rule 120)

    $default	reduce using rule 120 (conditional_effect)



state 376

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect . TK_CLOSE   (rule 123)

    TK_CLOSE	shift, and go to state 381



state 377

    forall_sensing  ->  TK_OPEN KW_FORALL TK_OPEN @9 param_list TK_CLOSE @10 sensing_decl_list TK_CLOSE .   (rule 141)

    $default	reduce using rule 141 (forall_sensing)



state 378

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 . condition TK_CLOSE   (rule 108)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 382
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 379

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 . condition TK_CLOSE   (rule 105)

    TK_OPEN	shift, and go to state 173
    KW_TRUE	shift, and go to state 174
    KW_FALSE	shift, and go to state 175

    condition	go to state 383
    constant_condition	go to state 177
    single_condition	go to state 178
    literal	go to state 179
    positive_literal	go to state 180
    negative_literal	go to state 181
    and_condition	go to state 182
    or_condition	go to state 183
    forall_condition	go to state 184
    exists_condition	go to state 185



state 380

    sensing_model  ->  TK_OPEN KW_MODEL_FOR TK_OPEN TK_VARNAME_SYMBOL argument_list TK_CLOSE literal condition TK_CLOSE .   (rule 144)

    $default	reduce using rule 144 (sensing_model)



state 381

    forall_effect  ->  TK_OPEN KW_FORALL TK_OPEN @7 param_list TK_CLOSE @8 action_effect TK_CLOSE .   (rule 123)

    $default	reduce using rule 123 (forall_effect)



state 382

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition . TK_CLOSE   (rule 108)

    TK_CLOSE	shift, and go to state 384



state 383

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition . TK_CLOSE   (rule 105)

    TK_CLOSE	shift, and go to state 385



state 384

    exists_condition  ->  TK_OPEN KW_EXISTS TK_OPEN @5 param_list TK_CLOSE @6 condition TK_CLOSE .   (rule 108)

    $default	reduce using rule 108 (exists_condition)



state 385

    forall_condition  ->  TK_OPEN KW_FORALL TK_OPEN @3 param_list TK_CLOSE @4 condition TK_CLOSE .   (rule 105)

    $default	reduce using rule 105 (forall_condition)



state 386

    $   	go to state 387



state 387

    $   	go to state 388



state 388

    $default	accept
